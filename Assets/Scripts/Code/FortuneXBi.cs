// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: fortune_x_bi.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.Protocol {

  /// <summary>Holder for reflection information generated from fortune_x_bi.proto</summary>
  public static partial class FortuneXBiReflection {

    #region Descriptor
    /// <summary>File descriptor for fortune_x_bi.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FortuneXBiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJmb3J0dW5lX3hfYmkucHJvdG8i41YKD0JpRXZlbnRGb3J0dW5lWBInCgZj",
            "b21tb24YASABKAsyFy5CaUV2ZW50Rm9ydHVuZVguQ29tbW9uEjAKCmdhbWVf",
            "ZXZlbnQYCyABKAsyGi5CaUV2ZW50Rm9ydHVuZVguR2FtZUV2ZW50SAASMgoL",
            "c3Bpbl9hY3Rpb24YDCABKAsyGy5CaUV2ZW50Rm9ydHVuZVguU3BpbkFjdGlv",
            "bkgAEjIKC3NwaW5fcmVzdWx0GA0gASgLMhsuQmlFdmVudEZvcnR1bmVYLlNw",
            "aW5SZXN1bHRIABIyCgtpdGVtX2NoYW5nZRgOIAEoCzIbLkJpRXZlbnRGb3J0",
            "dW5lWC5JdGVtQ2hhbmdlSAAaagoGQ29tbW9uEgwKBGNvaW4YASABKAQSDQoF",
            "bGV2ZWwYAiABKAQSEQoJdmlwX2xldmVsGAMgASgEEg8KB2VtZXJhbGQYBCAB",
            "KAQSEgoKdmlwX3BvaW50cxgFIAEoBBILCgNleHAYBiABKAQaqwEKCUdhbWVF",
            "dmVudBI3Cg9nYW1lX2V2ZW50X3R5cGUYASABKA4yHi5CaUV2ZW50Rm9ydHVu",
            "ZVguR2FtZUV2ZW50VHlwZRI2CgZleHRyYXMYAiADKAsyJi5CaUV2ZW50Rm9y",
            "dHVuZVguR2FtZUV2ZW50LkV4dHJhc0VudHJ5Gi0KC0V4dHJhc0VudHJ5EgsK",
            "A2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaHgoLUGFuZWxDb2x1bW4S",
            "DwoHc3ltYm9scxgBIAMoBBo2CgVQYW5lbBItCgdjb2x1bW5zGAEgAygLMhwu",
            "QmlFdmVudEZvcnR1bmVYLlBhbmVsQ29sdW1uGpYCCgpTcGluQWN0aW9uEg8K",
            "B2dhbWVfaWQYASABKAkSOQoQc3Bpbl9hY3Rpb25fdHlwZRgCIAEoDjIfLkJp",
            "RXZlbnRGb3J0dW5lWC5TcGluQWN0aW9uVHlwZRIPCgdpc19hdXRvGAMgASgI",
            "Eg8KB2lzX2Zhc3QYBCABKAgSEQoJc3Bpbl9tb2RlGAUgASgJEgsKA2JldBgG",
            "IAEoBBISCgpyZXF1ZXN0X2lkGAcgASgJEjcKBmV4dHJhcxgIIAMoCzInLkJp",
            "RXZlbnRGb3J0dW5lWC5TcGluQWN0aW9uLkV4dHJhc0VudHJ5Gi0KC0V4dHJh",
            "c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaugMKClNw",
            "aW5SZXN1bHQSDwoHZ2FtZV9pZBgBIAEoCRI5ChBzcGluX2FjdGlvbl90eXBl",
            "GAIgASgOMh8uQmlFdmVudEZvcnR1bmVYLlNwaW5BY3Rpb25UeXBlEhIKCnJl",
            "cXVlc3RfaWQYAyABKAkSCwoDYmV0GAQgASgEEgsKA3dpbhgFIAEoBBImCgZw",
            "YW5lbHMYBiADKAsyFi5CaUV2ZW50Rm9ydHVuZVguUGFuZWwSEQoJcG9zaXRp",
            "b25zGAcgAygEEjcKBmV4dHJhcxgIIAMoCzInLkJpRXZlbnRGb3J0dW5lWC5T",
            "cGluUmVzdWx0LkV4dHJhc0VudHJ5EhMKC2lzX3NwaW5fZW5kGAkgASgIEgwK",
            "BGNvc3QYCiABKAQSEwoLZGlzcGxheV93aW4YCyABKAQSGQoRZGlzcGxheV90",
            "b3RhbF93aW4YDCABKAQSGwoTY29udHJvbF9zdHJhZ2VneV9pZBgNIAEoCRIf",
            "Chdjb250cm9sX3N0cmFnZWd5X3JhbmRvbRgOIAEoBBotCgtFeHRyYXNFbnRy",
            "eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGu0BCgpJdGVtQ2hh",
            "bmdlEiMKBGl0ZW0YASABKA4yFS5CaUV2ZW50Rm9ydHVuZVguSXRlbRIOCgZh",
            "bW91bnQYAiABKAMSDwoHY3VycmVudBgDIAEoBBIxCgZyZWFzb24YBCABKA4y",
            "IS5CaUV2ZW50Rm9ydHVuZVguSXRlbUNoYW5nZVJlYXNvbhI3CgZleHRyYXMY",
            "BSADKAsyJy5CaUV2ZW50Rm9ydHVuZVguSXRlbUNoYW5nZS5FeHRyYXNFbnRy",
            "eRotCgtFeHRyYXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6",
            "AjgBIqU6Cg1HYW1lRXZlbnRUeXBlEhoKFkdBTUVfRVZFTlRfUExBQ0VIT0xE",
            "RVIQABIZChVHQU1FX0VWRU5UX0xBVU5DSF9BUFAQARInCiNHQU1FX0VWRU5U",
            "X0lOSVRfQUREUkVTU0FCTEVfU1VDQ0VTUxACEhwKGEdBTUVfRVZFTlRfRE9X",
            "TkxPQURfQ09ERRADEiEKHUdBTUVfRVZFTlRfU1RBUlRfTE9BRF9MT0FESU5H",
            "EAQSIgoeR0FNRV9FVkVOVF9FTlRFUl9MT0FESU5HX1NDRU5FEAUSIAocR0FN",
            "RV9FVkVOVF9ET1dOTE9BRF9SRVNPVVJDRRAGEiEKHUdBTUVfRVZFTlRfRU5U",
            "RVJfTE9HSU5fU0NSRUVOEAcSGQoVR0FNRV9FVkVOVF9VU0VSX0xPR0lOEAgS",
            "IAocR0FNRV9FVkVOVF9HVUlERV9QT1BfV0VMQ09NRRAJEiQKIEdBTUVfRVZF",
            "TlRfR1VJREVfQ09MTEVDVF9XRUxDT01FEAoSJgoiR0FNRV9FVkVOVF9HVUlE",
            "RV9QT1BfRklSU1RfTUFDSElORRALEiYKIkdBTUVfRVZFTlRfR1VJREVfVEFQ",
            "X0ZJUlNUX01BQ0hJTkUQDBIfChtHQU1FX0VWRU5UX0dVSURFX1BPUF9TUElO",
            "XzEQDRIfChtHQU1FX0VWRU5UX0dVSURFX1RBUF9TUElOXzEQDhIfChtHQU1F",
            "X0VWRU5UX0dVSURFX0NPTVBMRVRFXzEQDxImCiJHQU1FX0VWRU5UX0dVSURF",
            "X1BPUF9SRUFDSF9MRVZFTF8yEBASKwonR0FNRV9FVkVOVF9HVUlERV9DT01Q",
            "TEVURV9SRUFDSF9MRVZFTF8yEBESJwojR0FNRV9FVkVOVF9HVUlERV9QT1Bf",
            "VU5MT0NLX1FVRVNUXzMQEhIsCihHQU1FX0VWRU5UX0dVSURFX0NPTVBMRVRF",
            "X1VOTE9DS19RVUVTVF8zEBMSIwofR0FNRV9FVkVOVF9HVUlERV9UUkFOU0ZF",
            "Ul9RVUVTVBAUEhoKFkdBTUVfRVZFTlRfUVVFU1RfRU5URVIQFRIaChZHQU1F",
            "X0VWRU5UX1FVRVNUX1RBUF8xEBYSHwobR0FNRV9FVkVOVF9RVUVTVF9DT01Q",
            "TEVURV8xEBcSHgoaR0FNRV9FVkVOVF9RVUVTVF9DT0xMRUNUXzEQGBIaChZH",
            "QU1FX0VWRU5UX1FVRVNUX1RBUF8yEBkSHwobR0FNRV9FVkVOVF9RVUVTVF9D",
            "T01QTEVURV8yEBoSHgoaR0FNRV9FVkVOVF9RVUVTVF9DT0xMRUNUXzIQGxIa",
            "ChZHQU1FX0VWRU5UX1FVRVNUX1RBUF8zEBwSHwobR0FNRV9FVkVOVF9RVUVT",
            "VF9DT01QTEVURV8zEB0SHgoaR0FNRV9FVkVOVF9RVUVTVF9DT0xMRUNUXzMQ",
            "HhIaChZHQU1FX0VWRU5UX1FVRVNUX1RBUF80EB8SHwobR0FNRV9FVkVOVF9R",
            "VUVTVF9DT01QTEVURV80ECASHgoaR0FNRV9FVkVOVF9RVUVTVF9DT0xMRUNU",
            "XzQQIRIaChZHQU1FX0VWRU5UX1FVRVNUX1RBUF81ECISHwobR0FNRV9FVkVO",
            "VF9RVUVTVF9DT01QTEVURV81ECMSHgoaR0FNRV9FVkVOVF9RVUVTVF9DT0xM",
            "RUNUXzUQJBIaChZHQU1FX0VWRU5UX1FVRVNUX1RBUF82ECUSHwobR0FNRV9F",
            "VkVOVF9RVUVTVF9DT01QTEVURV82ECYSHgoaR0FNRV9FVkVOVF9RVUVTVF9D",
            "T0xMRUNUXzYQJxIcChhHQU1FX0VWRU5UX01BQ0hJTkVfQ0xJQ0sQKBIlCiFH",
            "QU1FX0VWRU5UX01BQ0hJTkVfRE9XTkxPQURfU1RBUlQQKRInCiNHQU1FX0VW",
            "RU5UX01BQ0hJTkVfRE9XTkxPQURfU1VDQ0VTUxAqEiQKIEdBTUVfRVZFTlRf",
            "TUFDSElORV9ET1dOTE9BRF9GQUlMECsSFwoTR0FNRV9FVkVOVF9MRVZFTF9V",
            "UBAsEhsKF0dBTUVfRVZFTlRfVklQX0xFVkVMX1VQEC0SGgoWR0FNRV9FVkVO",
            "VF9SQVRFX1VTX1BPUBAuEhgKFEdBTUVfRVZFTlRfUkFURV9VU181EC8SGAoU",
            "R0FNRV9FVkVOVF9SQVRFX1VTXzQQMBIcChhHQU1FX0VWRU5UX1JBVEVfVVNf",
            "Q0xPU0UQMRIhCh1HQU1FX0VWRU5UX0JJTkRfRkFDRUJPT0tfQklORBAyEiQK",
            "IEdBTUVfRVZFTlRfQklORF9GQUNFQk9PS19TVUNDRVNTEDMSIQodR0FNRV9F",
            "VkVOVF9CSU5EX0ZBQ0VCT09LX0ZBSUwQNBIaChZHQU1FX0VWRU5UX0xJS0Vf",
            "VVNfUE9QEDUSGwoXR0FNRV9FVkVOVF9MSUtFX1VTX0xJS0UQNhIcChhHQU1F",
            "X0VWRU5UX0xJS0VfVVNfTEFURVIQNxIcChhHQU1FX0VWRU5UX0xJS0VfVVNf",
            "Q0xPU0UQOBIZChVHQU1FX0VWRU5UX0NPTlRBQ1RfVVMQORIbChdHQU1FX0VW",
            "RU5UX1NFVFRJTkdfT1BFThA6Eh4KGkdBTUVfRVZFTlRfREFJTFlfQk9OVVNf",
            "UE9QEDsSIAocR0FNRV9FVkVOVF9EQUlMWV9CT05VU19EQUlMWRA8EiAKHEdB",
            "TUVfRVZFTlRfREFJTFlfQk9OVVNfU1RBR0UQPRIpCiVHQU1FX0VWRU5UX1RJ",
            "TUVSX0JPTlVTX0hPVVJMWV9DT0xMRUNUED4SKAokR0FNRV9FVkVOVF9USU1F",
            "Ul9CT05VU19XSEVFTF9DT0xMRUNUED8SLgoqR0FNRV9FVkVOVF9USU1FUl9C",
            "T05VU19FWFRSQV9XSEVFTF9DT0xMRUNUEEASKwonR0FNRV9FVkVOVF9USU1F",
            "Ul9CT05VU19HT0xERU5fV0hFRUxfUE9QEEESLQopR0FNRV9FVkVOVF9USU1F",
            "Ul9CT05VU19HT0xERU5fV0hFRUxfUE9QXzIQQhIsCihHQU1FX0VWRU5UX1RJ",
            "TUVSX0JPTlVTX0dPTERFTl9XSEVFTF9FWElUEEMSMAosR0FNRV9FVkVOVF9U",
            "SU1FUl9CT05VU19HT0xERU5fV0hFRUxfUFVSQ0hBU0UQRBI4CjRHQU1FX0VW",
            "RU5UX1RJTUVSX0JPTlVTX0dPTERFTl9XSEVFTF9QVVJDSEFTRV9TVUNDRVNT",
            "EEUSIAocR0FNRV9FVkVOVF9EQUlMWV9NSVNTSU9OX1BPUBBGEi0KKUdBTUVf",
            "RVZFTlRfREFJTFlfTUlTU0lPTl9OT1JNQUxfQ09MTEVDVF8xEEcSLQopR0FN",
            "RV9FVkVOVF9EQUlMWV9NSVNTSU9OX05PUk1BTF9DT0xMRUNUXzIQSBItCilH",
            "QU1FX0VWRU5UX0RBSUxZX01JU1NJT05fTk9STUFMX0NPTExFQ1RfMxBJEioK",
            "JkdBTUVfRVZFTlRfREFJTFlfTUlTU0lPTl9IT05PUl9DT0xMRUNUEEoSKgom",
            "R0FNRV9FVkVOVF9EQUlMWV9NSVNTSU9OX1NUQUdFX0NPTExFQ1QQSxIfChtH",
            "QU1FX0VWRU5UX01JU1NJT05fUEFTU19QT1AQTBIjCh9HQU1FX0VWRU5UX01J",
            "U1NJT05fUEFTU19DT0xMRUNUEE0SJwojR0FNRV9FVkVOVF9NSVNTSU9OX1BB",
            "U1NfQ09MTEVDVF9BTEwQThIpCiVHQU1FX0VWRU5UX01JU1NJT05fUEFTU19C",
            "VVlfTEVWRUxfUE9QEE8SLgoqR0FNRV9FVkVOVF9NSVNTSU9OX1BBU1NfQlVZ",
            "X0xFVkVMX1BVUkNIQVNFEFASNgoyR0FNRV9FVkVOVF9NSVNTSU9OX1BBU1Nf",
            "QlVZX0xFVkVMX1BVUkNIQVNFX1NVQ0NFU1MQURImCiJHQU1FX0VWRU5UX01J",
            "U1NJT05fUEFTU19VTkxPQ0tfUE9QEFISKwonR0FNRV9FVkVOVF9NSVNTSU9O",
            "X1BBU1NfVU5MT0NLX1BVUkNIQVNFEFMSMwovR0FNRV9FVkVOVF9NSVNTSU9O",
            "X1BBU1NfVU5MT0NLX1BVUkNIQVNFX1NVQ0NFU1MQVBIZChVHQU1FX0VWRU5U",
            "X1NUT1JFX09QRU4QVRIgChxHQU1FX0VWRU5UX1NUT1JFX0JPTlVTX0NMSUNL",
            "EFYSIwofR0FNRV9FVkVOVF9TVE9SRV9HSUZUX0JPWF9DTElDSxBXEiUKIUdB",
            "TUVfRVZFTlRfU1RPUkVfR0lGVF9CT1hfQ09MTEVDVBBYEh0KGUdBTUVfRVZF",
            "TlRfU1RPUkVfUFVSQ0hBU0UQWRIlCiFHQU1FX0VWRU5UX1NUT1JFX1BVUkNI",
            "QVNFX1NVQ0NFU1MQWhIcChhHQU1FX0VWRU5UX1BVUkNIQVNFX0ZBSUwQWxIe",
            "ChpHQU1FX0VWRU5UX1BJR0dZX0JBTktfT1BFThBcEiIKHkdBTUVfRVZFTlRf",
            "UElHR1lfQkFOS19QVVJDSEFTRRBdEioKJkdBTUVfRVZFTlRfUElHR1lfQkFO",
            "S19QVVJDSEFTRV9TVUNDRVNTEF4SIAocR0FNRV9FVkVOVF9TUEVDSUFMX09G",
            "RkVSX1BPUBBfEiUKIUdBTUVfRVZFTlRfU1BFQ0lBTF9PRkZFUl9QVVJDSEFT",
            "RRBgEi0KKUdBTUVfRVZFTlRfU1BFQ0lBTF9PRkZFUl9QVVJDSEFTRV9TVUND",
            "RVNTEGESGQoVR0FNRV9FVkVOVF9JTkJPWF9PUEVOEGISHAoYR0FNRV9FVkVO",
            "VF9JTkJPWF9DT0xMRUNUEGMSFgoSR0FNRV9FVkVOVF9BRFNfUE9QEGQSGgoW",
            "R0FNRV9FVkVOVF9BRFNfQ09MTEVDVBBlEiEKHUdBTUVfRVZFTlRfVEVSTV9T",
            "RVJWSUNFX0NMSUNLEGYSHAoYR0FNRV9FVkVOVF9QUklWQUNZX0NMSUNLEGcS",
            "LAooR0FNRV9FVkVOVF9DT1VQT05fQUNUSVZJVFlfQ09JTlNfQURFTlRFUhBo",
            "EiwKKEdBTUVfRVZFTlRfQ09VUE9OX0FDVElWSVRZX0NPSU5TX0FEQ0xPU0UQ",
            "aRIrCidHQU1FX0VWRU5UX0NPVVBPTl9BQ1RJVklUWV9DT0lOU19SRURFRU0Q",
            "ahIyCi5HQU1FX0VWRU5UX0NPVVBPTl9BQ1RJVklUWV9DT0lOU19DQVJPVVNF",
            "TEVOVEVSEGsSIQodR0FNRV9FVkVOVF9RVUVTVF9TRUFTT05fRU5URVIQbBIl",
            "CiFHQU1FX0VWRU5UX1FVRVNUX1NFQVNPTl9SQU5LRU5URVIQbRIlCiFHQU1F",
            "X0VWRU5UX1FVRVNUX1NFQVNPTl9SQU5LQVdBUkQQbhIpCiVHQU1FX0VWRU5U",
            "X1FVRVNUX1NFQVNPTl9TUEVFRFVQX0NIRUNLEG8SJwojR0FNRV9FVkVOVF9R",
            "VUVTVF9TRUFTT05fU1BFRURVUF9CVVkQcBIrCidHQU1FX0VWRU5UX1FVRVNU",
            "X1NFQVNPTl9RVUVTVFBBU1NfQ0hFQ0sQcRIpCiVHQU1FX0VWRU5UX1FVRVNU",
            "X1NFQVNPTl9RVUVTVFBBU1NfQlVZEHISHwobR0FNRV9FVkVOVF9RVUVTVF9T",
            "RUFTT05fVEFQEHMSJAogR0FNRV9FVkVOVF9RVUVTVF9TRUFTT05fQ09NUExF",
            "VEUQdBIjCh9HQU1FX0VWRU5UX1FVRVNUX1NFQVNPTl9DT0xMRUNUEHUSIgoe",
            "R0FNRV9FVkVOVF9RVUVTVF9TRUFTT05fU0VMRUNUEHYSFwoTR0FNRV9FVkVO",
            "VF9QQVNTX0xWNRB3EhcKE0dBTUVfRVZFTlRfUEFTU19MVjkQeBIYChRHQU1F",
            "X0VWRU5UX1BBU1NfTFYxMBB5EhgKFEdBTUVfRVZFTlRfUEFTU19MVjE1EHoS",
            "GAoUR0FNRV9FVkVOVF9QQVNTX0xWMjAQexIYChRHQU1FX0VWRU5UX1BBU1Nf",
            "TFYyNRB8EhgKFEdBTUVfRVZFTlRfUEFTU19MVjMwEH0SGAoUR0FNRV9FVkVO",
            "VF9QQVNTX0xWNDAQfhIYChRHQU1FX0VWRU5UX1BBU1NfTFY1MBB/EhkKFEdB",
            "TUVfRVZFTlRfUEFTU19MVjYwEIABEhkKFEdBTUVfRVZFTlRfUEFTU19MVjcw",
            "EIEBEhoKFUdBTUVfRVZFTlRfQkFDS19MT0JCWRCCARIfChpHQU1FX0VWRU5U",
            "X0NSQVpFX1NNQVNIX1BPUBCXARIjCh5HQU1FX0VWRU5UX0NSQVpFX1NNQVNI",
            "X0NPTExFQ1QQmAESHwoaR0FNRV9FVkVOVF9DUkFaRV9TTUFTSF9XSU4QmQES",
            "JQogR0FNRV9FVkVOVF9DUkFaRV9TTUFTSF9CVVlfRU5URVIQmgESHwoaR0FN",
            "RV9FVkVOVF9DUkFaRV9TTUFTSF9CVVkQmwESGQoUR0FNRV9FVkVOVF9QQVNT",
            "X0xWMjMQnAESGQoUR0FNRV9FVkVOVF9QQVNTX0xWNjUQnQESGQoUR0FNRV9F",
            "VkVOVF9QQVNTX0xWNzUQngESGQoUR0FNRV9FVkVOVF9QQVNTX0xWODAQnwES",
            "GQoUR0FNRV9FVkVOVF9QQVNTX0xWOTAQoAESGQoUR0FNRV9FVkVOVF9QQVNT",
            "X0xWOTUQoQESGgoVR0FNRV9FVkVOVF9QQVNTX0xWMTAwEKIBEhoKFUdBTUVf",
            "RVZFTlRfUEFTU19MVjEwNRCjARIaChVHQU1FX0VWRU5UX1BBU1NfTFYxMTAQ",
            "pAESGgoVR0FNRV9FVkVOVF9QQVNTX0xWMTIwEKUBEhoKFUdBTUVfRVZFTlRf",
            "UEFTU19MVjEzMBCmARIaChVHQU1FX0VWRU5UX1BBU1NfTFYxNTAQpwESJAof",
            "R0FNRV9FVkVOVF9QVVJDSEFTRV9PTkVUSU1FXzE5ORCoARIkCh9HQU1FX0VW",
            "RU5UX1BVUkNIQVNFX09ORVRJTUVfNDk5EKkBEiQKH0dBTUVfRVZFTlRfUFVS",
            "Q0hBU0VfT05FVElNRV85OTkQqgESJQogR0FNRV9FVkVOVF9QVVJDSEFTRV9P",
            "TkVUSU1FXzE5OTkQqwESJQogR0FNRV9FVkVOVF9QVVJDSEFTRV9PTkVUSU1F",
            "XzQ5OTkQrAESJQogR0FNRV9FVkVOVF9DT01QTEVURV9BRFJVU0hfMTBBRFMQ",
            "rQESGQoUR0FNRV9FVkVOVF9QQVNTX0xWMzIQrgESGQoUR0FNRV9FVkVOVF9Q",
            "QVNTX0xWMzUQrwESGgoVR0FNRV9FVkVOVF9QQVNTX0xWMTYwELABEhoKFUdB",
            "TUVfRVZFTlRfUEFTU19MVjE4MBCxARIaChVHQU1FX0VWRU5UX1BBU1NfTFYy",
            "MDAQsgESGgoVR0FNRV9FVkVOVF9QQVNTX0xWMjIwELMBEhoKFUdBTUVfRVZF",
            "TlRfUEFTU19MVjI0MBC0ARIaChVHQU1FX0VWRU5UX1BBU1NfTFYyNjAQtQES",
            "GgoVR0FNRV9FVkVOVF9QQVNTX0xWMjgwELYBEhoKFUdBTUVfRVZFTlRfUEFT",
            "U19MVjMyMBC3ARIaChVHQU1FX0VWRU5UX1BBU1NfTFYzNTAQuAESGgoVR0FN",
            "RV9FVkVOVF9QQVNTX0xWMzgwELkBEhoKFUdBTUVfRVZFTlRfUEFTU19MVjQw",
            "MBC6ARIaChVHQU1FX0VWRU5UX1BBU1NfTFY0MzAQuwESGgoVR0FNRV9FVkVO",
            "VF9QQVNTX0xWNDUwELwBEhoKFUdBTUVfRVZFTlRfUEFTU19MVjQ3MBC9ARIa",
            "ChVHQU1FX0VWRU5UX1BBU1NfTFY1MDAQvgESGgoVR0FNRV9FVkVOVF9QQVNT",
            "X0xWNTIwEL8BEhoKFUdBTUVfRVZFTlRfUEFTU19MVjU1MBDAARIaChVHQU1F",
            "X0VWRU5UX1BBU1NfTFY1NzAQwQESGgoVR0FNRV9FVkVOVF9QQVNTX0xWNjAw",
            "EMIBEiMKHkdBTUVfRVZFTlRfUlZfV0FUQ0hFRF9GSU5JU0hFRBDDARIgChtH",
            "QU1FX0VWRU5UX0NPTExFQ1RJT05fRU5URVIQyQESJgohR0FNRV9FVkVOVF9D",
            "T0xMRUNUSU9OX0FMQlVNX0VOVEVSEMoBEioKJUdBTUVfRVZFTlRfQ09MTEVD",
            "VElPTl9BTEJVTV9DQVJEQ0hFQ0sQywESMAorR0FNRV9FVkVOVF9DT0xMRUNU",
            "SU9OX0xVQ0tZX0NIQUxMRU5HRV9FTlRFUhDMARIrCiZHQU1FX0VWRU5UX0NP",
            "TExFQ1RJT05fTFVDS1lfU1BJTl9FTlRFUhDNARIrCiZHQU1FX0VWRU5UX0NP",
            "TExFQ1RJT05fTFVDS1lfU1BJTl9TVEFSVBDOARIsCidHQU1FX0VWRU5UX0NP",
            "TExFQ1RJT05fTFVDS1lfU1BJTl9SRVNVTFQQzwESMQosR0FNRV9FVkVOVF9D",
            "T0xMRUNUSU9OX0ZPUlRVTkVfRVhDSEFOR0VfRU5URVIQ0AESMQosR0FNRV9F",
            "VkVOVF9DT0xMRUNUSU9OX0ZPUlRVTkVfRVhDSEFOR0VfU1RBUlQQ0QESMAor",
            "R0FNRV9FVkVOVF9DT0xMRUNUSU9OX0ZPUlRVTkVfRVhDSEFOR0VfUlVMRRDS",
            "ARIqCiVHQU1FX0VWRU5UX0NPTExFQ1RJT05fTUFHSUNfSEFUX0VOVEVSENMB",
            "EioKJUdBTUVfRVZFTlRfQ09MTEVDVElPTl9NQUdJQ19IQVRfU1RBUlQQ1AES",
            "KQokR0FNRV9FVkVOVF9DT0xMRUNUSU9OX01BR0lDX0hBVF9UQUtFENUBEikK",
            "JEdBTUVfRVZFTlRfQ09MTEVDVElPTl9NQUdJQ19IQVRfT1ZFUhDWARItCihH",
            "QU1FX0VWRU5UX0NPTExFQ1RJT05fTUFHSUNfSEFUX0NPTVBMRVRFENcBEikK",
            "JEdBTUVfRVZFTlRfUElHR1lfQk9OVVNfR0lGVEJPWF9QT1BVUBDmARInCiJH",
            "QU1FX0VWRU5UX1BJR0dZX0JPTlVTX0dJRlRCT1hfQlVZEOcBEjIKLUdBTUVf",
            "RVZFTlRfUElHR1lfQk9OVVNfR0lGVEJPWF9CVVlfU1VDQ0VTU0ZVTBDoARIn",
            "CiJHQU1FX0VWRU5UX05FV0JJRVFVRVNUX0JPT1NUX1BPUFVQEOkBEioKJUdB",
            "TUVfRVZFTlRfTkVXQklFUVVFU1RfQk9PU1RfQURfUE9QVVAQ6gESJQogR0FN",
            "RV9FVkVOVF9ORVdCSUVRVUVTVF9CT09TVF9CVVkQ6wESMAorR0FNRV9FVkVO",
            "VF9ORVdCSUVRVUVTVF9CT09TVF9CVVlfU1VDQ0VTU0ZVTBDsARIqCiVHQU1F",
            "X0VWRU5UX05FV0JJRVFVRVNUX0JPT1NUX0FEX1dBVENIEO0BEhsKFkdBTUVf",
            "RVZFTlRfQVZBVEFSX09QRU4Q7gESHQoYR0FNRV9FVkVOVF9BVkFUQVJfQ0hB",
            "TkdFEO8BEh4KGUdBTUVfRVZFTlRfTEFVTkNIX01FVFJJQ1MQ8AESIwoeR0FN",
            "RV9FVkVOVF9WQUxFTlRJTkVTREFZX0VOVEVSEOkHEiYKIUdBTUVfRVZFTlRf",
            "VkFMRU5USU5FU0RBWV9QUk9HUkVTUxDqBxIlCiBHQU1FX0VWRU5UX1ZBTEVO",
            "VElORVNEQVlfQ09MTEVDVBDrBxIoCiNHQU1FX0VWRU5UX1ZBTEVOVElORVNE",
            "QVlfUEFTU1VOTE9DSxDsBxImCiFHQU1FX0VWRU5UX1BVUkNIQVNFX1NIT1Bf",
            "Q09JTl8xOTkQ7QcSJgohR0FNRV9FVkVOVF9QVVJDSEFTRV9TSE9QX0NPSU5f",
            "NDk5EO4HEiYKIUdBTUVfRVZFTlRfUFVSQ0hBU0VfU0hPUF9DT0lOXzk5ORDv",
            "BxInCiJHQU1FX0VWRU5UX1BVUkNIQVNFX1NIT1BfQ09JTl8xOTk5EPAHIs4C",
            "Cg5TcGluQWN0aW9uVHlwZRIZChVTUElOX0FDVElPTl9UWVBFX05PTkUQABIZ",
            "ChVTUElOX0FDVElPTl9UWVBFX1NQSU4QARIZChVTUElOX0FDVElPTl9UWVBF",
            "X1NUT1AQAhIdChlTUElOX0FDVElPTl9UWVBFX05PX0NISVBTEAMSJAogU1BJ",
            "Tl9BQ1RJT05fVFlQRV9GRUFUVVJFX1RSSUdHRVIQBBIhCh1TUElOX0FDVElP",
            "Tl9UWVBFX0ZFQVRVUkVfUExBWRAFEiAKHFNQSU5fQUNUSU9OX1RZUEVfRkVB",
            "VFVSRV9FTkQQBhIcChhTUElOX0FDVElPTl9UWVBFX0pBQ0tQT1QQBxIfChtT",
            "UElOX0FDVElPTl9UWVBFX0NIQU5HRV9CRVQQCBIiCh5TUElOX0FDVElPTl9U",
            "WVBFX09QRU5fUEFZVEFCTEUQCSLgAQoESXRlbRINCglJVEVNX05PTkUQABIN",
            "CglJVEVNX0NPSU4QARIMCghJVEVNX0VYUBACEhMKD0lURU1fVklQX1BPSU5U",
            "UxADEhAKDElURU1fRU1FUkFMRBAEEhEKDUlURU1fR0lGVF9CT1gQBRIXChNJ",
            "VEVNX0xFVkVMX1VQX0JVUlNUEAYSFAoQSVRFTV9TVVBFUl9XSEVFTBAHEhIK",
            "DklURU1fRE9VQkxFX1hQEAgSFwoTSVRFTV9NSVNTSU9OX1BPSU5UUxAJEhYK",
            "EklURU1fTUlTU0lPTl9TVEFSUxAKIrkLChBJdGVtQ2hhbmdlUmVhc29uEhsK",
            "F0lURU1fQ0hBTkdFX1JFQVNPTl9OT05FEAASJQohSVRFTV9DSEFOR0VfUkVB",
            "U09OX0NSRUFURV9QUk9GSUxFEAESHAoYSVRFTV9DSEFOR0VfUkVBU09OX0dV",
            "SURFEAISHAoYSVRFTV9DSEFOR0VfUkVBU09OX1FVRVNUEAMSJAogSVRFTV9D",
            "SEFOR0VfUkVBU09OX0JJTkRfRkFDRUJPT0sQBBIeChpJVEVNX0NIQU5HRV9S",
            "RUFTT05fTElLRV9VUxAFEhoKFklURU1fQ0hBTkdFX1JFQVNPTl9JQVAQBhIi",
            "Ch5JVEVNX0NIQU5HRV9SRUFTT05fU1RPUkVfQk9OVVMQBxIlCiFJVEVNX0NI",
            "QU5HRV9SRUFTT05fU1RPUkVfR0lGVF9CT1gQCBIbChdJVEVNX0NIQU5HRV9S",
            "RUFTT05fU1BJThAJEh8KG0lURU1fQ0hBTkdFX1JFQVNPTl9MRVZFTF9VUBAK",
            "EiMKH0lURU1fQ0hBTkdFX1JFQVNPTl9WSVBfTEVWRUxfVVAQCxIoCiRJVEVN",
            "X0NIQU5HRV9SRUFTT05fREFJTFlfQk9OVVNfREFJTFkQDBIoCiRJVEVNX0NI",
            "QU5HRV9SRUFTT05fREFJTFlfQk9OVVNfU1RBR0UQDRIpCiVJVEVNX0NIQU5H",
            "RV9SRUFTT05fVElNRVJfQk9OVVNfSE9VUkxZEA4SKAokSVRFTV9DSEFOR0Vf",
            "UkVBU09OX1RJTUVSX0JPTlVTX1dIRUVMEA8SLgoqSVRFTV9DSEFOR0VfUkVB",
            "U09OX1RJTUVSX0JPTlVTX0VYVFJBX1dIRUVMEBASKwonSVRFTV9DSEFOR0Vf",
            "UkVBU09OX0RBSUxZX01JU1NJT05fTk9STUFMEBESKgomSVRFTV9DSEFOR0Vf",
            "UkVBU09OX0RBSUxZX01JU1NJT05fSE9OT1IQEhIqCiZJVEVNX0NIQU5HRV9S",
            "RUFTT05fREFJTFlfTUlTU0lPTl9TVEFHRRATEigKJElURU1fQ0hBTkdFX1JF",
            "QVNPTl9NSVNTSU9OX1BBU1NfRlJFRRAUEisKJ0lURU1fQ0hBTkdFX1JFQVNP",
            "Tl9NSVNTSU9OX1BBU1NfTUlTU0lPThAVEisKJ0lURU1fQ0hBTkdFX1JFQVNP",
            "Tl9NSVNTSU9OX1BBU1NfTElNSVRFRBAWEikKJUlURU1fQ0hBTkdFX1JFQVNP",
            "Tl9NSVNTSU9OX1BBU1NfTEVWRUwQFxIcChhJVEVNX0NIQU5HRV9SRUFTT05f",
            "SU5CT1gQGBIaChZJVEVNX0NIQU5HRV9SRUFTT05fQURTEBkSHAoYSVRFTV9D",
            "SEFOR0VfUkVBU09OX0FETUlOEBoSHQoZSVRFTV9DSEFOR0VfUkVBU09OX0VY",
            "UElSRRAbEiMKH0lURU1fQ0hBTkdFX1JFQVNPTl9CSU5EX0FQUExFSUQQHBIp",
            "CiVJVEVNX0NIQU5HRV9SRUFTT05fVkFMRU5USU5FR0lGVF9GUkVFEB0SLQop",
            "SVRFTV9DSEFOR0VfUkVBU09OX1ZBTEVOVElORUdJRlRfUFVSQ0hBU0UQHhIj",
            "Ch9JVEVNX0NIQU5HRV9SRUFTT05fQ09NUExFVEVfU0VUEB8SJQohSVRFTV9D",
            "SEFOR0VfUkVBU09OX0NPTVBMRVRFX0FMQlVNECASIQodSVRFTV9DSEFOR0Vf",
            "UkVBU09OX0xVQ0tZX1NQSU4QIRIjCh9JVEVNX0NIQU5HRV9SRUFTT05fQ0FS",
            "RF9SRUNPVkVSECISJwojSVRFTV9DSEFOR0VfUkVBU09OX01BR0lDX0hBVF9S",
            "RUxJRkUQIxInCiNJVEVNX0NIQU5HRV9SRUFTT05fT1BFUkFUSU9OX0NPVVBP",
            "ThAkEiwKKElURU1fQ0hBTkdFX1JFQVNPTl9NQUdJQ19IQVRfR0VUX1JFV0FS",
            "RFMQJUIJCgdwYXlsb2FkQlQKI2NvbS5kcmFnb25wbHVzLm5ldHdvcmsuYXBp",
            "LnByb3RvY29sWglwcm90b2NvbHOqAiFEcmFnb25VM0RTREsuTmV0d29yay5B",
            "UEkuUHJvdG9jb2xiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX), global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Parser, new[]{ "Common", "GameEvent", "SpinAction", "SpinResult", "ItemChange" }, new[]{ "Payload" }, new[]{ typeof(global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.GameEventType), typeof(global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinActionType), typeof(global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Item), typeof(global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.ItemChangeReason) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Common), global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Common.Parser, new[]{ "Coin", "Level", "VipLevel", "Emerald", "VipPoints", "Exp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.GameEvent), global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.GameEvent.Parser, new[]{ "GameEventType", "Extras" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.PanelColumn), global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.PanelColumn.Parser, new[]{ "Symbols" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Panel), global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Panel.Parser, new[]{ "Columns" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinAction), global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinAction.Parser, new[]{ "GameId", "SpinActionType", "IsAuto", "IsFast", "SpinMode", "Bet", "RequestId", "Extras" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinResult), global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinResult.Parser, new[]{ "GameId", "SpinActionType", "RequestId", "Bet", "Win", "Panels", "Positions", "Extras", "IsSpinEnd", "Cost", "DisplayWin", "DisplayTotalWin", "ControlStragegyId", "ControlStragegyRandom" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.ItemChange), global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.ItemChange.Parser, new[]{ "Item", "Amount", "Current", "Reason", "Extras" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })})
          }));
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV5", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV5",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "2j9oef",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV9", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV9",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "6grmvr",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV10", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV10",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "8hx45b",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV15", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV15",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "hnalvm",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV20", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV20",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "xapxht",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV25", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV25",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "3qhc07",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV30", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV30",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "9cu661",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV40", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV40",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "4vqap5",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV50", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV50",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "ho57mw",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV60", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV60",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "6ayeru",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV70", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV70",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "hnadzm",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV23", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV23",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "wln9af",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV65", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV65",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "xn7pgc",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV75", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV75",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "gyeekd",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV80", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV80",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "3a5oi1",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV90", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV90",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "5ujcow",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV95", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV95",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "c56cmq",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV100", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV100",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "g6xoyn",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV105", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV105",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "20dn2t",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV110", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV110",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "3pfisb",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV120", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV120",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "scnku9",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV130", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV130",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "auq2hq",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV150", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV150",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "enqfzn",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PURCHASE_ONETIME_199", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PURCHASE_ONETIME_199",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "uttzot",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PURCHASE_ONETIME_499", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PURCHASE_ONETIME_499",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "go54r2",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PURCHASE_ONETIME_999", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PURCHASE_ONETIME_999",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "u211w9",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PURCHASE_ONETIME_1999", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PURCHASE_ONETIME_1999",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "we42xq",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PURCHASE_ONETIME_4999", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PURCHASE_ONETIME_4999",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "1k7xxs",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_COMPLETE_ADRUSH_10ADS", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_COMPLETE_ADRUSH_10ADS",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "v7ms57",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV32", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV32",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "em2gy3",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV35", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV35",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "8o5s8d",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV160", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV160",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "pyx67h",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PASS_LV180", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PASS_LV180",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "e5ry76",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV200", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV200",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "ljmrms",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV220", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV220",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "fxbcp7",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV240", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV240",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "swn37q",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV260", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV260",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "rahmqs",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV280", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV280",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "quuhsb",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV320", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV320",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "2sim1d",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV350", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV350",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "rxu8xh",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV380", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV380",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "syhpt9",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV400", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV400",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "iql5mi",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV430", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV430",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "bfa0n1",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV450", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV450",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "1ztmhm",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV470", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV470",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "uc1ozg",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV500", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV500",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "5ej4kl",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV520", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV520",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "504axu",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV550", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV550",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "d63wq3",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV570", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV570",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "sbsj4y",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_Reach_LV600", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_Reach_LV600",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "876vm5",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PURCHASE_SHOP_COIN_199", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PURCHASE_SHOP_COIN_199",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "xtpeo5",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PURCHASE_SHOP_COIN_499", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PURCHASE_SHOP_COIN_499",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "s8mvwc",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PURCHASE_SHOP_COIN_999", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PURCHASE_SHOP_COIN_999",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "w25fo4",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("GAME_EVENT_PURCHASE_SHOP_COIN_1999", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "GAME_EVENT_PURCHASE_SHOP_COIN_1999",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "7bzr9k",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("heart_beat", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "heart_beat",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "fi2uz2",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("social_login", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "social_login",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "190ljz",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("purchase", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "purchase",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "gnl0t4",
          });
          DragonU3DSDK.Network.BI.BIManager.Instance.AddThirdPartyTrackingConfig("marketing_purchase_probability_most_likely", new DragonU3DSDK.Network.BI.ThirdPartyTrackingConfig
          {
              eventName = "marketing_purchase_probability_most_likely",
              enableAdjust = true,
              enableFirebase = true,
              adjustEventToken = "9mfts4",
          });
    }
    #endregion

  }
  #region Messages
  public sealed partial class BiEventFortuneX : pb::IMessage<BiEventFortuneX> {
    private static readonly pb::MessageParser<BiEventFortuneX> _parser = new pb::MessageParser<BiEventFortuneX>(() => new BiEventFortuneX());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BiEventFortuneX> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DragonU3DSDK.Network.API.Protocol.FortuneXBiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiEventFortuneX() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiEventFortuneX(BiEventFortuneX other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      switch (other.PayloadCase) {
        case PayloadOneofCase.GameEvent:
          GameEvent = other.GameEvent.Clone();
          break;
        case PayloadOneofCase.SpinAction:
          SpinAction = other.SpinAction.Clone();
          break;
        case PayloadOneofCase.SpinResult:
          SpinResult = other.SpinResult.Clone();
          break;
        case PayloadOneofCase.ItemChange:
          ItemChange = other.ItemChange.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiEventFortuneX Clone() {
      return new BiEventFortuneX(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Common common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "game_event" field.</summary>
    public const int GameEventFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.GameEvent GameEvent {
      get { return payloadCase_ == PayloadOneofCase.GameEvent ? (global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.GameEvent) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameEvent;
      }
    }

    /// <summary>Field number for the "spin_action" field.</summary>
    public const int SpinActionFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinAction SpinAction {
      get { return payloadCase_ == PayloadOneofCase.SpinAction ? (global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinAction) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpinAction;
      }
    }

    /// <summary>Field number for the "spin_result" field.</summary>
    public const int SpinResultFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinResult SpinResult {
      get { return payloadCase_ == PayloadOneofCase.SpinResult ? (global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinResult) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpinResult;
      }
    }

    /// <summary>Field number for the "item_change" field.</summary>
    public const int ItemChangeFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.ItemChange ItemChange {
      get { return payloadCase_ == PayloadOneofCase.ItemChange ? (global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.ItemChange) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.ItemChange;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      GameEvent = 11,
      SpinAction = 12,
      SpinResult = 13,
      ItemChange = 14,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BiEventFortuneX);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BiEventFortuneX other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(GameEvent, other.GameEvent)) return false;
      if (!object.Equals(SpinAction, other.SpinAction)) return false;
      if (!object.Equals(SpinResult, other.SpinResult)) return false;
      if (!object.Equals(ItemChange, other.ItemChange)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.GameEvent) hash ^= GameEvent.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.SpinAction) hash ^= SpinAction.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.SpinResult) hash ^= SpinResult.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.ItemChange) hash ^= ItemChange.GetHashCode();
      hash ^= (int) payloadCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
#if UNITY_EDITOR
      return pb::JsonFormatter.ToDiagnosticString(this);
#else
return "pb::JsonFormatter.ToDiagnosticString not supported on Native Platform";
#endif
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (payloadCase_ == PayloadOneofCase.GameEvent) {
        output.WriteRawTag(90);
        output.WriteMessage(GameEvent);
      }
      if (payloadCase_ == PayloadOneofCase.SpinAction) {
        output.WriteRawTag(98);
        output.WriteMessage(SpinAction);
      }
      if (payloadCase_ == PayloadOneofCase.SpinResult) {
        output.WriteRawTag(106);
        output.WriteMessage(SpinResult);
      }
      if (payloadCase_ == PayloadOneofCase.ItemChange) {
        output.WriteRawTag(114);
        output.WriteMessage(ItemChange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (payloadCase_ == PayloadOneofCase.GameEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameEvent);
      }
      if (payloadCase_ == PayloadOneofCase.SpinAction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpinAction);
      }
      if (payloadCase_ == PayloadOneofCase.SpinResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpinResult);
      }
      if (payloadCase_ == PayloadOneofCase.ItemChange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemChange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BiEventFortuneX other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Common();
        }
        Common.MergeFrom(other.Common);
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.GameEvent:
          if (GameEvent == null) {
            GameEvent = new global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.GameEvent();
          }
          GameEvent.MergeFrom(other.GameEvent);
          break;
        case PayloadOneofCase.SpinAction:
          if (SpinAction == null) {
            SpinAction = new global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinAction();
          }
          SpinAction.MergeFrom(other.SpinAction);
          break;
        case PayloadOneofCase.SpinResult:
          if (SpinResult == null) {
            SpinResult = new global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinResult();
          }
          SpinResult.MergeFrom(other.SpinResult);
          break;
        case PayloadOneofCase.ItemChange:
          if (ItemChange == null) {
            ItemChange = new global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.ItemChange();
          }
          ItemChange.MergeFrom(other.ItemChange);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Common();
            }
            input.ReadMessage(Common);
            break;
          }
          case 90: {
            global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.GameEvent subBuilder = new global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.GameEvent();
            if (payloadCase_ == PayloadOneofCase.GameEvent) {
              subBuilder.MergeFrom(GameEvent);
            }
            input.ReadMessage(subBuilder);
            GameEvent = subBuilder;
            break;
          }
          case 98: {
            global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinAction subBuilder = new global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinAction();
            if (payloadCase_ == PayloadOneofCase.SpinAction) {
              subBuilder.MergeFrom(SpinAction);
            }
            input.ReadMessage(subBuilder);
            SpinAction = subBuilder;
            break;
          }
          case 106: {
            global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinResult subBuilder = new global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinResult();
            if (payloadCase_ == PayloadOneofCase.SpinResult) {
              subBuilder.MergeFrom(SpinResult);
            }
            input.ReadMessage(subBuilder);
            SpinResult = subBuilder;
            break;
          }
          case 114: {
            global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.ItemChange subBuilder = new global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.ItemChange();
            if (payloadCase_ == PayloadOneofCase.ItemChange) {
              subBuilder.MergeFrom(ItemChange);
            }
            input.ReadMessage(subBuilder);
            ItemChange = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BiEventFortuneX message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum GameEventType {
        /// <summary>
        /// 占位，无含义
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PLACEHOLDER")] GameEventPlaceholder = 0,
        /// <summary>
        /// 漏斗：启动游戏，成功后发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_LAUNCH_APP")] GameEventLaunchApp = 1,
        /// <summary>
        /// 漏斗：初始化资源下载插件成功，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_INIT_ADDRESSABLE_SUCCESS")] GameEventInitAddressableSuccess = 2,
        /// <summary>
        /// 漏斗：下载热更代码成功，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_DOWNLOAD_CODE")] GameEventDownloadCode = 3,
        /// <summary>
        /// 漏斗：下载loading资源成功，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_START_LOAD_LOADING")] GameEventStartLoadLoading = 4,
        /// <summary>
        /// 漏斗：进入loading开始下载核心资源，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_ENTER_LOADING_SCENE")] GameEventEnterLoadingScene = 5,
        /// <summary>
        /// 漏斗：下载资源成功，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_DOWNLOAD_RESOURCE")] GameEventDownloadResource = 6,
        /// <summary>
        /// 漏斗：进入登录页面，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_ENTER_LOGIN_SCREEN")] GameEventEnterLoginScreen = 7,
        /// <summary>
        /// 漏斗：用户登录，发送日志；extras记录login_type（Guest、Facebook、AppleId）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_USER_LOGIN")] GameEventUserLogin = 8,
        /// <summary>
        /// 漏斗：弹出新手引导界面-给玩家初始资金,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_GUIDE_POP_WELCOME")] GameEventGuidePopWelcome = 9,
        /// <summary>
        /// 漏斗：点击新手引导界面收到初始资金,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_GUIDE_COLLECT_WELCOME")] GameEventGuideCollectWelcome = 10,
        /// <summary>
        /// 漏斗：弹出新手引导界面-点击第一个机器,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_GUIDE_POP_FIRST_MACHINE")] GameEventGuidePopFirstMachine = 11,
        /// <summary>
        /// 漏斗：点击新手引导界面-第一个机器,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_GUIDE_TAP_FIRST_MACHINE")] GameEventGuideTapFirstMachine = 12,
        /// <summary>
        /// 漏斗：弹出新手引导1-点击Spin按钮,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_GUIDE_POP_SPIN_1")] GameEventGuidePopSpin1 = 13,
        /// <summary>
        /// 漏斗：点击新手引导1-第一次点击Spin按钮,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_GUIDE_TAP_SPIN_1")] GameEventGuideTapSpin1 = 14,
        /// <summary>
        /// 漏斗：完成新手引导1-点击3次SPIN ,发送日志; 
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_GUIDE_COMPLETE_1")] GameEventGuideComplete1 = 15,
        /// <summary>
        /// 漏斗：弹出新手引导2-到达指定等级3,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_GUIDE_POP_REACH_LEVEL_2")] GameEventGuidePopReachLevel2 = 16,
        /// <summary>
        /// 漏斗：完成新手引导2-到达指定等级3,发送日志; 
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_GUIDE_COMPLETE_REACH_LEVEL_2")] GameEventGuideCompleteReachLevel2 = 17,
        /// <summary>
        /// 漏斗：弹出新手引导3-解锁新的模块Quest,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_GUIDE_POP_UNLOCK_QUEST_3")] GameEventGuidePopUnlockQuest3 = 18,
        /// <summary>
        /// 漏斗：完成新手引导3-解锁新的模块Quest，点击Let's Go,发送日志; 
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_GUIDE_COMPLETE_UNLOCK_QUEST_3")] GameEventGuideCompleteUnlockQuest3 = 19,
        /// <summary>
        /// 漏斗：从新手引导界面点击Let's Go跳转到Quest界面成功,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_GUIDE_TRANSFER_QUEST")] GameEventGuideTransferQuest = 20,
        /// <summary>
        /// 漏斗：进入新手Quest，发送日志；extras记录来源source（Guide、Advertisement、Machine、Lobby）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_ENTER")] GameEventQuestEnter = 21,
        /// <summary>
        /// 漏斗：点击新手Quest1-第一台机器,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_TAP_1")] GameEventQuestTap1 = 22,
        /// <summary>
        /// 漏斗：完成新手Quest1-第一台机器,发送日志; extras记录倒计时CountDown
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_COMPLETE_1")] GameEventQuestComplete1 = 23,
        /// <summary>
        /// 漏斗：领取新手Quest1-第一个奖励节点,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_COLLECT_1")] GameEventQuestCollect1 = 24,
        /// <summary>
        /// 漏斗：点击新手Quest2-第二台机器,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_TAP_2")] GameEventQuestTap2 = 25,
        /// <summary>
        /// 漏斗：完成新手Quest2-第二台机器,发送日志; extras记录倒计时countDown
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_COMPLETE_2")] GameEventQuestComplete2 = 26,
        /// <summary>
        /// 漏斗：领取新手Quest2-第二个奖励节点,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_COLLECT_2")] GameEventQuestCollect2 = 27,
        /// <summary>
        /// 漏斗：点击新手Quest3-第三台机器,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_TAP_3")] GameEventQuestTap3 = 28,
        /// <summary>
        /// 漏斗：完成新手Quest3-第三台机器,发送日志; extras记录倒计时countDown
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_COMPLETE_3")] GameEventQuestComplete3 = 29,
        /// <summary>
        /// 漏斗：领取新手Quest3-第三个奖励节点,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_COLLECT_3")] GameEventQuestCollect3 = 30,
        /// <summary>
        /// 漏斗：点击新手Quest4-第四台机器,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_TAP_4")] GameEventQuestTap4 = 31,
        /// <summary>
        /// 漏斗：完成新手Quest4-第四台机器,发送日志; extras记录倒计时countDown
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_COMPLETE_4")] GameEventQuestComplete4 = 32,
        /// <summary>
        /// 漏斗：领取新手Quest4-第四个奖励节点,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_COLLECT_4")] GameEventQuestCollect4 = 33,
        /// <summary>
        /// 漏斗：点击新手Quest5-第五台机器,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_TAP_5")] GameEventQuestTap5 = 34,
        /// <summary>
        /// 漏斗：完成新手Quest5-第五台机器,发送日志; extras记录倒计时countDown
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_COMPLETE_5")] GameEventQuestComplete5 = 35,
        /// <summary>
        /// 漏斗：领取新手Quest5-第五个奖励节点,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_COLLECT_5")] GameEventQuestCollect5 = 36,
        /// <summary>
        /// 漏斗：点击新手Quest6-第六台机器,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_TAP_6")] GameEventQuestTap6 = 37,
        /// <summary>
        /// 漏斗：完成新手Quest6-第六台机器,发送日志; extras记录倒计时countDown
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_COMPLETE_6")] GameEventQuestComplete6 = 38,
        /// <summary>
        /// 漏斗：领取新手Quest6-第六个奖励节点,发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_COLLECT_6")] GameEventQuestCollect6 = 39,
        /// <summary>
        /// 点击机器图标，发送日志；extras记录来源source（Advertisement、Lobby、MachineUnlock）、机器gameId
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_MACHINE_CLICK")] GameEventMachineClick = 40,
        /// <summary>
        /// 机器开始下载，发送日志（只在下载的时候加，Loading的时候不加）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_MACHINE_DOWNLOAD_START")] GameEventMachineDownloadStart = 41,
        /// <summary>
        /// 机器下载成功，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_MACHINE_DOWNLOAD_SUCCESS")] GameEventMachineDownloadSuccess = 42,
        /// <summary>
        /// 机器下载失败，发送日志；extras记录机器gameId
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_MACHINE_DOWNLOAD_FAIL")] GameEventMachineDownloadFail = 43,
        /// <summary>
        /// 升级，发送日志；extras记录升级后Level
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_LEVEL_UP")] GameEventLevelUp = 44,
        /// <summary>
        /// VIP升级，发送日志；extras记录升级原因reason（LevelUp、Purchase、MissionPassReward）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_VIP_LEVEL_UP")] GameEventVipLevelUp = 45,
        /// <summary>
        /// 弹出Rate Us弹窗时发送日志；extras记录source（Setting）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_RATE_US_POP")] GameEventRateUsPop = 46,
        /// <summary>
        /// 点击Rate 5星时发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_RATE_US_5")] GameEventRateUs5 = 47,
        /// <summary>
        /// 点击Rate 1-4星时发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_RATE_US_4")] GameEventRateUs4 = 48,
        /// <summary>
        /// Rate Us 弹窗点击关闭按钮时，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_RATE_US_CLOSE")] GameEventRateUsClose = 49,
        /// <summary>
        /// 点击绑定 FB按钮时，发送日志；extras记录source
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_BIND_FACEBOOK_BIND")] GameEventBindFacebookBind = 50,
        /// <summary>
        /// 绑定 FB 成功时发送
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_BIND_FACEBOOK_SUCCESS")] GameEventBindFacebookSuccess = 51,
        /// <summary>
        /// 绑定 FB 返回失败时发送；
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_BIND_FACEBOOK_FAIL")] GameEventBindFacebookFail = 52,
        /// <summary>
        /// 弹出Like Us弹窗时发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_LIKE_US_POP")] GameEventLikeUsPop = 53,
        /// <summary>
        /// 在Like Us弹窗点击 Like 按钮时发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_LIKE_US_LIKE")] GameEventLikeUsLike = 54,
        /// <summary>
        /// 在Like Us弹窗点击 Later 发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_LIKE_US_LATER")] GameEventLikeUsLater = 55,
        /// <summary>
        /// 在Like Us弹窗点击 关闭或者No Thanks发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_LIKE_US_CLOSE")] GameEventLikeUsClose = 56,
        /// <summary>
        /// 打开 Contact Us 页面时发送日志；extras记录来源source（Setting、RateUs（点击评论 1-4 星时打开））
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_CONTACT_US")] GameEventContactUs = 57,
        /// <summary>
        /// 打开 Setting页面时发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_SETTING_OPEN")] GameEventSettingOpen = 58,
        /// <summary>
        /// 弹出每日奖励弹窗发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_DAILY_BONUS_POP")] GameEventDailyBonusPop = 59,
        /// <summary>
        /// 每日奖励弹窗领取每日签到按钮发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_DAILY_BONUS_DAILY")] GameEventDailyBonusDaily = 60,
        /// <summary>
        /// 每日奖励弹窗领取累计签到按钮发送日志；extras记录stage（1、2、3）、累计签到天数totalLoginDay
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_DAILY_BONUS_STAGE")] GameEventDailyBonusStage = 61,
        /// <summary>
        /// 领取TimerBonus里面每小时奖励时发送日志；extras记录领取入口（1.大厅  2.timerbonus主页面  3.机台内），领取时的填充状态（0.不到25%，1.25%--50%，2.50%-75%，3.75%以上，4.100%），领取时的SPIN BUFF等级（1，2，3，4，5）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_TIMER_BONUS_HOURLY_COLLECT")] GameEventTimerBonusHourlyCollect = 62,
        /// <summary>
        /// 领取TimerBonus里面转轮奖励时发送日志；extras记录扇叶wedgeId、superWheelBoost
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_TIMER_BONUS_WHEEL_COLLECT")] GameEventTimerBonusWheelCollect = 63,
        /// <summary>
        /// 领取TimerBonus里面3层转轮奖励时发送日志；extras记录拿到的win、multiple、emerald
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_TIMER_BONUS_EXTRA_WHEEL_COLLECT")] GameEventTimerBonusExtraWheelCollect = 64,
        /// <summary>
        /// 领取TimerBonus转轮奖励后首次弹出付费转轮时发送日志；extras记录商品paymentId、price
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_TIMER_BONUS_GOLDEN_WHEEL_POP")] GameEventTimerBonusGoldenWheelPop = 65,
        /// <summary>
        /// 领取TimerBonus转轮奖励后玩家点击关闭第二次弹出付费转轮挽留界面时发送日志；extras记录商品paymentId、price
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_TIMER_BONUS_GOLDEN_WHEEL_POP_2")] GameEventTimerBonusGoldenWheelPop2 = 66,
        /// <summary>
        /// 退出付费转轮界面时发送日志；extras记录商品paymentId、price
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_TIMER_BONUS_GOLDEN_WHEEL_EXIT")] GameEventTimerBonusGoldenWheelExit = 67,
        /// <summary>
        /// 点击付费转轮付费按钮时发送日志；extras记录商品paymentId、price
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_TIMER_BONUS_GOLDEN_WHEEL_PURCHASE")] GameEventTimerBonusGoldenWheelPurchase = 68,
        /// <summary>
        /// 购买付费转轮成功时发送日志；extras记录商品paymentId、price
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_TIMER_BONUS_GOLDEN_WHEEL_PURCHASE_SUCCESS")] GameEventTimerBonusGoldenWheelPurchaseSuccess = 69,
        /// <summary>
        /// 点击并弹出每日任务界面发送日志；extras记录Normal任务完成进度normalSchedule（0、1、2、3）来源source（Lobby、Machine）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_DAILY_MISSION_POP")] GameEventDailyMissionPop = 70,
        /// <summary>
        /// 领取每日任务-1时发送日志；
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_DAILY_MISSION_NORMAL_COLLECT_1")] GameEventDailyMissionNormalCollect1 = 71,
        /// <summary>
        /// 领取每日任务-2时发送日志；
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_DAILY_MISSION_NORMAL_COLLECT_2")] GameEventDailyMissionNormalCollect2 = 72,
        /// <summary>
        /// 领取每日任务-3时发送日志；
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_DAILY_MISSION_NORMAL_COLLECT_3")] GameEventDailyMissionNormalCollect3 = 73,
        /// <summary>
        /// 领取每日任务-Honor任务时发送日志；
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_DAILY_MISSION_HONOR_COLLECT")] GameEventDailyMissionHonorCollect = 74,
        /// <summary>
        /// 领取每日任务-Stage奖励时发送日志；extras记录领取时stage剩余时间countDown、Stage阶段（1、2）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_DAILY_MISSION_STAGE_COLLECT")] GameEventDailyMissionStageCollect = 75,
        /// <summary>
        /// 点击并弹出MissionPass界面发送日志；extras记录来源source（Lobby、Machine、Advertisement）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_MISSION_PASS_POP")] GameEventMissionPassPop = 76,
        /// <summary>
        /// 领取MissionPass奖励发送日志；extras记录领取类型missionType（Free、Mission、FreeLimited、MissionLimited）、MissionPass等级missionPassLevel
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_MISSION_PASS_COLLECT")] GameEventMissionPassCollect = 77,
        /// <summary>
        /// 点击MissionPass界面CollectAll按钮发送日志；extras记录领取类型missionType（Free、Mission、Limited）及对应类型数量count、MissionPass等级missionPassLevel
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_MISSION_PASS_COLLECT_ALL")] GameEventMissionPassCollectAll = 78,
        /// <summary>
        /// 点击并弹出MissionPass购买等级界面时发送日志；extras记录MissionPass等级missionPassLevel
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_MISSION_PASS_BUY_LEVEL_POP")] GameEventMissionPassBuyLevelPop = 79,
        /// <summary>
        /// 点击MissionPass购买等级界面付费按钮时发送日志；extras记录商品paymentId、price、MissionPass等级missionPassLevel
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_MISSION_PASS_BUY_LEVEL_PURCHASE")] GameEventMissionPassBuyLevelPurchase = 80,
        /// <summary>
        /// 购买MissionPass等级成功时发送日志；extras记录商品paymentId、price、MissionPass等级missionPassLevel
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_MISSION_PASS_BUY_LEVEL_PURCHASE_SUCCESS")] GameEventMissionPassBuyLevelPurchaseSuccess = 81,
        /// <summary>
        /// 点击并弹出MissionPass解锁MissionPass权限界面时发送日志；extras记录MissionPass等级missionPassLevel
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_MISSION_PASS_UNLOCK_POP")] GameEventMissionPassUnlockPop = 82,
        /// <summary>
        /// 点击MissionPass解锁界面付费按钮时发送日志；extras记录商品paymentId、price、当前余额、MissionPass等级missionPassLevel
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_MISSION_PASS_UNLOCK_PURCHASE")] GameEventMissionPassUnlockPurchase = 83,
        /// <summary>
        /// 购买MissionPass解锁成功时发送日志；extras记录商品paymentId、price、MissionPass等级missionPassLevel
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_MISSION_PASS_UNLOCK_PURCHASE_SUCCESS")] GameEventMissionPassUnlockPurchaseSuccess = 84,
        /// <summary>
        /// 打开商店界面时发送日志；extras记录来源source（货币栏、Banner、BUY、余额不足）、scene（Lobby、gameId）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_STORE_OPEN")] GameEventStoreOpen = 85,
        /// <summary>
        /// 点击并领取StoreBonus时发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_STORE_BONUS_CLICK")] GameEventStoreBonusClick = 86,
        /// <summary>
        /// 点击GiftBox说明时发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_STORE_GIFT_BOX_CLICK")] GameEventStoreGiftBoxClick = 87,
        /// <summary>
        /// 领取GiftBox奖励时发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_STORE_GIFT_BOX_COLLECT")] GameEventStoreGiftBoxCollect = 88,
        /// <summary>
        /// 点击Store付费按钮时发送日志；extras记录商品paymentId、price、productType
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_STORE_PURCHASE")] GameEventStorePurchase = 89,
        /// <summary>
        /// 购买Store成功时发送日志；extras记录商品paymentId、price、productType
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_STORE_PURCHASE_SUCCESS")] GameEventStorePurchaseSuccess = 90,
        /// <summary>
        /// 购买失败时发送日志；extras记录失败原因failedReason、product_id
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PURCHASE_FAIL")] GameEventPurchaseFail = 91,
        /// <summary>
        /// 打开PiggyBank界面时发送日志；extras记录来源scene（Lobby、机器gameId、）source(Advertisement, TopPanel)、是否填满Piggy（isFull）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PIGGY_BANK_OPEN")] GameEventPiggyBankOpen = 92,
        /// <summary>
        /// 点击PiggyBank付费按钮时发送日志；extras记录商品paymentId、price
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PIGGY_BANK_PURCHASE")] GameEventPiggyBankPurchase = 93,
        /// <summary>
        /// 购买PiggyBank成功时发送日志；extras记录商品paymentId、price、是否首次砸猪isFirst，extra记录当前存储百分比
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PIGGY_BANK_PURCHASE_SUCCESS")] GameEventPiggyBankPurchaseSuccess = 94,
        /// <summary>
        /// 弹出SpecialOffer界面时发送日志；extras记录来源source（Advertisement、Deal、Lobby）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_SPECIAL_OFFER_POP")] GameEventSpecialOfferPop = 95,
        /// <summary>
        /// 点击SpecialOffer付费按钮时发送日志；extras记录商品paymentId、price
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_SPECIAL_OFFER_PURCHASE")] GameEventSpecialOfferPurchase = 96,
        /// <summary>
        /// 购买SpecialOffer成功时发送日志；extras记录商品paymentId、price
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_SPECIAL_OFFER_PURCHASE_SUCCESS")] GameEventSpecialOfferPurchaseSuccess = 97,
        /// <summary>
        /// 点开Inbox时发送日志；extras记录Inbox包含的信息条数messageCount
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_INBOX_OPEN")] GameEventInboxOpen = 98,
        /// <summary>
        /// 领取Inbox内容时发送日志；extras记录该条内容的信息type
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_INBOX_COLLECT")] GameEventInboxCollect = 99,
        /// <summary>
        /// 弹出广告时发送日志；extras记录广告性质adsType（interstitialVideo、rewardVideo）、placeId、userGroup（分层）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_ADS_POP")] GameEventAdsPop = 100,
        /// <summary>
        /// 领取广告奖励时发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_ADS_COLLECT")] GameEventAdsCollect = 101,
        /// <summary>
        /// 点击TermofService时发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_TERM_SERVICE_CLICK")] GameEventTermServiceClick = 102,
        /// <summary>
        /// 点击PrivacyPolicy时发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PRIVACY_CLICK")] GameEventPrivacyClick = 103,
        /// <summary>
        /// 点击金币优惠券活动的开屏广告的REDEEM
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COUPON_ACTIVITY_COINS_ADENTER")] GameEventCouponActivityCoinsAdenter = 104,
        /// <summary>
        /// 点击金币优惠券活动的开屏广告的关闭按钮
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COUPON_ACTIVITY_COINS_ADCLOSE")] GameEventCouponActivityCoinsAdclose = 105,
        /// <summary>
        /// 点击邮箱中的金币优惠券的REDEEM
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COUPON_ACTIVITY_COINS_REDEEM")] GameEventCouponActivityCoinsRedeem = 106,
        /// <summary>
        /// 点击金币优惠券活动的轮播图广告的REDEEM
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COUPON_ACTIVITY_COINS_CAROUSELENTER")] GameEventCouponActivityCoinsCarouselenter = 107,
        /// <summary>
        /// 漏斗：进入赛季Quest，发送日志；extras记录来源source（Guide、Advertisement、Lobby），赛季ID
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_SEASON_ENTER")] GameEventQuestSeasonEnter = 108,
        /// <summary>
        /// 漏斗：点击进入排行榜，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_SEASON_RANKENTER")] GameEventQuestSeasonRankenter = 109,
        /// <summary>
        /// 漏斗：点击查看排行榜奖励页签，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_SEASON_RANKAWARD")] GameEventQuestSeasonRankaward = 110,
        /// <summary>
        /// 漏斗：点击查看加速齿轮详情，发送日志；extras记录来源（Lobby, Machine ID）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_SEASON_SPEEDUP_CHECK")] GameEventQuestSeasonSpeedupCheck = 111,
        /// <summary>
        /// 漏斗：购买加速齿轮时，发送日志；extras记录来源（Lobby, Machine ID），玩家购买时的剩余钻石数
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_SEASON_SPEEDUP_BUY")] GameEventQuestSeasonSpeedupBuy = 112,
        /// <summary>
        /// 漏斗：主动点击查看QUEST PASS详情，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_SEASON_QUESTPASS_CHECK")] GameEventQuestSeasonQuestpassCheck = 113,
        /// <summary>
        /// 漏斗：购买QUEST PASS时，发送日志；extra 记录当前Machine ID
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_SEASON_QUESTPASS_BUY")] GameEventQuestSeasonQuestpassBuy = 114,
        /// <summary>
        /// 漏斗：点击赛季Quest，进入机器，发送日志，extras 记录倒计时CountDown，机台ID，赛季ID
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_SEASON_TAP")] GameEventQuestSeasonTap = 115,
        /// <summary>
        /// 漏斗：完成赛季Quest，完成机器，发送日志，extras记录倒计时CountDown，机台ID，赛季ID
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_SEASON_COMPLETE")] GameEventQuestSeasonComplete = 116,
        /// <summary>
        /// 漏斗：领取赛季Quest，领取机器节点，发送日志，extras记录倒计时CountDown，机台ID，赛季ID
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_SEASON_COLLECT")] GameEventQuestSeasonCollect = 117,
        /// <summary>
        /// 漏斗：选择PHASE难度时，发送日志，extras 记录玩家选择的难度以及Phase的编号（PHASE编号按照123456789...顺延）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_QUEST_SEASON_SELECT")] GameEventQuestSeasonSelect = 118,
        /// <summary>
        /// 达到Level5
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV5")] GameEventPassLv5 = 119,
        /// <summary>
        /// 达到Level9
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV9")] GameEventPassLv9 = 120,
        /// <summary>
        /// 达到Level10
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV10")] GameEventPassLv10 = 121,
        /// <summary>
        /// 达到Level15
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV15")] GameEventPassLv15 = 122,
        /// <summary>
        /// 达到Level20
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV20")] GameEventPassLv20 = 123,
        /// <summary>
        /// 达到Level25
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV25")] GameEventPassLv25 = 124,
        /// <summary>
        /// 达到Level30
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV30")] GameEventPassLv30 = 125,
        /// <summary>
        /// 达到Level40
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV40")] GameEventPassLv40 = 126,
        /// <summary>
        /// 达到Level50
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV50")] GameEventPassLv50 = 127,
        /// <summary>
        /// 达到Level60
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV60")] GameEventPassLv60 = 128,
        /// <summary>
        /// 达到Level70
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV70")] GameEventPassLv70 = 129,
        /// <summary>
        /// 返回大厅
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_BACK_LOBBY")] GameEventBackLobby = 130,
        /// <summary>
        /// 点击并弹出砸蛋界面发送日志；宣传页1，其他2
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_CRAZE_SMASH_POP")] GameEventCrazeSmashPop = 151,
        /// <summary>
        /// 获得锤子时发送日志；extras记录锤子类型（1.银锤子， 2.金锤子）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_CRAZE_SMASH_COLLECT")] GameEventCrazeSmashCollect = 152,
        /// <summary>
        /// 使用锤子时发送日志；extras记录时间点，等级，剩余锤子，获得道具（1. 空，2. EXTRA，3.FINAL）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_CRAZE_SMASH_WIN")] GameEventCrazeSmashWin = 153,
        /// <summary>
        /// 点击购买锤子界面时发送日志；extras记录点击入口（1.1个银锤子，2. 多个银锤子，3.1个金锤子，4.多个金锤子）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_CRAZE_SMASH_BUY_ENTER")] GameEventCrazeSmashBuyEnter = 154,
        /// <summary>
        /// 购买锤子时发送日志；extras记录锤子类型（1.银锤子， 2.金锤子），记录购买数量
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_CRAZE_SMASH_BUY")] GameEventCrazeSmashBuy = 155,
        /// <summary>
        /// 达到level23
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV23")] GameEventPassLv23 = 156,
        /// <summary>
        /// 达到level65
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV65")] GameEventPassLv65 = 157,
        /// <summary>
        /// 达到level75
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV75")] GameEventPassLv75 = 158,
        /// <summary>
        /// 达到level80
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV80")] GameEventPassLv80 = 159,
        /// <summary>
        /// 达到level90
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV90")] GameEventPassLv90 = 160,
        /// <summary>
        /// 达到level95
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV95")] GameEventPassLv95 = 161,
        /// <summary>
        /// 达到level100
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV100")] GameEventPassLv100 = 162,
        /// <summary>
        /// 达到level105
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV105")] GameEventPassLv105 = 163,
        /// <summary>
        /// 达到level110
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV110")] GameEventPassLv110 = 164,
        /// <summary>
        /// 达到level120
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV120")] GameEventPassLv120 = 165,
        /// <summary>
        /// 达到level130
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV130")] GameEventPassLv130 = 166,
        /// <summary>
        /// 达到level150
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV150")] GameEventPassLv150 = 167,
        /// <summary>
        /// 一次性付费1.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PURCHASE_ONETIME_199")] GameEventPurchaseOnetime199 = 168,
        /// <summary>
        /// 一次性付费4.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PURCHASE_ONETIME_499")] GameEventPurchaseOnetime499 = 169,
        /// <summary>
        /// 一次性付费9.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PURCHASE_ONETIME_999")] GameEventPurchaseOnetime999 = 170,
        /// <summary>
        /// 一次性付费19.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PURCHASE_ONETIME_1999")] GameEventPurchaseOnetime1999 = 171,
        /// <summary>
        /// 一次性付费49.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PURCHASE_ONETIME_4999")] GameEventPurchaseOnetime4999 = 172,
        /// <summary>
        /// 看完ad rush的10个广告
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COMPLETE_ADRUSH_10ADS")] GameEventCompleteAdrush10Ads = 173,
        /// <summary>
        /// 达到level32
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV32")] GameEventPassLv32 = 174,
        /// <summary>
        /// 达到level35
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV35")] GameEventPassLv35 = 175,
        /// <summary>
        /// 达到level160
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV160")] GameEventPassLv160 = 176,
        /// <summary>
        /// 达到level180
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV180")] GameEventPassLv180 = 177,
        /// <summary>
        /// 达到Level 200
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV200")] GameEventPassLv200 = 178,
        /// <summary>
        /// 达到Level 220
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV220")] GameEventPassLv220 = 179,
        /// <summary>
        /// 达到Level 240
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV240")] GameEventPassLv240 = 180,
        /// <summary>
        /// 达到Level 260
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV260")] GameEventPassLv260 = 181,
        /// <summary>
        /// 达到Level 280
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV280")] GameEventPassLv280 = 182,
        /// <summary>
        /// 达到Level 320
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV320")] GameEventPassLv320 = 183,
        /// <summary>
        /// 达到Level 350
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV350")] GameEventPassLv350 = 184,
        /// <summary>
        /// 达到Level 380
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV380")] GameEventPassLv380 = 185,
        /// <summary>
        /// 达到Level 400
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV400")] GameEventPassLv400 = 186,
        /// <summary>
        /// 达到Level 430
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV430")] GameEventPassLv430 = 187,
        /// <summary>
        /// 达到Level 450
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV450")] GameEventPassLv450 = 188,
        /// <summary>
        /// 达到Level 470
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV470")] GameEventPassLv470 = 189,
        /// <summary>
        /// 达到Level 500
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV500")] GameEventPassLv500 = 190,
        /// <summary>
        /// 达到Level 520
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV520")] GameEventPassLv520 = 191,
        /// <summary>
        /// 达到Level 550
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV550")] GameEventPassLv550 = 192,
        /// <summary>
        /// 达到Level 570
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV570")] GameEventPassLv570 = 193,
        /// <summary>
        /// 达到Level 600
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PASS_LV600")] GameEventPassLv600 = 194,
        /// <summary>
        /// RV广告看完了 extra（ duration 观看时长，placeId,广告位）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_RV_WATCHED_FINISHED")] GameEventRvWatchedFinished = 195,
        /// <summary>
        /// 进入收集卡牌活动主界面时，发送日志，extras记录来源和打开次数（1. 玩家点击全屏广告，2. 点击大厅ICON）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_ENTER")] GameEventCollectionEnter = 201,
        /// <summary>
        /// 收集卡牌主界面中，点击卡册，发送日志，extras记录点击了哪个卡册（1～12根据ID）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_ALBUM_ENTER")] GameEventCollectionAlbumEnter = 202,
        /// <summary>
        /// 卡册界面中玩家操作，发送日志，extras记录点击次数（1.点击未获得卡片，2.点击以获得卡片，3.点击左右切换）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_ALBUM_CARDCHECK")] GameEventCollectionAlbumCardcheck = 203,
        /// <summary>
        /// 收集卡牌主界面中点击LuckChallenge时，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_LUCKY_CHALLENGE_ENTER")] GameEventCollectionLuckyChallengeEnter = 204,
        /// <summary>
        /// 收集卡牌主界面中点击LuckSpin时，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_LUCKY_SPIN_ENTER")] GameEventCollectionLuckySpinEnter = 205,
        /// <summary>
        /// LuckSpin中点击按钮时，发送日志，extras记录点击按钮次数（1.SPIN，2.SPIN ALL ,3.SPIN ALL二级弹窗CONFIRM，4.SPIN ALL二级弹窗"X"，5.CHECK PRIZE,6"X按钮"）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_LUCKY_SPIN_START")] GameEventCollectionLuckySpinStart = 206,
        /// <summary>
        /// LuckSpin奖励弹窗出现时，发送日志，extras记录按钮次数（1.LATER，2.COLLECT NOW）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_LUCKY_SPIN_RESULT")] GameEventCollectionLuckySpinResult = 207,
        /// <summary>
        /// 收集卡牌主界面中点击Fortune Exchange时，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_FORTUNE_EXCHANGE_ENTER")] GameEventCollectionFortuneExchangeEnter = 208,
        /// <summary>
        /// Fortune Exchange游戏中，发送日志，extras记录按钮次数（1.SELECT FOR ME, 2.SPIN）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_FORTUNE_EXCHANGE_START")] GameEventCollectionFortuneExchangeStart = 209,
        /// <summary>
        /// 点击Fortune Exchange 帮助按钮时发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_FORTUNE_EXCHANGE_RULE")] GameEventCollectionFortuneExchangeRule = 210,
        /// <summary>
        /// 进入4选1游戏后发送日志，extras记录来源和打开次数（1.卡册主界面ICON，2.点击老虎机中的ICON)
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_MAGIC_HAT_ENTER")] GameEventCollectionMagicHatEnter = 211,
        /// <summary>
        /// 进入4选1游戏在主界面点击按钮时，发送日记，extras记录来源和打开次数（1.点击PLAY，2.点击“X”退出）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_MAGIC_HAT_START")] GameEventCollectionMagicHatStart = 212,
        /// <summary>
        /// 4选1游戏过程中点击TAKE &amp; LEAVE按钮时，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_MAGIC_HAT_TAKE")] GameEventCollectionMagicHatTake = 213,
        /// <summary>
        /// 4选1游戏过程死亡弹窗出现点击按钮，发送日志，extras记录来源和打开次数（1.点击广告按钮，2.花宝石复活，3.GIVE UP）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_MAGIC_HAT_OVER")] GameEventCollectionMagicHatOver = 214,
        /// <summary>
        /// 4选1游戏过程中玩到15关出现弹窗，点击COLLECT按钮时发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_COLLECTION_MAGIC_HAT_COMPLETE")] GameEventCollectionMagicHatComplete = 215,
        /// <summary>
        /// 小猪机台礼包弹出时发送日子，extras记录弹出途径（1.自动弹出，2.玩家点击）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PIGGY_BONUS_GIFTBOX_POPUP")] GameEventPiggyBonusGiftboxPopup = 230,
        /// <summary>
        /// 小猪机台礼包点击购买时，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PIGGY_BONUS_GIFTBOX_BUY")] GameEventPiggyBonusGiftboxBuy = 231,
        /// <summary>
        /// 小猪机台礼包购买成功时，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PIGGY_BONUS_GIFTBOX_BUY_SUCCESSFUL")] GameEventPiggyBonusGiftboxBuySuccessful = 232,
        /// <summary>
        /// 新手quest加速电池购买页面弹出时，发送日志，extra记录弹出途径（1.自动弹出，2.玩家点击）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_NEWBIEQUEST_BOOST_POPUP")] GameEventNewbiequestBoostPopup = 233,
        /// <summary>
        /// 新手quest加速电池广告页面弹出时，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_NEWBIEQUEST_BOOST_AD_POPUP")] GameEventNewbiequestBoostAdPopup = 234,
        /// <summary>
        /// 新手quest加速电池购买页面弹出，点击购买时，发送日志，extra记录购买哪个档次（1.2.3）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_NEWBIEQUEST_BOOST_BUY")] GameEventNewbiequestBoostBuy = 235,
        /// <summary>
        /// 新手quest加速电池购买页面弹出，购买成功时，发送日志，extra记录购买哪个档次（1.2.3）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_NEWBIEQUEST_BOOST_BUY_SUCCESSFUL")] GameEventNewbiequestBoostBuySuccessful = 236,
        /// <summary>
        /// 新手quest加速电池广告页面弹出，点击观看时，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_NEWBIEQUEST_BOOST_AD_WATCH")] GameEventNewbiequestBoostAdWatch = 237,
        /// <summary>
        /// 点击打开角色头像时，发送日志
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_AVATAR_OPEN")] GameEventAvatarOpen = 238,
        /// <summary>
        /// 点击更换角色头像时，发送日志，extra 记录头像id
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_AVATAR_CHANGE")] GameEventAvatarChange = 239,
        /// <summary>
        /// 游戏启动性能追踪，extras里记录各个时间点的时间戳，value取毫秒的时间戳整数，key取如下值，包括但不限于：;启动: launch;拉取灰度开始: fetch_version_start;拉取灰度成功: fetch_version_success;拉取灰度失败: fetch_version_failure;下载热更代码开始: fetch_il_code_start;下载热更代码成功: fetch_il_code_success;下载热更代码失败: fetch_il_code_failure;短连接登录开始: login_start;短连接登录成功: login_success;短连接登录失败: login_failure;长链接开始: socket_io_connect_start;长链接成功: socket_io_connect_success;长链接失败: socket_io_connenct_failure;大厅协议开始: lobby_protocol_start;大厅协议成功: lobby_protocol_success;大厅协议失败: lobby_protocol_failure;进入大厅: enter_lobby
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_LAUNCH_METRICS")] GameEventLaunchMetrics = 240,
        /// <summary>
        /// 进入情人节活动主页时，发送日志，extras记录来源和打开次数（1. 玩家点击全屏广告，2. 玩家点击轮播广告，3. 玩家完成任务主动弹出）
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_VALENTINESDAY_ENTER")] GameEventValentinesdayEnter = 1001,
        /// <summary>
        /// 情人节活动点亮新的地图进度时，发送日志，extras 记录前进步数和获取来源（1. daily mission, 2. honor mission)
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_VALENTINESDAY_PROGRESS")] GameEventValentinesdayProgress = 1002,
        /// <summary>
        /// 情人节活动，领取奖励时，发送日志，extras记录领取奖励的ID
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_VALENTINESDAY_COLLECT")] GameEventValentinesdayCollect = 1003,
        /// <summary>
        /// 情人节活动，解锁PASS时，发送日志，extras记录来源（1.情人节大厅界面，2.领奖界面），记录解锁时玩家达到的情人节奖励点的位置
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_VALENTINESDAY_PASSUNLOCK")] GameEventValentinesdayPassunlock = 1004,
        /// <summary>
        /// 购买商城1.99商品
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PURCHASE_SHOP_COIN_199")] GameEventPurchaseShopCoin199 = 1005,
        /// <summary>
        /// 购买商城4.99商品
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PURCHASE_SHOP_COIN_499")] GameEventPurchaseShopCoin499 = 1006,
        /// <summary>
        /// 购买商城9.99商品
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PURCHASE_SHOP_COIN_999")] GameEventPurchaseShopCoin999 = 1007,
        /// <summary>
        /// 购买商城19.99商品
        /// </summary>
        [pbr::OriginalName("GAME_EVENT_PURCHASE_SHOP_COIN_1999")] GameEventPurchaseShopCoin1999 = 1008,
      }

      public enum SpinActionType {
        /// <summary>
        /// 占位
        /// </summary>
        [pbr::OriginalName("SPIN_ACTION_TYPE_NONE")] None = 0,
        /// <summary>
        /// SPIN；extras记录游戏状态（如BaseGame、Feature）
        /// </summary>
        [pbr::OriginalName("SPIN_ACTION_TYPE_SPIN")] Spin = 1,
        /// <summary>
        /// 提前停止Spin
        /// </summary>
        [pbr::OriginalName("SPIN_ACTION_TYPE_STOP")] Stop = 2,
        /// <summary>
        /// 没有钱了
        /// </summary>
        [pbr::OriginalName("SPIN_ACTION_TYPE_NO_CHIPS")] NoChips = 3,
        /// <summary>
        /// 机器Feature；extras记录feature_type（如FreeGame、Link、Map）、其余信息和前端同学协商
        /// </summary>
        [pbr::OriginalName("SPIN_ACTION_TYPE_FEATURE_TRIGGER")] FeatureTrigger = 4,
        /// <summary>
        /// 
        /// </summary>
        [pbr::OriginalName("SPIN_ACTION_TYPE_FEATURE_PLAY")] FeaturePlay = 5,
        /// <summary>
        /// 机器Feature结束；extras记录的游戏状态和前端同学协商
        /// </summary>
        [pbr::OriginalName("SPIN_ACTION_TYPE_FEATURE_END")] FeatureEnd = 6,
        /// <summary>
        /// extras中记录：;jackpotId: jackpotId;jackpotLevel: "mini", "minor", "major", "grand";jackpotWin: jackpot对应的赢钱
        /// </summary>
        [pbr::OriginalName("SPIN_ACTION_TYPE_JACKPOT")] Jackpot = 7,
        /// <summary>
        /// 切换Bet
        /// </summary>
        [pbr::OriginalName("SPIN_ACTION_TYPE_CHANGE_BET")] ChangeBet = 8,
        /// <summary>
        /// 查看PayTable
        /// </summary>
        [pbr::OriginalName("SPIN_ACTION_TYPE_OPEN_PAYTABLE")] OpenPaytable = 9,
      }

      public enum Item {
        /// <summary>
        /// 占位
        /// </summary>
        [pbr::OriginalName("ITEM_NONE")] None = 0,
        /// <summary>
        /// 金币
        /// </summary>
        [pbr::OriginalName("ITEM_COIN")] Coin = 1,
        /// <summary>
        /// 经验
        /// </summary>
        [pbr::OriginalName("ITEM_EXP")] Exp = 2,
        /// <summary>
        /// VIP点数
        /// </summary>
        [pbr::OriginalName("ITEM_VIP_POINTS")] VipPoints = 3,
        /// <summary>
        /// 绿宝石
        /// </summary>
        [pbr::OriginalName("ITEM_EMERALD")] Emerald = 4,
        /// <summary>
        /// GiftBox
        /// </summary>
        [pbr::OriginalName("ITEM_GIFT_BOX")] GiftBox = 5,
        /// <summary>
        /// 升级奖励Boost
        /// </summary>
        [pbr::OriginalName("ITEM_LEVEL_UP_BURST")] LevelUpBurst = 6,
        /// <summary>
        /// 付费转轮奖励Boost
        /// </summary>
        [pbr::OriginalName("ITEM_SUPER_WHEEL")] SuperWheel = 7,
        /// <summary>
        /// 双倍经验Boost
        /// </summary>
        [pbr::OriginalName("ITEM_DOUBLE_XP")] DoubleXp = 8,
        /// <summary>
        /// DailyMission点数
        /// </summary>
        [pbr::OriginalName("ITEM_MISSION_POINTS")] MissionPoints = 9,
        /// <summary>
        /// MissionPass点数
        /// </summary>
        [pbr::OriginalName("ITEM_MISSION_STARS")] MissionStars = 10,
      }

      public enum ItemChangeReason {
        /// <summary>
        /// 占位
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_NONE")] None = 0,
        /// <summary>
        /// 获得：创建账号获得发送日志
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_CREATE_PROFILE")] CreateProfile = 1,
        /// <summary>
        /// 获得：完成新手引导拿到金币、绿宝石；extras记录新手引导任务
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_GUIDE")] Guide = 2,
        /// <summary>
        /// 获得：完成新手Quest拿到金币、绿宝石、Boost；extras记录新手Quest关卡进度
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_QUEST")] Quest = 3,
        /// <summary>
        /// 获得：绑定Facebook拿到金币
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_BIND_FACEBOOK")] BindFacebook = 4,
        /// <summary>
        /// 获得：like粉丝页奖励拿到金币
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_LIKE_US")] LikeUs = 5,
        /// <summary>
        /// 获得：支付获得金币、绿宝石、VIP点数、GiftBox、Boost；extras 记录product_id、玩家余额、机器id、是否使用了Coupon
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_IAP")] Iap = 6,
        /// <summary>
        /// 获得：领取商店免费金币拿到金币
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_STORE_BONUS")] StoreBonus = 7,
        /// <summary>
        /// 获得：领取商店GiftBox拿到金币
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_STORE_GIFT_BOX")] StoreGiftBox = 8,
        /// <summary>
        /// 获得：Spin拿到金币、经验；extras记录机器id，如果在feature中则记录Freespin、Respin、SmallGame
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_SPIN")] Spin = 9,
        /// <summary>
        /// 获得：升级拿到金币、VIP点数
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_LEVEL_UP")] LevelUp = 10,
        /// <summary>
        /// 获得：VIP升级拿到金币及消耗经验；extras记录升级后的VIP等级
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_VIP_LEVEL_UP")] VipLevelUp = 11,
        /// <summary>
        /// 获得：领取DailyBonus拿到金币、绿宝石、Boost；extras记录第几天奖励、累计签到天数
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_DAILY_BONUS_DAILY")] DailyBonusDaily = 12,
        /// <summary>
        /// 获得：累计签到一定天数领取拿到金币、绿宝石、Boost；extras记录Stage阶段（1、2、3）、累计签到天数
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_DAILY_BONUS_STAGE")] DailyBonusStage = 13,
        /// <summary>
        /// 获得：领取TimerBonus每小时奖励拿到金币
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_TIMER_BONUS_HOURLY")] TimerBonusHourly = 14,
        /// <summary>
        /// 获得：领取TimerBonus转盘奖励拿到金币；extras记录拿到的扇叶id、SuperWheelBoost(记0、1)
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_TIMER_BONUS_WHEEL")] TimerBonusWheel = 15,
        /// <summary>
        /// 获得：领取TimerBonus3层转盘奖励拿到金币、绿宝石
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_TIMER_BONUS_EXTRA_WHEEL")] TimerBonusExtraWheel = 16,
        /// <summary>
        /// 获得：完成每日任务拿到金币、MissionPoints、MissionStars；消耗：花费绿宝石完成每日任务；extras记录完成任务关数1、2、3
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_DAILY_MISSION_NORMAL")] DailyMissionNormal = 17,
        /// <summary>
        /// 获得：完成Honor任务拿到金币、MissionPoints、MissionStars；extras记录Honor任务完成轮数与当前轮的次数
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_DAILY_MISSION_HONOR")] DailyMissionHonor = 18,
        /// <summary>
        /// 获得：达到一定MissionPoints拿到金币、绿宝石、Boost；extras记录领取时MissionPoints和Stage阶段1、2
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_DAILY_MISSION_STAGE")] DailyMissionStage = 19,
        /// <summary>
        /// 获得：领取MissionPass免费拿到金币、绿宝石、Boost、Vip点数；extras记录MissionPass奖励等级和当前MissionPass等级
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_MISSION_PASS_FREE")] MissionPassFree = 20,
        /// <summary>
        /// 获得：领取MissionPass付费拿到金币、绿宝石、Boost、Vip点数；extras记录MissionPass奖励等级和当前MissionPass等级
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_MISSION_PASS_MISSION")] MissionPassMission = 21,
        /// <summary>
        /// 获得：领取MissionPass限时拿到金币、绿宝石、Boost、Vip点数；extras记录MissionPass奖励等级、当前MissionPass等级和任务倒计时
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_MISSION_PASS_LIMITED")] MissionPassLimited = 22,
        /// <summary>
        /// 消耗：花费绿宝石购买MissionPass等级；extras记录当前MissionPass等级
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_MISSION_PASS_LEVEL")] MissionPassLevel = 23,
        /// <summary>
        /// 获得：领取Inbox拿到的金币、绿宝石、Boost、Vip点数；extras记录发放原因如MissionPassChest等级赛季结算、CashBack活动
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_INBOX")] Inbox = 24,
        /// <summary>
        /// 获得：观看广告拿到金币；extras记录广告入口
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_ADS")] Ads = 25,
        /// <summary>
        /// 获得：后台权限增加拿到的金币、绿宝石、Boost、Vip点数等；extras记录备注
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_ADMIN")] Admin = 26,
        /// <summary>
        /// 消耗：GiftBox填满或者过期、MissionPoints清零、MissionStar清零；
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_EXPIRE")] Expire = 27,
        /// <summary>
        /// 获得：绑定AppleId拿到金币
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_BIND_APPLEID")] BindAppleid = 28,
        /// <summary>
        /// 获得：完成免费情人节任务拿到金币、绿宝石、Boost；extras记录领取到哪个阶段
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_VALENTINEGIFT_FREE")] ValentinegiftFree = 29,
        /// <summary>
        /// 获得：完成付费情人节任务拿到金币、绿宝石、Boost；extras记录领取到哪个阶段
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_VALENTINEGIFT_PURCHASE")] ValentinegiftPurchase = 30,
        /// <summary>
        /// 获得：完成卡牌系统Set收集拿到金币；extras记录setId
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_COMPLETE_SET")] CompleteSet = 31,
        /// <summary>
        /// 获得：完成卡牌系统所有收集拿到金币；extras记录完成时卡牌剩余数量、星星剩余数量、赛季倒计时（天）
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_COMPLETE_ALBUM")] CompleteAlbum = 32,
        /// <summary>
        /// 获得：玩luckyspin小游戏拿金币、绿宝石、卡包
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_LUCKY_SPIN")] LuckySpin = 33,
        /// <summary>
        /// 获得：玩cardrecover小游戏拿金币；extras记录玩家进行游戏时点亮锯齿的数量、玩家游戏频率
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_CARD_RECOVER")] CardRecover = 34,
        /// <summary>
        /// 消耗：使用钻石在4选1游戏中复活
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_MAGIC_HAT_RELIFE")] MagicHatRelife = 35,
        /// <summary>
        /// 消耗：消耗运营发放的COUPON链接领取了相应的奖励
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_OPERATION_COUPON")] OperationCoupon = 36,
        /// <summary>
        /// 获得：4选1获得奖励
        /// </summary>
        [pbr::OriginalName("ITEM_CHANGE_REASON_MAGIC_HAT_GET_REWARDS")] MagicHatGetRewards = 37,
      }

      public sealed partial class Common : pb::IMessage<Common> {
        private static readonly pb::MessageParser<Common> _parser = new pb::MessageParser<Common>(() => new Common());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Common> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Common() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Common(Common other) : this() {
          coin_ = other.coin_;
          level_ = other.level_;
          vipLevel_ = other.vipLevel_;
          emerald_ = other.emerald_;
          vipPoints_ = other.vipPoints_;
          exp_ = other.exp_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Common Clone() {
          return new Common(this);
        }

        /// <summary>Field number for the "coin" field.</summary>
        public const int CoinFieldNumber = 1;
        private ulong coin_;
        /// <summary>
        /// 当前金币数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Coin {
          get { return coin_; }
          set {
            coin_ = value;
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 2;
        private ulong level_;
        /// <summary>
        /// 当前等级
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "vip_level" field.</summary>
        public const int VipLevelFieldNumber = 3;
        private ulong vipLevel_;
        /// <summary>
        /// 当前vip等级
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong VipLevel {
          get { return vipLevel_; }
          set {
            vipLevel_ = value;
          }
        }

        /// <summary>Field number for the "emerald" field.</summary>
        public const int EmeraldFieldNumber = 4;
        private ulong emerald_;
        /// <summary>
        /// 当前绿宝石数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Emerald {
          get { return emerald_; }
          set {
            emerald_ = value;
          }
        }

        /// <summary>Field number for the "vip_points" field.</summary>
        public const int VipPointsFieldNumber = 5;
        private ulong vipPoints_;
        /// <summary>
        /// 当前vip点数数量
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong VipPoints {
          get { return vipPoints_; }
          set {
            vipPoints_ = value;
          }
        }

        /// <summary>Field number for the "exp" field.</summary>
        public const int ExpFieldNumber = 6;
        private ulong exp_;
        /// <summary>
        /// 当前经验
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Exp {
          get { return exp_; }
          set {
            exp_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Common);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Common other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Coin != other.Coin) return false;
          if (Level != other.Level) return false;
          if (VipLevel != other.VipLevel) return false;
          if (Emerald != other.Emerald) return false;
          if (VipPoints != other.VipPoints) return false;
          if (Exp != other.Exp) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Coin != 0UL) hash ^= Coin.GetHashCode();
          if (Level != 0UL) hash ^= Level.GetHashCode();
          if (VipLevel != 0UL) hash ^= VipLevel.GetHashCode();
          if (Emerald != 0UL) hash ^= Emerald.GetHashCode();
          if (VipPoints != 0UL) hash ^= VipPoints.GetHashCode();
          if (Exp != 0UL) hash ^= Exp.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
#if UNITY_EDITOR
          return pb::JsonFormatter.ToDiagnosticString(this);
#else
return "pb::JsonFormatter.ToDiagnosticString not supported on Native Platform";
#endif
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Coin != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Coin);
          }
          if (Level != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Level);
          }
          if (VipLevel != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(VipLevel);
          }
          if (Emerald != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(Emerald);
          }
          if (VipPoints != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(VipPoints);
          }
          if (Exp != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(Exp);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Coin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Coin);
          }
          if (Level != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Level);
          }
          if (VipLevel != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VipLevel);
          }
          if (Emerald != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Emerald);
          }
          if (VipPoints != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VipPoints);
          }
          if (Exp != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Common other) {
          if (other == null) {
            return;
          }
          if (other.Coin != 0UL) {
            Coin = other.Coin;
          }
          if (other.Level != 0UL) {
            Level = other.Level;
          }
          if (other.VipLevel != 0UL) {
            VipLevel = other.VipLevel;
          }
          if (other.Emerald != 0UL) {
            Emerald = other.Emerald;
          }
          if (other.VipPoints != 0UL) {
            VipPoints = other.VipPoints;
          }
          if (other.Exp != 0UL) {
            Exp = other.Exp;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Coin = input.ReadUInt64();
                break;
              }
              case 16: {
                Level = input.ReadUInt64();
                break;
              }
              case 24: {
                VipLevel = input.ReadUInt64();
                break;
              }
              case 32: {
                Emerald = input.ReadUInt64();
                break;
              }
              case 40: {
                VipPoints = input.ReadUInt64();
                break;
              }
              case 48: {
                Exp = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class GameEvent : pb::IMessage<GameEvent> {
        private static readonly pb::MessageParser<GameEvent> _parser = new pb::MessageParser<GameEvent>(() => new GameEvent());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameEvent> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameEvent() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameEvent(GameEvent other) : this() {
          gameEventType_ = other.gameEventType_;
          extras_ = other.extras_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameEvent Clone() {
          return new GameEvent(this);
        }

        /// <summary>Field number for the "game_event_type" field.</summary>
        public const int GameEventTypeFieldNumber = 1;
        private global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.GameEventType gameEventType_ = 0;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.GameEventType GameEventType {
          get { return gameEventType_; }
          set {
            gameEventType_ = value;
          }
        }

        /// <summary>Field number for the "extras" field.</summary>
        public const int ExtrasFieldNumber = 2;
        private static readonly pbc::MapField<string, string>.Codec _map_extras_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
        private readonly pbc::MapField<string, string> extras_ = new pbc::MapField<string, string>();
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> Extras {
          get { return extras_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GameEvent);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameEvent other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GameEventType != other.GameEventType) return false;
          if (!Extras.Equals(other.Extras)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (GameEventType != 0) hash ^= GameEventType.GetHashCode();
          hash ^= Extras.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
#if UNITY_EDITOR
          return pb::JsonFormatter.ToDiagnosticString(this);
#else
return "pb::JsonFormatter.ToDiagnosticString not supported on Native Platform";
#endif
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (GameEventType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) GameEventType);
          }
          extras_.WriteTo(output, _map_extras_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (GameEventType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameEventType);
          }
          size += extras_.CalculateSize(_map_extras_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameEvent other) {
          if (other == null) {
            return;
          }
          if (other.GameEventType != 0) {
            GameEventType = other.GameEventType;
          }
          extras_.Add(other.extras_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                GameEventType = (global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.GameEventType) input.ReadEnum();
                break;
              }
              case 18: {
                extras_.AddEntriesFrom(input, _map_extras_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class PanelColumn : pb::IMessage<PanelColumn> {
        private static readonly pb::MessageParser<PanelColumn> _parser = new pb::MessageParser<PanelColumn>(() => new PanelColumn());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PanelColumn> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PanelColumn() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PanelColumn(PanelColumn other) : this() {
          symbols_ = other.symbols_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PanelColumn Clone() {
          return new PanelColumn(this);
        }

        /// <summary>Field number for the "symbols" field.</summary>
        public const int SymbolsFieldNumber = 1;
        private static readonly pb::FieldCodec<ulong> _repeated_symbols_codec
            = pb::FieldCodec.ForUInt64(10);
        private readonly pbc::RepeatedField<ulong> symbols_ = new pbc::RepeatedField<ulong>();
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ulong> Symbols {
          get { return symbols_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PanelColumn);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PanelColumn other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!symbols_.Equals(other.symbols_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= symbols_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
#if UNITY_EDITOR
          return pb::JsonFormatter.ToDiagnosticString(this);
#else
return "pb::JsonFormatter.ToDiagnosticString not supported on Native Platform";
#endif
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          symbols_.WriteTo(output, _repeated_symbols_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += symbols_.CalculateSize(_repeated_symbols_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PanelColumn other) {
          if (other == null) {
            return;
          }
          symbols_.Add(other.symbols_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Panel : pb::IMessage<Panel> {
        private static readonly pb::MessageParser<Panel> _parser = new pb::MessageParser<Panel>(() => new Panel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Panel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Panel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Panel(Panel other) : this() {
          columns_ = other.columns_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Panel Clone() {
          return new Panel(this);
        }

        /// <summary>Field number for the "columns" field.</summary>
        public const int ColumnsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.PanelColumn> _repeated_columns_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.PanelColumn.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.PanelColumn> columns_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.PanelColumn>();
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.PanelColumn> Columns {
          get { return columns_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Panel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Panel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!columns_.Equals(other.columns_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= columns_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
#if UNITY_EDITOR
          return pb::JsonFormatter.ToDiagnosticString(this);
#else
return "pb::JsonFormatter.ToDiagnosticString not supported on Native Platform";
#endif
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          columns_.WriteTo(output, _repeated_columns_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += columns_.CalculateSize(_repeated_columns_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Panel other) {
          if (other == null) {
            return;
          }
          columns_.Add(other.columns_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                columns_.AddEntriesFrom(input, _repeated_columns_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class SpinAction : pb::IMessage<SpinAction> {
        private static readonly pb::MessageParser<SpinAction> _parser = new pb::MessageParser<SpinAction>(() => new SpinAction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpinAction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpinAction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpinAction(SpinAction other) : this() {
          gameId_ = other.gameId_;
          spinActionType_ = other.spinActionType_;
          isAuto_ = other.isAuto_;
          isFast_ = other.isFast_;
          spinMode_ = other.spinMode_;
          bet_ = other.bet_;
          requestId_ = other.requestId_;
          extras_ = other.extras_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpinAction Clone() {
          return new SpinAction(this);
        }

        /// <summary>Field number for the "game_id" field.</summary>
        public const int GameIdFieldNumber = 1;
        private string gameId_ = "";
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameId {
          get { return gameId_; }
          set {
            gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "spin_action_type" field.</summary>
        public const int SpinActionTypeFieldNumber = 2;
        private global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinActionType spinActionType_ = 0;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinActionType SpinActionType {
          get { return spinActionType_; }
          set {
            spinActionType_ = value;
          }
        }

        /// <summary>Field number for the "is_auto" field.</summary>
        public const int IsAutoFieldNumber = 3;
        private bool isAuto_;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsAuto {
          get { return isAuto_; }
          set {
            isAuto_ = value;
          }
        }

        /// <summary>Field number for the "is_fast" field.</summary>
        public const int IsFastFieldNumber = 4;
        private bool isFast_;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsFast {
          get { return isFast_; }
          set {
            isFast_ = value;
          }
        }

        /// <summary>Field number for the "spin_mode" field.</summary>
        public const int SpinModeFieldNumber = 5;
        private string spinMode_ = "";
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SpinMode {
          get { return spinMode_; }
          set {
            spinMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bet" field.</summary>
        public const int BetFieldNumber = 6;
        private ulong bet_;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        /// <summary>Field number for the "request_id" field.</summary>
        public const int RequestIdFieldNumber = 7;
        private string requestId_ = "";
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RequestId {
          get { return requestId_; }
          set {
            requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "extras" field.</summary>
        public const int ExtrasFieldNumber = 8;
        private static readonly pbc::MapField<string, string>.Codec _map_extras_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 66);
        private readonly pbc::MapField<string, string> extras_ = new pbc::MapField<string, string>();
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> Extras {
          get { return extras_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SpinAction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SpinAction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GameId != other.GameId) return false;
          if (SpinActionType != other.SpinActionType) return false;
          if (IsAuto != other.IsAuto) return false;
          if (IsFast != other.IsFast) return false;
          if (SpinMode != other.SpinMode) return false;
          if (Bet != other.Bet) return false;
          if (RequestId != other.RequestId) return false;
          if (!Extras.Equals(other.Extras)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (GameId.Length != 0) hash ^= GameId.GetHashCode();
          if (SpinActionType != 0) hash ^= SpinActionType.GetHashCode();
          if (IsAuto != false) hash ^= IsAuto.GetHashCode();
          if (IsFast != false) hash ^= IsFast.GetHashCode();
          if (SpinMode.Length != 0) hash ^= SpinMode.GetHashCode();
          if (Bet != 0UL) hash ^= Bet.GetHashCode();
          if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
          hash ^= Extras.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
#if UNITY_EDITOR
          return pb::JsonFormatter.ToDiagnosticString(this);
#else
return "pb::JsonFormatter.ToDiagnosticString not supported on Native Platform";
#endif
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (GameId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(GameId);
          }
          if (SpinActionType != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) SpinActionType);
          }
          if (IsAuto != false) {
            output.WriteRawTag(24);
            output.WriteBool(IsAuto);
          }
          if (IsFast != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsFast);
          }
          if (SpinMode.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(SpinMode);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(Bet);
          }
          if (RequestId.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(RequestId);
          }
          extras_.WriteTo(output, _map_extras_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (GameId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
          }
          if (SpinActionType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpinActionType);
          }
          if (IsAuto != false) {
            size += 1 + 1;
          }
          if (IsFast != false) {
            size += 1 + 1;
          }
          if (SpinMode.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SpinMode);
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (RequestId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
          }
          size += extras_.CalculateSize(_map_extras_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SpinAction other) {
          if (other == null) {
            return;
          }
          if (other.GameId.Length != 0) {
            GameId = other.GameId;
          }
          if (other.SpinActionType != 0) {
            SpinActionType = other.SpinActionType;
          }
          if (other.IsAuto != false) {
            IsAuto = other.IsAuto;
          }
          if (other.IsFast != false) {
            IsFast = other.IsFast;
          }
          if (other.SpinMode.Length != 0) {
            SpinMode = other.SpinMode;
          }
          if (other.Bet != 0UL) {
            Bet = other.Bet;
          }
          if (other.RequestId.Length != 0) {
            RequestId = other.RequestId;
          }
          extras_.Add(other.extras_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                GameId = input.ReadString();
                break;
              }
              case 16: {
                SpinActionType = (global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinActionType) input.ReadEnum();
                break;
              }
              case 24: {
                IsAuto = input.ReadBool();
                break;
              }
              case 32: {
                IsFast = input.ReadBool();
                break;
              }
              case 42: {
                SpinMode = input.ReadString();
                break;
              }
              case 48: {
                Bet = input.ReadUInt64();
                break;
              }
              case 58: {
                RequestId = input.ReadString();
                break;
              }
              case 66: {
                extras_.AddEntriesFrom(input, _map_extras_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class SpinResult : pb::IMessage<SpinResult> {
        private static readonly pb::MessageParser<SpinResult> _parser = new pb::MessageParser<SpinResult>(() => new SpinResult());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpinResult> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpinResult() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpinResult(SpinResult other) : this() {
          gameId_ = other.gameId_;
          spinActionType_ = other.spinActionType_;
          requestId_ = other.requestId_;
          bet_ = other.bet_;
          win_ = other.win_;
          panels_ = other.panels_.Clone();
          positions_ = other.positions_.Clone();
          extras_ = other.extras_.Clone();
          isSpinEnd_ = other.isSpinEnd_;
          cost_ = other.cost_;
          displayWin_ = other.displayWin_;
          displayTotalWin_ = other.displayTotalWin_;
          controlStragegyId_ = other.controlStragegyId_;
          controlStragegyRandom_ = other.controlStragegyRandom_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpinResult Clone() {
          return new SpinResult(this);
        }

        /// <summary>Field number for the "game_id" field.</summary>
        public const int GameIdFieldNumber = 1;
        private string gameId_ = "";
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string GameId {
          get { return gameId_; }
          set {
            gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "spin_action_type" field.</summary>
        public const int SpinActionTypeFieldNumber = 2;
        private global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinActionType spinActionType_ = 0;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinActionType SpinActionType {
          get { return spinActionType_; }
          set {
            spinActionType_ = value;
          }
        }

        /// <summary>Field number for the "request_id" field.</summary>
        public const int RequestIdFieldNumber = 3;
        private string requestId_ = "";
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RequestId {
          get { return requestId_; }
          set {
            requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "bet" field.</summary>
        public const int BetFieldNumber = 4;
        private ulong bet_;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        /// <summary>Field number for the "win" field.</summary>
        public const int WinFieldNumber = 5;
        private ulong win_;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Win {
          get { return win_; }
          set {
            win_ = value;
          }
        }

        /// <summary>Field number for the "panels" field.</summary>
        public const int PanelsFieldNumber = 6;
        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Panel> _repeated_panels_codec
            = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Panel> panels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Panel>();
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Panel> Panels {
          get { return panels_; }
        }

        /// <summary>Field number for the "positions" field.</summary>
        public const int PositionsFieldNumber = 7;
        private static readonly pb::FieldCodec<ulong> _repeated_positions_codec
            = pb::FieldCodec.ForUInt64(58);
        private readonly pbc::RepeatedField<ulong> positions_ = new pbc::RepeatedField<ulong>();
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<ulong> Positions {
          get { return positions_; }
        }

        /// <summary>Field number for the "extras" field.</summary>
        public const int ExtrasFieldNumber = 8;
        private static readonly pbc::MapField<string, string>.Codec _map_extras_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 66);
        private readonly pbc::MapField<string, string> extras_ = new pbc::MapField<string, string>();
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> Extras {
          get { return extras_; }
        }

        /// <summary>Field number for the "is_spin_end" field.</summary>
        public const int IsSpinEndFieldNumber = 9;
        private bool isSpinEnd_;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsSpinEnd {
          get { return isSpinEnd_; }
          set {
            isSpinEnd_ = value;
          }
        }

        /// <summary>Field number for the "cost" field.</summary>
        public const int CostFieldNumber = 10;
        private ulong cost_;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Cost {
          get { return cost_; }
          set {
            cost_ = value;
          }
        }

        /// <summary>Field number for the "display_win" field.</summary>
        public const int DisplayWinFieldNumber = 11;
        private ulong displayWin_;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong DisplayWin {
          get { return displayWin_; }
          set {
            displayWin_ = value;
          }
        }

        /// <summary>Field number for the "display_total_win" field.</summary>
        public const int DisplayTotalWinFieldNumber = 12;
        private ulong displayTotalWin_;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong DisplayTotalWin {
          get { return displayTotalWin_; }
          set {
            displayTotalWin_ = value;
          }
        }

        /// <summary>Field number for the "control_stragegy_id" field.</summary>
        public const int ControlStragegyIdFieldNumber = 13;
        private string controlStragegyId_ = "";
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ControlStragegyId {
          get { return controlStragegyId_; }
          set {
            controlStragegyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "control_stragegy_random" field.</summary>
        public const int ControlStragegyRandomFieldNumber = 14;
        private ulong controlStragegyRandom_;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ControlStragegyRandom {
          get { return controlStragegyRandom_; }
          set {
            controlStragegyRandom_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SpinResult);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SpinResult other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (GameId != other.GameId) return false;
          if (SpinActionType != other.SpinActionType) return false;
          if (RequestId != other.RequestId) return false;
          if (Bet != other.Bet) return false;
          if (Win != other.Win) return false;
          if(!panels_.Equals(other.panels_)) return false;
          if(!positions_.Equals(other.positions_)) return false;
          if (!Extras.Equals(other.Extras)) return false;
          if (IsSpinEnd != other.IsSpinEnd) return false;
          if (Cost != other.Cost) return false;
          if (DisplayWin != other.DisplayWin) return false;
          if (DisplayTotalWin != other.DisplayTotalWin) return false;
          if (ControlStragegyId != other.ControlStragegyId) return false;
          if (ControlStragegyRandom != other.ControlStragegyRandom) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (GameId.Length != 0) hash ^= GameId.GetHashCode();
          if (SpinActionType != 0) hash ^= SpinActionType.GetHashCode();
          if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
          if (Bet != 0UL) hash ^= Bet.GetHashCode();
          if (Win != 0UL) hash ^= Win.GetHashCode();
          hash ^= panels_.GetHashCode();
          hash ^= positions_.GetHashCode();
          hash ^= Extras.GetHashCode();
          if (IsSpinEnd != false) hash ^= IsSpinEnd.GetHashCode();
          if (Cost != 0UL) hash ^= Cost.GetHashCode();
          if (DisplayWin != 0UL) hash ^= DisplayWin.GetHashCode();
          if (DisplayTotalWin != 0UL) hash ^= DisplayTotalWin.GetHashCode();
          if (ControlStragegyId.Length != 0) hash ^= ControlStragegyId.GetHashCode();
          if (ControlStragegyRandom != 0UL) hash ^= ControlStragegyRandom.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
#if UNITY_EDITOR
          return pb::JsonFormatter.ToDiagnosticString(this);
#else
return "pb::JsonFormatter.ToDiagnosticString not supported on Native Platform";
#endif
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (GameId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(GameId);
          }
          if (SpinActionType != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) SpinActionType);
          }
          if (RequestId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(RequestId);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(Bet);
          }
          if (Win != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Win);
          }
          panels_.WriteTo(output, _repeated_panels_codec);
          positions_.WriteTo(output, _repeated_positions_codec);
          extras_.WriteTo(output, _map_extras_codec);
          if (IsSpinEnd != false) {
            output.WriteRawTag(72);
            output.WriteBool(IsSpinEnd);
          }
          if (Cost != 0UL) {
            output.WriteRawTag(80);
            output.WriteUInt64(Cost);
          }
          if (DisplayWin != 0UL) {
            output.WriteRawTag(88);
            output.WriteUInt64(DisplayWin);
          }
          if (DisplayTotalWin != 0UL) {
            output.WriteRawTag(96);
            output.WriteUInt64(DisplayTotalWin);
          }
          if (ControlStragegyId.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(ControlStragegyId);
          }
          if (ControlStragegyRandom != 0UL) {
            output.WriteRawTag(112);
            output.WriteUInt64(ControlStragegyRandom);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (GameId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
          }
          if (SpinActionType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpinActionType);
          }
          if (RequestId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (Win != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Win);
          }
          size += panels_.CalculateSize(_repeated_panels_codec);
          size += positions_.CalculateSize(_repeated_positions_codec);
          size += extras_.CalculateSize(_map_extras_codec);
          if (IsSpinEnd != false) {
            size += 1 + 1;
          }
          if (Cost != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Cost);
          }
          if (DisplayWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DisplayWin);
          }
          if (DisplayTotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DisplayTotalWin);
          }
          if (ControlStragegyId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ControlStragegyId);
          }
          if (ControlStragegyRandom != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ControlStragegyRandom);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SpinResult other) {
          if (other == null) {
            return;
          }
          if (other.GameId.Length != 0) {
            GameId = other.GameId;
          }
          if (other.SpinActionType != 0) {
            SpinActionType = other.SpinActionType;
          }
          if (other.RequestId.Length != 0) {
            RequestId = other.RequestId;
          }
          if (other.Bet != 0UL) {
            Bet = other.Bet;
          }
          if (other.Win != 0UL) {
            Win = other.Win;
          }
          panels_.Add(other.panels_);
          positions_.Add(other.positions_);
          extras_.Add(other.extras_);
          if (other.IsSpinEnd != false) {
            IsSpinEnd = other.IsSpinEnd;
          }
          if (other.Cost != 0UL) {
            Cost = other.Cost;
          }
          if (other.DisplayWin != 0UL) {
            DisplayWin = other.DisplayWin;
          }
          if (other.DisplayTotalWin != 0UL) {
            DisplayTotalWin = other.DisplayTotalWin;
          }
          if (other.ControlStragegyId.Length != 0) {
            ControlStragegyId = other.ControlStragegyId;
          }
          if (other.ControlStragegyRandom != 0UL) {
            ControlStragegyRandom = other.ControlStragegyRandom;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                GameId = input.ReadString();
                break;
              }
              case 16: {
                SpinActionType = (global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.SpinActionType) input.ReadEnum();
                break;
              }
              case 26: {
                RequestId = input.ReadString();
                break;
              }
              case 32: {
                Bet = input.ReadUInt64();
                break;
              }
              case 40: {
                Win = input.ReadUInt64();
                break;
              }
              case 50: {
                panels_.AddEntriesFrom(input, _repeated_panels_codec);
                break;
              }
              case 58:
              case 56: {
                positions_.AddEntriesFrom(input, _repeated_positions_codec);
                break;
              }
              case 66: {
                extras_.AddEntriesFrom(input, _map_extras_codec);
                break;
              }
              case 72: {
                IsSpinEnd = input.ReadBool();
                break;
              }
              case 80: {
                Cost = input.ReadUInt64();
                break;
              }
              case 88: {
                DisplayWin = input.ReadUInt64();
                break;
              }
              case 96: {
                DisplayTotalWin = input.ReadUInt64();
                break;
              }
              case 106: {
                ControlStragegyId = input.ReadString();
                break;
              }
              case 112: {
                ControlStragegyRandom = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ItemChange : pb::IMessage<ItemChange> {
        private static readonly pb::MessageParser<ItemChange> _parser = new pb::MessageParser<ItemChange>(() => new ItemChange());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ItemChange> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemChange() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemChange(ItemChange other) : this() {
          item_ = other.item_;
          amount_ = other.amount_;
          current_ = other.current_;
          reason_ = other.reason_;
          extras_ = other.extras_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ItemChange Clone() {
          return new ItemChange(this);
        }

        /// <summary>Field number for the "item" field.</summary>
        public const int ItemFieldNumber = 1;
        private global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Item item_ = 0;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Item Item {
          get { return item_; }
          set {
            item_ = value;
          }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private long amount_;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        /// <summary>Field number for the "current" field.</summary>
        public const int CurrentFieldNumber = 3;
        private ulong current_;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Current {
          get { return current_; }
          set {
            current_ = value;
          }
        }

        /// <summary>Field number for the "reason" field.</summary>
        public const int ReasonFieldNumber = 4;
        private global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.ItemChangeReason reason_ = 0;
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.ItemChangeReason Reason {
          get { return reason_; }
          set {
            reason_ = value;
          }
        }

        /// <summary>Field number for the "extras" field.</summary>
        public const int ExtrasFieldNumber = 5;
        private static readonly pbc::MapField<string, string>.Codec _map_extras_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
        private readonly pbc::MapField<string, string> extras_ = new pbc::MapField<string, string>();
        /// <summary>
        /// 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> Extras {
          get { return extras_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ItemChange);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ItemChange other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Item != other.Item) return false;
          if (Amount != other.Amount) return false;
          if (Current != other.Current) return false;
          if (Reason != other.Reason) return false;
          if (!Extras.Equals(other.Extras)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Item != 0) hash ^= Item.GetHashCode();
          if (Amount != 0L) hash ^= Amount.GetHashCode();
          if (Current != 0UL) hash ^= Current.GetHashCode();
          if (Reason != 0) hash ^= Reason.GetHashCode();
          hash ^= Extras.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
#if UNITY_EDITOR
          return pb::JsonFormatter.ToDiagnosticString(this);
#else
return "pb::JsonFormatter.ToDiagnosticString not supported on Native Platform";
#endif
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Item != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Item);
          }
          if (Amount != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Amount);
          }
          if (Current != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Current);
          }
          if (Reason != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Reason);
          }
          extras_.WriteTo(output, _map_extras_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Item != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Item);
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          if (Current != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Current);
          }
          if (Reason != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
          }
          size += extras_.CalculateSize(_map_extras_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ItemChange other) {
          if (other == null) {
            return;
          }
          if (other.Item != 0) {
            Item = other.Item;
          }
          if (other.Amount != 0L) {
            Amount = other.Amount;
          }
          if (other.Current != 0UL) {
            Current = other.Current;
          }
          if (other.Reason != 0) {
            Reason = other.Reason;
          }
          extras_.Add(other.extras_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Item = (global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.Item) input.ReadEnum();
                break;
              }
              case 16: {
                Amount = input.ReadInt64();
                break;
              }
              case 24: {
                Current = input.ReadUInt64();
                break;
              }
              case 32: {
                Reason = (global::DragonU3DSDK.Network.API.Protocol.BiEventFortuneX.Types.ItemChangeReason) input.ReadEnum();
                break;
              }
              case 42: {
                extras_.AddEntriesFrom(input, _map_extras_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
