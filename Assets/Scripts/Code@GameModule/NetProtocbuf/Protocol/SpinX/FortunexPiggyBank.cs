// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortunex_piggy_bank.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Messages
  public sealed class PiggyBankInfo : pb::IMessage {
    private static readonly pb::MessageParser<PiggyBankInfo> _parser = new pb::MessageParser<PiggyBankInfo>(() => new PiggyBankInfo());
    public static pb::MessageParser<PiggyBankInfo> Parser { get { return _parser; } }

    private bool enable_;
    /// <summary>
    /// 是否可用
    /// </summary>
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    private bool canBreak_;
    /// <summary>
    /// 是否可以砸开
    /// </summary>
    public bool CanBreak {
      get { return canBreak_; }
      set {
        canBreak_ = value;
      }
    }

    private ulong currentCoins_;
    /// <summary>
    /// 当前累积的金币
    /// </summary>
    public ulong CurrentCoins {
      get { return currentCoins_; }
      set {
        currentCoins_ = value;
      }
    }

    private ulong maxCoins_;
    /// <summary>
    /// 最多累积金币数量
    /// </summary>
    public ulong MaxCoins {
      get { return maxCoins_; }
      set {
        maxCoins_ = value;
      }
    }

    private ulong firstBonus_;
    /// <summary>
    /// 首次额外奖励(0表示非首次)
    /// </summary>
    public ulong FirstBonus {
      get { return firstBonus_; }
      set {
        firstBonus_ = value;
      }
    }

    private ulong limitUserLevel_;
    /// <summary>
    /// 小猪解锁所需的用户等级
    /// </summary>
    public ulong LimitUserLevel {
      get { return limitUserLevel_; }
      set {
        limitUserLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (CanBreak != false) {
        output.WriteRawTag(16);
        output.WriteBool(CanBreak);
      }
      if (CurrentCoins != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CurrentCoins);
      }
      if (MaxCoins != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MaxCoins);
      }
      if (FirstBonus != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(FirstBonus);
      }
      if (LimitUserLevel != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(LimitUserLevel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Enable != false) {
        size += 1 + 1;
      }
      if (CanBreak != false) {
        size += 1 + 1;
      }
      if (CurrentCoins != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CurrentCoins);
      }
      if (MaxCoins != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxCoins);
      }
      if (FirstBonus != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FirstBonus);
      }
      if (LimitUserLevel != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LimitUserLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
          case 16: {
            CanBreak = input.ReadBool();
            break;
          }
          case 24: {
            CurrentCoins = input.ReadUInt64();
            break;
          }
          case 32: {
            MaxCoins = input.ReadUInt64();
            break;
          }
          case 40: {
            FirstBonus = input.ReadUInt64();
            break;
          }
          case 48: {
            LimitUserLevel = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端拉去piggyBank信息
  /// </summary>
  public sealed class CGetPiggyBank : pb::IMessage {
    private static readonly pb::MessageParser<CGetPiggyBank> _parser = new pb::MessageParser<CGetPiggyBank>(() => new CGetPiggyBank());
    public static pb::MessageParser<CGetPiggyBank> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 服务器返回piggyBank信息
  /// </summary>
  public sealed class SGetPiggyBank : pb::IMessage {
    private static readonly pb::MessageParser<SGetPiggyBank> _parser = new pb::MessageParser<SGetPiggyBank>(() => new SGetPiggyBank());
    public static pb::MessageParser<SGetPiggyBank> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankInfo pbInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankInfo PbInfo {
      get { return pbInfo_; }
      set {
        pbInfo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig pbPayItem_;
    public global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig PbPayItem {
      get { return pbPayItem_; }
      set {
        pbPayItem_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (pbInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PbInfo);
      }
      if (pbPayItem_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PbPayItem);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (pbInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PbInfo);
      }
      if (pbPayItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PbPayItem);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pbInfo_ == null) {
              pbInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankInfo();
            }
            input.ReadMessage(pbInfo_);
            break;
          }
          case 18: {
            if (pbPayItem_ == null) {
              pbPayItem_ = new global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig();
            }
            input.ReadMessage(pbPayItem_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 每次spin累积内容
  /// </summary>
  public sealed class PiggyBankResult : pb::IMessage {
    private static readonly pb::MessageParser<PiggyBankResult> _parser = new pb::MessageParser<PiggyBankResult>(() => new PiggyBankResult());
    public static pb::MessageParser<PiggyBankResult> Parser { get { return _parser; } }

    private ulong current_;
    /// <summary>
    /// 当前累积数量
    /// </summary>
    public ulong Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }

    private ulong max_;
    /// <summary>
    /// 容量
    /// </summary>
    public ulong Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    private ulong delta_;
    /// <summary>
    /// 本次变化值
    /// </summary>
    public ulong Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Current != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Current);
      }
      if (Max != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Max);
      }
      if (Delta != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Delta);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Current != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Current);
      }
      if (Max != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Max);
      }
      if (Delta != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Delta);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Current = input.ReadUInt64();
            break;
          }
          case 16: {
            Max = input.ReadUInt64();
            break;
          }
          case 24: {
            Delta = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
