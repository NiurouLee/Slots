// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortunex_season_quest.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Messages
  public sealed class SeasonQuest : pb::IMessage {
    private static readonly pb::MessageParser<SeasonQuest> _parser = new pb::MessageParser<SeasonQuest>(() => new SeasonQuest());
    public static pb::MessageParser<SeasonQuest> Parser { get { return _parser; } }

    private bool isLocked_;
    /// <summary>
    /// 本系统功能是否锁住
    /// </summary>
    public bool IsLocked {
      get { return isLocked_; }
      set {
        isLocked_ = value;
      }
    }

    private uint unlockLevel_;
    /// <summary>
    /// 开锁等级
    /// </summary>
    public uint UnlockLevel {
      get { return unlockLevel_; }
      set {
        unlockLevel_ = value;
      }
    }

    private bool newbieQuestNotOver_;
    /// <summary>
    /// 新手还没搞完； 表示一种is_locked = true 的原因，另一种原因是上面的等级
    /// </summary>
    public bool NewbieQuestNotOver {
      get { return newbieQuestNotOver_; }
      set {
        newbieQuestNotOver_ = value;
      }
    }

    private ulong currentSeasonTimestampLeft_;
    /// <summary>
    /// 当前赛季剩余时间，单位秒。如果正在空窗期则是0
    /// </summary>
    public ulong CurrentSeasonTimestampLeft {
      get { return currentSeasonTimestampLeft_; }
      set {
        currentSeasonTimestampLeft_ = value;
      }
    }

    private uint currentSeasonId_;
    /// <summary>
    /// 当前赛季id
    /// </summary>
    public uint CurrentSeasonId {
      get { return currentSeasonId_; }
      set {
        currentSeasonId_ = value;
      }
    }

    private ulong seasonId_;
    /// <summary>
    /// 玩家正在进行的赛季id， 如果没有赛季则是0，如果 season_id != current_season_id; 且current_season_id>0 则要调用refresh api
    /// </summary>
    public ulong SeasonId {
      get { return seasonId_; }
      set {
        seasonId_ = value;
      }
    }

    private ulong timestampLeft_;
    /// <summary>
    /// 玩家正在进行的赛季倒计时，单位秒。如果过期则是0
    /// </summary>
    public ulong TimestampLeft {
      get { return timestampLeft_; }
      set {
        timestampLeft_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.PhrasedQuest> _repeated_quests_codec
        = pb::FieldCodec.ForMessage(66, global::DragonU3DSDK.Network.API.ILProtocol.PhrasedQuest.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PhrasedQuest> quests_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PhrasedQuest>();
    /// <summary>
    /// 推图,  跟NewbieQuest的quest一样，这次都是is_slot类型
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PhrasedQuest> Quests {
      get { return quests_; }
    }

    private uint phrase_;
    /// <summary>
    /// phrase 0 1 2
    /// </summary>
    public uint Phrase {
      get { return phrase_; }
      set {
        phrase_ = value;
      }
    }

    private uint difficulty_;
    /// <summary>
    /// 难度， 0表示还没选难度
    /// </summary>
    public uint Difficulty {
      get { return difficulty_; }
      set {
        difficulty_ = value;
      }
    }

    private ulong stars_;
    /// <summary>
    /// 星星
    /// </summary>
    public ulong Stars {
      get { return stars_; }
      set {
        stars_ = value;
      }
    }

    private uint buffDiamond_;
    /// <summary>
    /// buff 钻石消耗
    /// </summary>
    public uint BuffDiamond {
      get { return buffDiamond_; }
      set {
        buffDiamond_ = value;
      }
    }

    private uint buffMinutes_;
    /// <summary>
    /// buff 持续时间
    /// </summary>
    public uint BuffMinutes {
      get { return buffMinutes_; }
      set {
        buffMinutes_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsLocked != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsLocked);
      }
      if (UnlockLevel != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnlockLevel);
      }
      if (NewbieQuestNotOver != false) {
        output.WriteRawTag(24);
        output.WriteBool(NewbieQuestNotOver);
      }
      if (CurrentSeasonTimestampLeft != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CurrentSeasonTimestampLeft);
      }
      if (CurrentSeasonId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CurrentSeasonId);
      }
      if (SeasonId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SeasonId);
      }
      if (TimestampLeft != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(TimestampLeft);
      }
      quests_.WriteTo(output, _repeated_quests_codec);
      if (Phrase != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Phrase);
      }
      if (Difficulty != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Difficulty);
      }
      if (Stars != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(Stars);
      }
      if (BuffDiamond != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(BuffDiamond);
      }
      if (BuffMinutes != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(BuffMinutes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IsLocked != false) {
        size += 1 + 1;
      }
      if (UnlockLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnlockLevel);
      }
      if (NewbieQuestNotOver != false) {
        size += 1 + 1;
      }
      if (CurrentSeasonTimestampLeft != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CurrentSeasonTimestampLeft);
      }
      if (CurrentSeasonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentSeasonId);
      }
      if (SeasonId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SeasonId);
      }
      if (TimestampLeft != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampLeft);
      }
      size += quests_.CalculateSize(_repeated_quests_codec);
      if (Phrase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Phrase);
      }
      if (Difficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Difficulty);
      }
      if (Stars != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Stars);
      }
      if (BuffDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffDiamond);
      }
      if (BuffMinutes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffMinutes);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsLocked = input.ReadBool();
            break;
          }
          case 16: {
            UnlockLevel = input.ReadUInt32();
            break;
          }
          case 24: {
            NewbieQuestNotOver = input.ReadBool();
            break;
          }
          case 32: {
            CurrentSeasonTimestampLeft = input.ReadUInt64();
            break;
          }
          case 40: {
            CurrentSeasonId = input.ReadUInt32();
            break;
          }
          case 48: {
            SeasonId = input.ReadUInt64();
            break;
          }
          case 56: {
            TimestampLeft = input.ReadUInt64();
            break;
          }
          case 66: {
            quests_.AddEntriesFrom(input, _repeated_quests_codec);
            break;
          }
          case 80: {
            Phrase = input.ReadUInt32();
            break;
          }
          case 88: {
            Difficulty = input.ReadUInt32();
            break;
          }
          case 96: {
            Stars = input.ReadUInt64();
            break;
          }
          case 104: {
            BuffDiamond = input.ReadUInt32();
            break;
          }
          case 112: {
            BuffMinutes = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class PhrasedQuest : pb::IMessage {
    private static readonly pb::MessageParser<PhrasedQuest> _parser = new pb::MessageParser<PhrasedQuest>(() => new PhrasedQuest());
    public static pb::MessageParser<PhrasedQuest> Parser { get { return _parser; } }

    private bool isSlot_;
    /// <summary>
    /// 是机台进度还是奖励进度
    /// </summary>
    public bool IsSlot {
      get { return isSlot_; }
      set {
        isSlot_ = value;
      }
    }

    private string gameId_ = "";
    /// <summary>
    /// 机台的gameId
    /// </summary>
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string assetId_ = "";
    /// <summary>
    /// 机台的assetId， 普通机台gameID=assetId,
    /// </summary>
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Mission> _repeated_missions_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Mission.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Mission> missions_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Mission>();
    /// <summary>
    /// Quest机台用assetId寻找普通机台里的资源
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Mission> Missions {
      get { return missions_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
    /// <summary>
    /// 奖励
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    private bool collectable_;
    /// <summary>
    /// 是否可完成
    /// </summary>
    public bool Collectable {
      get { return collectable_; }
      set {
        collectable_ = value;
      }
    }

    private bool collected_;
    /// <summary>
    /// 是否已完成
    /// </summary>
    public bool Collected {
      get { return collected_; }
      set {
        collected_ = value;
      }
    }

    private uint phrase_;
    /// <summary>
    /// phrase
    /// </summary>
    public uint Phrase {
      get { return phrase_; }
      set {
        phrase_ = value;
      }
    }

    private uint spinCount_;
    /// <summary>
    /// spin次数
    /// </summary>
    public uint SpinCount {
      get { return spinCount_; }
      set {
        spinCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSlot != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSlot);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameId);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AssetId);
      }
      missions_.WriteTo(output, _repeated_missions_codec);
      if (reward_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Reward);
      }
      if (Collectable != false) {
        output.WriteRawTag(48);
        output.WriteBool(Collectable);
      }
      if (Collected != false) {
        output.WriteRawTag(56);
        output.WriteBool(Collected);
      }
      if (Phrase != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Phrase);
      }
      if (SpinCount != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(SpinCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IsSlot != false) {
        size += 1 + 1;
      }
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      size += missions_.CalculateSize(_repeated_missions_codec);
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (Collectable != false) {
        size += 1 + 1;
      }
      if (Collected != false) {
        size += 1 + 1;
      }
      if (Phrase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Phrase);
      }
      if (SpinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpinCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSlot = input.ReadBool();
            break;
          }
          case 18: {
            GameId = input.ReadString();
            break;
          }
          case 26: {
            AssetId = input.ReadString();
            break;
          }
          case 34: {
            missions_.AddEntriesFrom(input, _repeated_missions_codec);
            break;
          }
          case 42: {
            if (reward_ == null) {
              reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(reward_);
            break;
          }
          case 48: {
            Collectable = input.ReadBool();
            break;
          }
          case 56: {
            Collected = input.ReadBool();
            break;
          }
          case 64: {
            Phrase = input.ReadUInt32();
            break;
          }
          case 72: {
            SpinCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 读season quest 信息
  /// </summary>
  public sealed class CGetSeasonQuest : pb::IMessage {
    private static readonly pb::MessageParser<CGetSeasonQuest> _parser = new pb::MessageParser<CGetSeasonQuest>(() => new CGetSeasonQuest());
    public static pb::MessageParser<CGetSeasonQuest> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SGetSeasonQuest : pb::IMessage {
    private static readonly pb::MessageParser<SGetSeasonQuest> _parser = new pb::MessageParser<SGetSeasonQuest>(() => new SGetSeasonQuest());
    public static pb::MessageParser<SGetSeasonQuest> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.SeasonQuest seasonQuest_;
    /// <summary>
    /// guides
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.SeasonQuest SeasonQuest {
      get { return seasonQuest_; }
      set {
        seasonQuest_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (seasonQuest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SeasonQuest);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (seasonQuest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SeasonQuest);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (seasonQuest_ == null) {
              seasonQuest_ = new global::DragonU3DSDK.Network.API.ILProtocol.SeasonQuest();
            }
            input.ReadMessage(seasonQuest_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 刷新
  /// </summary>
  public sealed class CRefreshSeasonQuest : pb::IMessage {
    private static readonly pb::MessageParser<CRefreshSeasonQuest> _parser = new pb::MessageParser<CRefreshSeasonQuest>(() => new CRefreshSeasonQuest());
    public static pb::MessageParser<CRefreshSeasonQuest> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SRefreshSeasonQuest : pb::IMessage {
    private static readonly pb::MessageParser<SRefreshSeasonQuest> _parser = new pb::MessageParser<SRefreshSeasonQuest>(() => new SRefreshSeasonQuest());
    public static pb::MessageParser<SRefreshSeasonQuest> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.SeasonQuest seasonQuest_;
    /// <summary>
    /// 赛季quest
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.SeasonQuest SeasonQuest {
      get { return seasonQuest_; }
      set {
        seasonQuest_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (seasonQuest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SeasonQuest);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (seasonQuest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SeasonQuest);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (seasonQuest_ == null) {
              seasonQuest_ = new global::DragonU3DSDK.Network.API.ILProtocol.SeasonQuest();
            }
            input.ReadMessage(seasonQuest_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 收集完成奖励
  /// </summary>
  public sealed class CCollectSeasonQuestReward : pb::IMessage {
    private static readonly pb::MessageParser<CCollectSeasonQuestReward> _parser = new pb::MessageParser<CCollectSeasonQuestReward>(() => new CCollectSeasonQuestReward());
    public static pb::MessageParser<CCollectSeasonQuestReward> Parser { get { return _parser; } }

    private uint index_;
    /// <summary>
    /// Quest的index,从0开始
    /// </summary>
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SCollectSeasonQuestReward : pb::IMessage {
    private static readonly pb::MessageParser<SCollectSeasonQuestReward> _parser = new pb::MessageParser<SCollectSeasonQuestReward>(() => new SCollectSeasonQuestReward());
    public static pb::MessageParser<SCollectSeasonQuestReward> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.SeasonQuest seasonQuest_;
    /// <summary>
    /// 赛季quest
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.SeasonQuest SeasonQuest {
      get { return seasonQuest_; }
      set {
        seasonQuest_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (seasonQuest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SeasonQuest);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (seasonQuest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SeasonQuest);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (seasonQuest_ == null) {
              seasonQuest_ = new global::DragonU3DSDK.Network.API.ILProtocol.SeasonQuest();
            }
            input.ReadMessage(seasonQuest_);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 读难度奖励
  /// </summary>
  public sealed class CGetSeasonQuestDifficultyRewards : pb::IMessage {
    private static readonly pb::MessageParser<CGetSeasonQuestDifficultyRewards> _parser = new pb::MessageParser<CGetSeasonQuestDifficultyRewards>(() => new CGetSeasonQuestDifficultyRewards());
    public static pb::MessageParser<CGetSeasonQuestDifficultyRewards> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SGetSeasonQuestDifficultyRewards : pb::IMessage {
    private static readonly pb::MessageParser<SGetSeasonQuestDifficultyRewards> _parser = new pb::MessageParser<SGetSeasonQuestDifficultyRewards>(() => new SGetSeasonQuestDifficultyRewards());
    public static pb::MessageParser<SGetSeasonQuestDifficultyRewards> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> rewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 奖励:难度[0,1,2]
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> Rewards {
      get { return rewards_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 选难度
  /// </summary>
  public sealed class CChooseSeasonQuestDifficulty : pb::IMessage {
    private static readonly pb::MessageParser<CChooseSeasonQuestDifficulty> _parser = new pb::MessageParser<CChooseSeasonQuestDifficulty>(() => new CChooseSeasonQuestDifficulty());
    public static pb::MessageParser<CChooseSeasonQuestDifficulty> Parser { get { return _parser; } }

    private uint difficulty_;
    /// <summary>
    /// 难度
    /// </summary>
    public uint Difficulty {
      get { return difficulty_; }
      set {
        difficulty_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Difficulty != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Difficulty);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Difficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Difficulty);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Difficulty = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SChooseSeasonQuestDifficulty : pb::IMessage {
    private static readonly pb::MessageParser<SChooseSeasonQuestDifficulty> _parser = new pb::MessageParser<SChooseSeasonQuestDifficulty>(() => new SChooseSeasonQuestDifficulty());
    public static pb::MessageParser<SChooseSeasonQuestDifficulty> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.SeasonQuest seasonQuest_;
    /// <summary>
    /// 赛季quest
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.SeasonQuest SeasonQuest {
      get { return seasonQuest_; }
      set {
        seasonQuest_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (seasonQuest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SeasonQuest);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (seasonQuest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SeasonQuest);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (seasonQuest_ == null) {
              seasonQuest_ = new global::DragonU3DSDK.Network.API.ILProtocol.SeasonQuest();
            }
            input.ReadMessage(seasonQuest_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 读商品信息
  /// </summary>
  public sealed class CGetSeasonQuestPaymentItems : pb::IMessage {
    private static readonly pb::MessageParser<CGetSeasonQuestPaymentItems> _parser = new pb::MessageParser<CGetSeasonQuestPaymentItems>(() => new CGetSeasonQuestPaymentItems());
    public static pb::MessageParser<CGetSeasonQuestPaymentItems> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SGetSeasonQuestPaymentItems : pb::IMessage {
    private static readonly pb::MessageParser<SGetSeasonQuestPaymentItems> _parser = new pb::MessageParser<SGetSeasonQuestPaymentItems>(() => new SGetSeasonQuestPaymentItems());
    public static pb::MessageParser<SGetSeasonQuestPaymentItems> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig> Items {
      get { return items_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 钻石买双倍经验物品, 结果体现在userBuff上
  /// </summary>
  public sealed class CSeasonQuestBuyDoubleExp : pb::IMessage {
    private static readonly pb::MessageParser<CSeasonQuestBuyDoubleExp> _parser = new pb::MessageParser<CSeasonQuestBuyDoubleExp>(() => new CSeasonQuestBuyDoubleExp());
    public static pb::MessageParser<CSeasonQuestBuyDoubleExp> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SSeasonQuestBuyDoubleExp : pb::IMessage {
    private static readonly pb::MessageParser<SSeasonQuestBuyDoubleExp> _parser = new pb::MessageParser<SSeasonQuestBuyDoubleExp>(() => new SSeasonQuestBuyDoubleExp());
    public static pb::MessageParser<SSeasonQuestBuyDoubleExp> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 排行榜
  /// </summary>
  public sealed class CSeasonQuestLeaderboard : pb::IMessage {
    private static readonly pb::MessageParser<CSeasonQuestLeaderboard> _parser = new pb::MessageParser<CSeasonQuestLeaderboard>(() => new CSeasonQuestLeaderboard());
    public static pb::MessageParser<CSeasonQuestLeaderboard> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SSeasonQuestLeaderboard : pb::IMessage {
    private static readonly pb::MessageParser<SSeasonQuestLeaderboard> _parser = new pb::MessageParser<SSeasonQuestLeaderboard>(() => new SSeasonQuestLeaderboard());
    public static pb::MessageParser<SSeasonQuestLeaderboard> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SSeasonQuestLeaderboard.Types.Rank> _repeated_ranks_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.SSeasonQuestLeaderboard.Types.Rank.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SSeasonQuestLeaderboard.Types.Rank> ranks_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SSeasonQuestLeaderboard.Types.Rank>();
    /// <summary>
    /// 排行榜
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SSeasonQuestLeaderboard.Types.Rank> Ranks {
      get { return ranks_; }
    }

    private uint myRank_;
    /// <summary>
    /// 0是未上榜
    /// </summary>
    public uint MyRank {
      get { return myRank_; }
      set {
        myRank_ = value;
      }
    }

    private ulong coins_;
    /// <summary>
    /// top金币现实
    /// </summary>
    public ulong Coins {
      get { return coins_; }
      set {
        coins_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SSeasonQuestLeaderboard.Types.RankReward> _repeated_rankRewards_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.SSeasonQuestLeaderboard.Types.RankReward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SSeasonQuestLeaderboard.Types.RankReward> rankRewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SSeasonQuestLeaderboard.Types.RankReward>();
    /// <summary>
    /// 排行奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SSeasonQuestLeaderboard.Types.RankReward> RankRewards {
      get { return rankRewards_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      ranks_.WriteTo(output, _repeated_ranks_codec);
      if (MyRank != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MyRank);
      }
      if (Coins != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Coins);
      }
      rankRewards_.WriteTo(output, _repeated_rankRewards_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += ranks_.CalculateSize(_repeated_ranks_codec);
      if (MyRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MyRank);
      }
      if (Coins != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Coins);
      }
      size += rankRewards_.CalculateSize(_repeated_rankRewards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ranks_.AddEntriesFrom(input, _repeated_ranks_codec);
            break;
          }
          case 16: {
            MyRank = input.ReadUInt32();
            break;
          }
          case 24: {
            Coins = input.ReadUInt64();
            break;
          }
          case 34: {
            rankRewards_.AddEntriesFrom(input, _repeated_rankRewards_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SSeasonQuestLeaderboard message type.</summary>
    public static class Types {
      public sealed class Rank : pb::IMessage {
        private static readonly pb::MessageParser<Rank> _parser = new pb::MessageParser<Rank>(() => new Rank());
        public static pb::MessageParser<Rank> Parser { get { return _parser; } }

        private string name_ = "";
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private uint avatarId_;
        /// <summary>
        /// 默认头像
        /// </summary>
        public uint AvatarId {
          get { return avatarId_; }
          set {
            avatarId_ = value;
          }
        }

        private ulong stars_;
        public ulong Stars {
          get { return stars_; }
          set {
            stars_ = value;
          }
        }

        private string avatarUrl_ = "";
        /// <summary>
        /// facebook头像url，没有就是空
        /// </summary>
        public string AvatarUrl {
          get { return avatarUrl_; }
          set {
            avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private ulong rank_;
        /// <summary>
        /// 玩家排名 如 1，2，3
        /// </summary>
        public ulong Rank_ {
          get { return rank_; }
          set {
            rank_ = value;
          }
        }

        private ulong playerId_;
        /// <summary>
        /// 玩家playerid 机器人的为0
        /// </summary>
        public ulong PlayerId {
          get { return playerId_; }
          set {
            playerId_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (AvatarId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(AvatarId);
          }
          if (Stars != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(Stars);
          }
          if (AvatarUrl.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(AvatarUrl);
          }
          if (Rank_ != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(Rank_);
          }
          if (PlayerId != 0UL) {
            output.WriteRawTag(56);
            output.WriteUInt64(PlayerId);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (AvatarId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvatarId);
          }
          if (Stars != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Stars);
          }
          if (AvatarUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
          }
          if (Rank_ != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Rank_);
          }
          if (PlayerId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                AvatarId = input.ReadUInt32();
                break;
              }
              case 32: {
                Stars = input.ReadUInt64();
                break;
              }
              case 42: {
                AvatarUrl = input.ReadString();
                break;
              }
              case 48: {
                Rank_ = input.ReadUInt64();
                break;
              }
              case 56: {
                PlayerId = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class RankReward : pb::IMessage {
        private static readonly pb::MessageParser<RankReward> _parser = new pb::MessageParser<RankReward>(() => new RankReward());
        public static pb::MessageParser<RankReward> Parser { get { return _parser; } }

        private uint from_;
        public uint From {
          get { return from_; }
          set {
            from_ = value;
          }
        }

        private uint to_;
        public uint To {
          get { return to_; }
          set {
            to_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
        public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
          get { return reward_; }
          set {
            reward_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (From != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(From);
          }
          if (To != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(To);
          }
          if (reward_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Reward);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (From != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(From);
          }
          if (To != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(To);
          }
          if (reward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                From = input.ReadUInt32();
                break;
              }
              case 16: {
                To = input.ReadUInt32();
                break;
              }
              case 26: {
                if (reward_ == null) {
                  reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
                }
                input.ReadMessage(reward_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
