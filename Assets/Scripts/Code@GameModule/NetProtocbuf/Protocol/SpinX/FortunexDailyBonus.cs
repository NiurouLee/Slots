// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortunex_daily_bonus.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Messages
  public sealed class DailyBonus : pb::IMessage {
    private static readonly pb::MessageParser<DailyBonus> _parser = new pb::MessageParser<DailyBonus>(() => new DailyBonus());
    public static pb::MessageParser<DailyBonus> Parser { get { return _parser; } }

    private ulong timestampLeft_;
    /// <summary>
    /// 可领剩余时间
    /// </summary>
    public ulong TimestampLeft {
      get { return timestampLeft_; }
      set {
        timestampLeft_ = value;
      }
    }

    private uint weekStep_;
    /// <summary>
    /// 周累计步数
    /// </summary>
    public uint WeekStep {
      get { return weekStep_; }
      set {
        weekStep_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_weekRewards_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> weekRewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 本周奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> WeekRewards {
      get { return weekRewards_; }
    }

    private uint monthStep_;
    /// <summary>
    /// 月累计步数
    /// </summary>
    public uint MonthStep {
      get { return monthStep_; }
      set {
        monthStep_ = value;
      }
    }

    private uint monthStage_;
    /// <summary>
    /// 月累计阶段
    /// </summary>
    public uint MonthStage {
      get { return monthStage_; }
      set {
        monthStage_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.MonthReward> _repeated_monthRewards_codec
        = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.ILProtocol.MonthReward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonthReward> monthRewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonthReward>();
    /// <summary>
    /// 月奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonthReward> MonthRewards {
      get { return monthRewards_; }
    }

    private uint weekRewardIndex_;
    /// <summary>
    /// 周奖励index
    /// </summary>
    public uint WeekRewardIndex {
      get { return weekRewardIndex_; }
      set {
        weekRewardIndex_ = value;
      }
    }

    private uint forAd_;
    /// <summary>
    /// 给前端展示广告额外百分比
    /// </summary>
    public uint ForAd {
      get { return forAd_; }
      set {
        forAd_ = value;
      }
    }

    private string desc_ = "";
    /// <summary>
    /// 给前端展示的文案
    /// </summary>
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TimestampLeft != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TimestampLeft);
      }
      if (WeekStep != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(WeekStep);
      }
      weekRewards_.WriteTo(output, _repeated_weekRewards_codec);
      if (MonthStep != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MonthStep);
      }
      if (MonthStage != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MonthStage);
      }
      monthRewards_.WriteTo(output, _repeated_monthRewards_codec);
      if (WeekRewardIndex != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(WeekRewardIndex);
      }
      if (ForAd != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ForAd);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Desc);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (TimestampLeft != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampLeft);
      }
      if (WeekStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeekStep);
      }
      size += weekRewards_.CalculateSize(_repeated_weekRewards_codec);
      if (MonthStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonthStep);
      }
      if (MonthStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonthStage);
      }
      size += monthRewards_.CalculateSize(_repeated_monthRewards_codec);
      if (WeekRewardIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeekRewardIndex);
      }
      if (ForAd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ForAd);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimestampLeft = input.ReadUInt64();
            break;
          }
          case 16: {
            WeekStep = input.ReadUInt32();
            break;
          }
          case 26: {
            weekRewards_.AddEntriesFrom(input, _repeated_weekRewards_codec);
            break;
          }
          case 32: {
            MonthStep = input.ReadUInt32();
            break;
          }
          case 40: {
            MonthStage = input.ReadUInt32();
            break;
          }
          case 50: {
            monthRewards_.AddEntriesFrom(input, _repeated_monthRewards_codec);
            break;
          }
          case 56: {
            WeekRewardIndex = input.ReadUInt32();
            break;
          }
          case 64: {
            ForAd = input.ReadUInt32();
            break;
          }
          case 74: {
            Desc = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class MonthReward : pb::IMessage {
    private static readonly pb::MessageParser<MonthReward> _parser = new pb::MessageParser<MonthReward>(() => new MonthReward());
    public static pb::MessageParser<MonthReward> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    private uint step_;
    public uint Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (reward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reward);
      }
      if (Step != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Step);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Step);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reward_ == null) {
              reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(reward_);
            break;
          }
          case 16: {
            Step = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CGetDailyBonus : pb::IMessage {
    private static readonly pb::MessageParser<CGetDailyBonus> _parser = new pb::MessageParser<CGetDailyBonus>(() => new CGetDailyBonus());
    public static pb::MessageParser<CGetDailyBonus> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SGetDailyBonus : pb::IMessage {
    private static readonly pb::MessageParser<SGetDailyBonus> _parser = new pb::MessageParser<SGetDailyBonus>(() => new SGetDailyBonus());
    public static pb::MessageParser<SGetDailyBonus> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.DailyBonus dailyBonus_;
    public global::DragonU3DSDK.Network.API.ILProtocol.DailyBonus DailyBonus {
      get { return dailyBonus_; }
      set {
        dailyBonus_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (dailyBonus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DailyBonus);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (dailyBonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyBonus);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (dailyBonus_ == null) {
              dailyBonus_ = new global::DragonU3DSDK.Network.API.ILProtocol.DailyBonus();
            }
            input.ReadMessage(dailyBonus_);
            break;
          }
        }
      }
    }

  }

  public sealed class CCollectDailyBonus : pb::IMessage {
    private static readonly pb::MessageParser<CCollectDailyBonus> _parser = new pb::MessageParser<CCollectDailyBonus>(() => new CCollectDailyBonus());
    public static pb::MessageParser<CCollectDailyBonus> Parser { get { return _parser; } }

    private bool isMonth_;
    /// <summary>
    /// 请求领取月阶段奖励
    /// </summary>
    public bool IsMonth {
      get { return isMonth_; }
      set {
        isMonth_ = value;
      }
    }

    private bool isAdWatched_;
    /// <summary>
    /// 观看过广告
    /// </summary>
    public bool IsAdWatched {
      get { return isAdWatched_; }
      set {
        isAdWatched_ = value;
      }
    }

    private ulong placeId_;
    /// <summary>
    /// 新加的placeId
    /// </summary>
    public ulong PlaceId {
      get { return placeId_; }
      set {
        placeId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsMonth != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsMonth);
      }
      if (IsAdWatched != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsAdWatched);
      }
      if (PlaceId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(PlaceId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IsMonth != false) {
        size += 1 + 1;
      }
      if (IsAdWatched != false) {
        size += 1 + 1;
      }
      if (PlaceId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlaceId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsMonth = input.ReadBool();
            break;
          }
          case 16: {
            IsAdWatched = input.ReadBool();
            break;
          }
          case 24: {
            PlaceId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class SCollectDailyBonus : pb::IMessage {
    private static readonly pb::MessageParser<SCollectDailyBonus> _parser = new pb::MessageParser<SCollectDailyBonus>(() => new SCollectDailyBonus());
    public static pb::MessageParser<SCollectDailyBonus> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.DailyBonus dailyBonus_;
    public global::DragonU3DSDK.Network.API.ILProtocol.DailyBonus DailyBonus {
      get { return dailyBonus_; }
      set {
        dailyBonus_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> rewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> Rewards {
      get { return rewards_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (dailyBonus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DailyBonus);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (dailyBonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyBonus);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (dailyBonus_ == null) {
              dailyBonus_ = new global::DragonU3DSDK.Network.API.ILProtocol.DailyBonus();
            }
            input.ReadMessage(dailyBonus_);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 26: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
