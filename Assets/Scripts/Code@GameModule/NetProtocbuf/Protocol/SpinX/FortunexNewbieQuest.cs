// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortunex_newbie_quest.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Messages
  public sealed class NewbieQuest : pb::IMessage {
    private static readonly pb::MessageParser<NewbieQuest> _parser = new pb::MessageParser<NewbieQuest>(() => new NewbieQuest());
    public static pb::MessageParser<NewbieQuest> Parser { get { return _parser; } }

    private bool isLocked_;
    /// <summary>
    /// 本系统功能是否锁住
    /// </summary>
    public bool IsLocked {
      get { return isLocked_; }
      set {
        isLocked_ = value;
      }
    }

    private uint unlockLevel_;
    /// <summary>
    /// 开锁等级
    /// </summary>
    public uint UnlockLevel {
      get { return unlockLevel_; }
      set {
        unlockLevel_ = value;
      }
    }

    private ulong timestampLeft_;
    /// <summary>
    /// 倒计时 秒
    /// </summary>
    public ulong TimestampLeft {
      get { return timestampLeft_; }
      set {
        timestampLeft_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Quest> _repeated_quests_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Quest.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Quest> quests_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Quest>();
    /// <summary>
    /// 推图
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Quest> Quests {
      get { return quests_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsLocked != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsLocked);
      }
      if (UnlockLevel != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnlockLevel);
      }
      if (TimestampLeft != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TimestampLeft);
      }
      quests_.WriteTo(output, _repeated_quests_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (IsLocked != false) {
        size += 1 + 1;
      }
      if (UnlockLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnlockLevel);
      }
      if (TimestampLeft != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampLeft);
      }
      size += quests_.CalculateSize(_repeated_quests_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsLocked = input.ReadBool();
            break;
          }
          case 16: {
            UnlockLevel = input.ReadUInt32();
            break;
          }
          case 24: {
            TimestampLeft = input.ReadUInt64();
            break;
          }
          case 34: {
            quests_.AddEntriesFrom(input, _repeated_quests_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class Quest : pb::IMessage {
    private static readonly pb::MessageParser<Quest> _parser = new pb::MessageParser<Quest>(() => new Quest());
    public static pb::MessageParser<Quest> Parser { get { return _parser; } }

    private bool isSlot_;
    /// <summary>
    /// 是机台进度还是奖励进度
    /// </summary>
    public bool IsSlot {
      get { return isSlot_; }
      set {
        isSlot_ = value;
      }
    }

    private string gameId_ = "";
    /// <summary>
    /// 机台的gameId
    /// </summary>
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string assetId_ = "";
    /// <summary>
    /// 机台的assetId， 普通机台gameID=assetId,
    /// </summary>
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Mission> _repeated_missions_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Mission.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Mission> missions_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Mission>();
    /// <summary>
    /// Quest机台用assetId寻找普通机台里的资源
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Mission> Missions {
      get { return missions_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
    /// <summary>
    /// 奖励
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    private bool collectable_;
    /// <summary>
    /// 是否可完成
    /// </summary>
    public bool Collectable {
      get { return collectable_; }
      set {
        collectable_ = value;
      }
    }

    private bool collected_;
    /// <summary>
    /// 是否已完成
    /// </summary>
    public bool Collected {
      get { return collected_; }
      set {
        collected_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSlot != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSlot);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameId);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AssetId);
      }
      missions_.WriteTo(output, _repeated_missions_codec);
      if (reward_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Reward);
      }
      if (Collectable != false) {
        output.WriteRawTag(48);
        output.WriteBool(Collectable);
      }
      if (Collected != false) {
        output.WriteRawTag(56);
        output.WriteBool(Collected);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IsSlot != false) {
        size += 1 + 1;
      }
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      size += missions_.CalculateSize(_repeated_missions_codec);
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (Collectable != false) {
        size += 1 + 1;
      }
      if (Collected != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSlot = input.ReadBool();
            break;
          }
          case 18: {
            GameId = input.ReadString();
            break;
          }
          case 26: {
            AssetId = input.ReadString();
            break;
          }
          case 34: {
            missions_.AddEntriesFrom(input, _repeated_missions_codec);
            break;
          }
          case 42: {
            if (reward_ == null) {
              reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(reward_);
            break;
          }
          case 48: {
            Collectable = input.ReadBool();
            break;
          }
          case 56: {
            Collected = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CGetNewbieQuest : pb::IMessage {
    private static readonly pb::MessageParser<CGetNewbieQuest> _parser = new pb::MessageParser<CGetNewbieQuest>(() => new CGetNewbieQuest());
    public static pb::MessageParser<CGetNewbieQuest> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SGetNewbieQuest : pb::IMessage {
    private static readonly pb::MessageParser<SGetNewbieQuest> _parser = new pb::MessageParser<SGetNewbieQuest>(() => new SGetNewbieQuest());
    public static pb::MessageParser<SGetNewbieQuest> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.NewbieQuest newbieQuest_;
    /// <summary>
    /// guides
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.NewbieQuest NewbieQuest {
      get { return newbieQuest_; }
      set {
        newbieQuest_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (newbieQuest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NewbieQuest);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (newbieQuest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewbieQuest);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (newbieQuest_ == null) {
              newbieQuest_ = new global::DragonU3DSDK.Network.API.ILProtocol.NewbieQuest();
            }
            input.ReadMessage(newbieQuest_);
            break;
          }
        }
      }
    }

  }

  public sealed class CCollectNewbieQuest : pb::IMessage {
    private static readonly pb::MessageParser<CCollectNewbieQuest> _parser = new pb::MessageParser<CCollectNewbieQuest>(() => new CCollectNewbieQuest());
    public static pb::MessageParser<CCollectNewbieQuest> Parser { get { return _parser; } }

    private uint index_;
    /// <summary>
    /// Quest的index,从0开始
    /// </summary>
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SCollectNewbieQuest : pb::IMessage {
    private static readonly pb::MessageParser<SCollectNewbieQuest> _parser = new pb::MessageParser<SCollectNewbieQuest>(() => new SCollectNewbieQuest());
    public static pb::MessageParser<SCollectNewbieQuest> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.NewbieQuest newbieQuest_;
    /// <summary>
    /// 新手quest
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.NewbieQuest NewbieQuest {
      get { return newbieQuest_; }
      set {
        newbieQuest_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (newbieQuest_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NewbieQuest);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (newbieQuest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewbieQuest);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (newbieQuest_ == null) {
              newbieQuest_ = new global::DragonU3DSDK.Network.API.ILProtocol.NewbieQuest();
            }
            input.ReadMessage(newbieQuest_);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  public sealed class CGetNewbieQuestPaymentItems : pb::IMessage {
    private static readonly pb::MessageParser<CGetNewbieQuestPaymentItems> _parser = new pb::MessageParser<CGetNewbieQuestPaymentItems>(() => new CGetNewbieQuestPaymentItems());
    public static pb::MessageParser<CGetNewbieQuestPaymentItems> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SGetNewbieQuestPaymentItems : pb::IMessage {
    private static readonly pb::MessageParser<SGetNewbieQuestPaymentItems> _parser = new pb::MessageParser<SGetNewbieQuestPaymentItems>(() => new SGetNewbieQuestPaymentItems());
    public static pb::MessageParser<SGetNewbieQuestPaymentItems> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig> Items {
      get { return items_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
