// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortunex_notifycation.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Enums
  /// <summary>
  /// 推送类型
  /// </summary>
  public enum FortunexNotificationType {
    /// <summary>
    /// 空，占位无用
    /// </summary>
    None = 0,
    /// <summary>
    /// 邮箱更新了
    /// </summary>
    EmailUpdated = 1,
    /// <summary>
    ///timerbonus hourlyBonus 金币增长速度更新
    /// </summary>
    TimerHourlyBonusSpeedUpdat = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// // 推送
  /// </summary>
  public sealed class FortunexNotification : pb::IMessage {
    private static readonly pb::MessageParser<FortunexNotification> _parser = new pb::MessageParser<FortunexNotification>(() => new FortunexNotification());
    public static pb::MessageParser<FortunexNotification> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.FortunexNotificationType notificationType_ = 0;
    /// <summary>
    /// 推送类型
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.FortunexNotificationType NotificationType {
      get { return notificationType_; }
      set {
        notificationType_ = value;
      }
    }

    private string json_ = "";
    /// <summary>
    /// json格式通知
    /// </summary>
    public string Json {
      get { return json_; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct pb_;
    /// <summary>
    /// pb格式通知
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct Pb {
      get { return pb_; }
      set {
        pb_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NotificationType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) NotificationType);
      }
      if (Json.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Json);
      }
      if (pb_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pb);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (NotificationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NotificationType);
      }
      if (Json.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      if (pb_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pb);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            notificationType_ = (global::DragonU3DSDK.Network.API.ILProtocol.FortunexNotificationType) input.ReadEnum();
            break;
          }
          case 18: {
            Json = input.ReadString();
            break;
          }
          case 26: {
            if (pb_ == null) {
              pb_ = new global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct();
            }
            input.ReadMessage(pb_);
            break;
          }
        }
      }
    }

  }

  public sealed class FortunexNotifyficationContentMail : pb::IMessage {
    private static readonly pb::MessageParser<FortunexNotifyficationContentMail> _parser = new pb::MessageParser<FortunexNotifyficationContentMail>(() => new FortunexNotifyficationContentMail());
    public static pb::MessageParser<FortunexNotifyficationContentMail> Parser { get { return _parser; } }

    private ulong mailCount_;
    public ulong MailCount {
      get { return mailCount_; }
      set {
        mailCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MailCount != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MailCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MailCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MailCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MailCount = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
