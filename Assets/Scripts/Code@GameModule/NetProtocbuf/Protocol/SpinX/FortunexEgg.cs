// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortunex_egg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Messages
  public sealed class CGetEggInfo : pb::IMessage {
    private static readonly pb::MessageParser<CGetEggInfo> _parser = new pb::MessageParser<CGetEggInfo>(() => new CGetEggInfo());
    public static pb::MessageParser<CGetEggInfo> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class EggInfo : pb::IMessage {
    private static readonly pb::MessageParser<EggInfo> _parser = new pb::MessageParser<EggInfo>(() => new EggInfo());
    public static pb::MessageParser<EggInfo> Parser { get { return _parser; } }

    private bool isLocked_;
    /// <summary>
    /// 本系统功能是否锁住
    /// </summary>
    public bool IsLocked {
      get { return isLocked_; }
      set {
        isLocked_ = value;
      }
    }

    private ulong unlockLevel_;
    /// <summary>
    /// 开锁等级
    /// </summary>
    public ulong UnlockLevel {
      get { return unlockLevel_; }
      set {
        unlockLevel_ = value;
      }
    }

    private ulong timestampLeft_;
    /// <summary>
    /// 本周活动开启倒计时， &lt;=0 说明活动开始了， 客户端自动走到它&lt;=0时，记得get一遍数据
    /// </summary>
    public ulong TimestampLeft {
      get { return timestampLeft_; }
      set {
        timestampLeft_ = value;
      }
    }

    private ulong endTimestampLeft_;
    /// <summary>
    /// 本周活动结束倒计时， 客户端自动走到它&lt;=0时，如果不get或者没有加锤子的api动作 它还会是老数据，还可以玩没玩完的砸蛋
    /// </summary>
    public ulong EndTimestampLeft {
      get { return endTimestampLeft_; }
      set {
        endTimestampLeft_ = value;
      }
    }

    private static readonly pb::FieldCodec<uint> _repeated_showAdDays_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> showAdDays_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 是否显示活动广告
    /// </summary>
    public pbc::RepeatedField<uint> ShowAdDays {
      get { return showAdDays_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EggInfo.Types.Egg> _repeated_silverEggs_codec
        = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.ILProtocol.EggInfo.Types.Egg.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EggInfo.Types.Egg> silverEggs_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EggInfo.Types.Egg>();
    /// <summary>
    /// 银蛋列表 0-6
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EggInfo.Types.Egg> SilverEggs {
      get { return silverEggs_; }
    }

    private uint silverHammer_;
    /// <summary>
    /// 银锤子数量
    /// </summary>
    public uint SilverHammer {
      get { return silverHammer_; }
      set {
        silverHammer_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward silverFinalReward_;
    /// <summary>
    /// 银的普通最终奖励
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward SilverFinalReward {
      get { return silverFinalReward_; }
      set {
        silverFinalReward_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward silverHammerReward_;
    /// <summary>
    /// 银的未使用锤子额外奖励
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward SilverHammerReward {
      get { return silverHammerReward_; }
      set {
        silverHammerReward_ = value;
      }
    }

    private bool silverOver_;
    /// <summary>
    /// 游戏是否结束，砸到终点蛋
    /// </summary>
    public bool SilverOver {
      get { return silverOver_; }
      set {
        silverOver_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward silverTotalFinalReward_;
    /// <summary>
    /// 总奖励, 包括: open=true的所有silver_eggs，silver_finale_reward 和 silver_hammer_reward
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward SilverTotalFinalReward {
      get { return silverTotalFinalReward_; }
      set {
        silverTotalFinalReward_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EggInfo.Types.Egg> _repeated_goldEggs_codec
        = pb::FieldCodec.ForMessage(98, global::DragonU3DSDK.Network.API.ILProtocol.EggInfo.Types.Egg.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EggInfo.Types.Egg> goldEggs_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EggInfo.Types.Egg>();
    /// <summary>
    /// 下面金色蛋 和 银色蛋意义相同
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EggInfo.Types.Egg> GoldEggs {
      get { return goldEggs_; }
    }

    private uint goldHammer_;
    /// <summary>
    /// 没有和银蛋放在同一个结构的数组中，是预防今后金银蛋还会有不同需求
    /// </summary>
    public uint GoldHammer {
      get { return goldHammer_; }
      set {
        goldHammer_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward goldFinalReward_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward GoldFinalReward {
      get { return goldFinalReward_; }
      set {
        goldFinalReward_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward goldHammerReward_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward GoldHammerReward {
      get { return goldHammerReward_; }
      set {
        goldHammerReward_ = value;
      }
    }

    private bool goldOver_;
    public bool GoldOver {
      get { return goldOver_; }
      set {
        goldOver_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward goldTotalFinalReward_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward GoldTotalFinalReward {
      get { return goldTotalFinalReward_; }
      set {
        goldTotalFinalReward_ = value;
      }
    }

    private ulong startTimestamp_;
    public ulong StartTimestamp {
      get { return startTimestamp_; }
      set {
        startTimestamp_ = value;
      }
    }

    private ulong endTimestamp_;
    public ulong EndTimestamp {
      get { return endTimestamp_; }
      set {
        endTimestamp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsLocked != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsLocked);
      }
      if (UnlockLevel != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UnlockLevel);
      }
      if (TimestampLeft != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TimestampLeft);
      }
      if (EndTimestampLeft != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(EndTimestampLeft);
      }
      showAdDays_.WriteTo(output, _repeated_showAdDays_codec);
      silverEggs_.WriteTo(output, _repeated_silverEggs_codec);
      if (SilverHammer != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SilverHammer);
      }
      if (silverFinalReward_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SilverFinalReward);
      }
      if (silverHammerReward_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SilverHammerReward);
      }
      if (SilverOver != false) {
        output.WriteRawTag(80);
        output.WriteBool(SilverOver);
      }
      if (silverTotalFinalReward_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SilverTotalFinalReward);
      }
      goldEggs_.WriteTo(output, _repeated_goldEggs_codec);
      if (GoldHammer != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(GoldHammer);
      }
      if (goldFinalReward_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(GoldFinalReward);
      }
      if (goldHammerReward_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(GoldHammerReward);
      }
      if (GoldOver != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(GoldOver);
      }
      if (goldTotalFinalReward_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(GoldTotalFinalReward);
      }
      if (StartTimestamp != 0UL) {
        output.WriteRawTag(144, 1);
        output.WriteUInt64(StartTimestamp);
      }
      if (EndTimestamp != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(EndTimestamp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IsLocked != false) {
        size += 1 + 1;
      }
      if (UnlockLevel != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnlockLevel);
      }
      if (TimestampLeft != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampLeft);
      }
      if (EndTimestampLeft != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTimestampLeft);
      }
      size += showAdDays_.CalculateSize(_repeated_showAdDays_codec);
      size += silverEggs_.CalculateSize(_repeated_silverEggs_codec);
      if (SilverHammer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SilverHammer);
      }
      if (silverFinalReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SilverFinalReward);
      }
      if (silverHammerReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SilverHammerReward);
      }
      if (SilverOver != false) {
        size += 1 + 1;
      }
      if (silverTotalFinalReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SilverTotalFinalReward);
      }
      size += goldEggs_.CalculateSize(_repeated_goldEggs_codec);
      if (GoldHammer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoldHammer);
      }
      if (goldFinalReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GoldFinalReward);
      }
      if (goldHammerReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GoldHammerReward);
      }
      if (GoldOver != false) {
        size += 2 + 1;
      }
      if (goldTotalFinalReward_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GoldTotalFinalReward);
      }
      if (StartTimestamp != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(StartTimestamp);
      }
      if (EndTimestamp != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(EndTimestamp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsLocked = input.ReadBool();
            break;
          }
          case 16: {
            UnlockLevel = input.ReadUInt64();
            break;
          }
          case 24: {
            TimestampLeft = input.ReadUInt64();
            break;
          }
          case 32: {
            EndTimestampLeft = input.ReadUInt64();
            break;
          }
          case 42:
          case 40: {
            showAdDays_.AddEntriesFrom(input, _repeated_showAdDays_codec);
            break;
          }
          case 50: {
            silverEggs_.AddEntriesFrom(input, _repeated_silverEggs_codec);
            break;
          }
          case 56: {
            SilverHammer = input.ReadUInt32();
            break;
          }
          case 66: {
            if (silverFinalReward_ == null) {
              silverFinalReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(silverFinalReward_);
            break;
          }
          case 74: {
            if (silverHammerReward_ == null) {
              silverHammerReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(silverHammerReward_);
            break;
          }
          case 80: {
            SilverOver = input.ReadBool();
            break;
          }
          case 90: {
            if (silverTotalFinalReward_ == null) {
              silverTotalFinalReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(silverTotalFinalReward_);
            break;
          }
          case 98: {
            goldEggs_.AddEntriesFrom(input, _repeated_goldEggs_codec);
            break;
          }
          case 104: {
            GoldHammer = input.ReadUInt32();
            break;
          }
          case 114: {
            if (goldFinalReward_ == null) {
              goldFinalReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(goldFinalReward_);
            break;
          }
          case 122: {
            if (goldHammerReward_ == null) {
              goldHammerReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(goldHammerReward_);
            break;
          }
          case 128: {
            GoldOver = input.ReadBool();
            break;
          }
          case 138: {
            if (goldTotalFinalReward_ == null) {
              goldTotalFinalReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(goldTotalFinalReward_);
            break;
          }
          case 144: {
            StartTimestamp = input.ReadUInt64();
            break;
          }
          case 152: {
            EndTimestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EggInfo message type.</summary>
    public static class Types {
      public sealed class Egg : pb::IMessage {
        private static readonly pb::MessageParser<Egg> _parser = new pb::MessageParser<Egg>(() => new Egg());
        public static pb::MessageParser<Egg> Parser { get { return _parser; } }

        private bool win_;
        /// <summary>
        /// 是否是终点蛋
        /// </summary>
        public bool Win {
          get { return win_; }
          set {
            win_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item>();
        /// <summary>
        /// 蛋奖励: 空蛋是空list
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> Items {
          get { return items_; }
        }

        private bool open_;
        /// <summary>
        /// 是否打碎; 注意没有打碎的蛋items是空list，win是false
        /// </summary>
        public bool Open {
          get { return open_; }
          set {
            open_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Win != false) {
            output.WriteRawTag(8);
            output.WriteBool(Win);
          }
          items_.WriteTo(output, _repeated_items_codec);
          if (Open != false) {
            output.WriteRawTag(24);
            output.WriteBool(Open);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Win != false) {
            size += 1 + 1;
          }
          size += items_.CalculateSize(_repeated_items_codec);
          if (Open != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Win = input.ReadBool();
                break;
              }
              case 18: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 24: {
                Open = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class SGetEggInfo : pb::IMessage {
    private static readonly pb::MessageParser<SGetEggInfo> _parser = new pb::MessageParser<SGetEggInfo>(() => new SGetEggInfo());
    public static pb::MessageParser<SGetEggInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.EggInfo egg_;
    /// <summary>
    /// 蛋信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.EggInfo Egg {
      get { return egg_; }
      set {
        egg_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (egg_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Egg);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (egg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Egg);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (egg_ == null) {
              egg_ = new global::DragonU3DSDK.Network.API.ILProtocol.EggInfo();
            }
            input.ReadMessage(egg_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSmashEgg : pb::IMessage {
    private static readonly pb::MessageParser<CSmashEgg> _parser = new pb::MessageParser<CSmashEgg>(() => new CSmashEgg());
    public static pb::MessageParser<CSmashEgg> Parser { get { return _parser; } }

    private bool isGold_;
    /// <summary>
    /// 砸哪边
    /// </summary>
    public bool IsGold {
      get { return isGold_; }
      set {
        isGold_ = value;
      }
    }

    private uint index_;
    /// <summary>
    /// 砸哪个
    /// </summary>
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsGold != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsGold);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IsGold != false) {
        size += 1 + 1;
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsGold = input.ReadBool();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SSmashEgg : pb::IMessage {
    private static readonly pb::MessageParser<SSmashEgg> _parser = new pb::MessageParser<SSmashEgg>(() => new SSmashEgg());
    public static pb::MessageParser<SSmashEgg> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.EggInfo egg_;
    public global::DragonU3DSDK.Network.API.ILProtocol.EggInfo Egg {
      get { return egg_; }
      set {
        egg_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据, 注意：如果没解锁强行调用smash没有user_profile返回
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> rewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> Rewards {
      get { return rewards_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (egg_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Egg);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (egg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Egg);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (egg_ == null) {
              egg_ = new global::DragonU3DSDK.Network.API.ILProtocol.EggInfo();
            }
            input.ReadMessage(egg_);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 26: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 读商品信息
  /// </summary>
  public sealed class CGetEggPaymentItems : pb::IMessage {
    private static readonly pb::MessageParser<CGetEggPaymentItems> _parser = new pb::MessageParser<CGetEggPaymentItems>(() => new CGetEggPaymentItems());
    public static pb::MessageParser<CGetEggPaymentItems> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class EggShopItemConfig : pb::IMessage {
    private static readonly pb::MessageParser<EggShopItemConfig> _parser = new pb::MessageParser<EggShopItemConfig>(() => new EggShopItemConfig());
    public static pb::MessageParser<EggShopItemConfig> Parser { get { return _parser; } }

    private bool isGold_;
    /// <summary>
    /// 金银
    /// </summary>
    public bool IsGold {
      get { return isGold_; }
      set {
        isGold_ = value;
      }
    }

    private uint hammerUsed_;
    /// <summary>
    /// 用过几个锤子
    /// </summary>
    public uint HammerUsed {
      get { return hammerUsed_; }
      set {
        hammerUsed_ = value;
      }
    }

    private uint hammerCount_;
    /// <summary>
    /// 要买几个锤子
    /// </summary>
    public uint HammerCount {
      get { return hammerCount_; }
      set {
        hammerCount_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig item_;
    /// <summary>
    /// 通用商品信息字段
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsGold != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsGold);
      }
      if (HammerUsed != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HammerUsed);
      }
      if (HammerCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HammerCount);
      }
      if (item_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Item);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IsGold != false) {
        size += 1 + 1;
      }
      if (HammerUsed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HammerUsed);
      }
      if (HammerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HammerCount);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsGold = input.ReadBool();
            break;
          }
          case 16: {
            HammerUsed = input.ReadUInt32();
            break;
          }
          case 24: {
            HammerCount = input.ReadUInt32();
            break;
          }
          case 34: {
            if (item_ == null) {
              item_ = new global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  public sealed class SGetEggPaymentItems : pb::IMessage {
    private static readonly pb::MessageParser<SGetEggPaymentItems> _parser = new pb::MessageParser<SGetEggPaymentItems>(() => new SGetEggPaymentItems());
    public static pb::MessageParser<SGetEggPaymentItems> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EggShopItemConfig> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.EggShopItemConfig.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EggShopItemConfig> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EggShopItemConfig>();
    /// <summary>
    /// 一次api发放所有商品；客户端根据当前锤子状态选择合适商品展示
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EggShopItemConfig> Items {
      get { return items_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
