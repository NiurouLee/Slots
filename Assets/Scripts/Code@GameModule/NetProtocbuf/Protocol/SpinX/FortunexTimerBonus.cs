// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortunex_timer_bonus.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Enums
  /// <summary>
  /// TimerBonus几个阶段
  /// </summary>
  public enum TimerBonusStage {
    NoneBonus = 0,
    /// <summary>
    /// 倒计时奖励阶段
    /// </summary>
    HourlyBonus = 1,
    /// <summary>
    /// luckyWheelBonus阶段
    /// </summary>
    LuckyWheelBonus = 2,
    /// <summary>
    /// superWheelBonus阶段
    /// </summary>
    SuperWheelBonus = 3,
    /// <summary>
    /// goldenWheelBonus阶段
    /// </summary>
    GoldenWheelBonus = 4,
  }

  /// <summary>
  /// 各个wheel对应的id(hourly不适用)
  /// </summary>
  public enum TimerBonusWheelId {
    None = 0,
    Hourly = 1,
    LuckyWheel = 2,
    SuperWheel = 3,
    GoldenWheel = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  /// wheel种每个扇叶信息
  /// </summary>
  public sealed class WedgeInfo : pb::IMessage {
    private static readonly pb::MessageParser<WedgeInfo> _parser = new pb::MessageParser<WedgeInfo>(() => new WedgeInfo());
    public static pb::MessageParser<WedgeInfo> Parser { get { return _parser; } }

    private uint id_;
    /// <summary>
    /// wheel种每个扇叶id
    /// </summary>
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private uint type_;
    /// <summary>
    /// 扇叶类型
    /// </summary>
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private uint nextType_;
    /// <summary>
    /// 0-表示结束,其他表示同类型的其他wheel
    /// </summary>
    public uint NextType {
      get { return nextType_; }
      set {
        nextType_ = value;
      }
    }

    private uint weight_;
    /// <summary>
    /// 权重
    /// </summary>
    public uint Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    private string rewardType_ = "";
    /// <summary>
    /// 奖励类型
    /// </summary>
    public string RewardType {
      get { return rewardType_; }
      set {
        rewardType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item item_;
    /// <summary>
    /// 扇叶的奖励内容(非功能性奖励才有此字段)
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
      if (NextType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NextType);
      }
      if (Weight != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Weight);
      }
      if (RewardType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RewardType);
      }
      if (item_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Item);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (NextType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextType);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weight);
      }
      if (RewardType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RewardType);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
          case 24: {
            NextType = input.ReadUInt32();
            break;
          }
          case 32: {
            Weight = input.ReadUInt32();
            break;
          }
          case 42: {
            RewardType = input.ReadString();
            break;
          }
          case 50: {
            if (item_ == null) {
              item_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 小时奖励内容
  /// </summary>
  public sealed class HourlyBonus : pb::IMessage {
    private static readonly pb::MessageParser<HourlyBonus> _parser = new pb::MessageParser<HourlyBonus>(() => new HourlyBonus());
    public static pb::MessageParser<HourlyBonus> Parser { get { return _parser; } }

    private uint hourlyCurrent_;
    /// <summary>
    /// 当前进度
    /// </summary>
    public uint HourlyCurrent {
      get { return hourlyCurrent_; }
      set {
        hourlyCurrent_ = value;
      }
    }

    private uint hourlyTarget_;
    /// <summary>
    /// 总进度
    /// </summary>
    public uint HourlyTarget {
      get { return hourlyTarget_; }
      set {
        hourlyTarget_ = value;
      }
    }

    private bool awardStatus_;
    /// <summary>
    /// 是否可以领奖(当current到达target,如果status为true则表示可以进入luckyWheelBonus阶段了)
    /// </summary>
    public bool AwardStatus {
      get { return awardStatus_; }
      set {
        awardStatus_ = value;
      }
    }

    private uint awardCountdown_;
    /// <summary>
    /// 领奖倒计时(秒)
    /// </summary>
    public uint AwardCountdown {
      get { return awardCountdown_; }
      set {
        awardCountdown_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item item_;
    /// <summary>
    /// 当前进度的奖励
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (HourlyCurrent != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HourlyCurrent);
      }
      if (HourlyTarget != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HourlyTarget);
      }
      if (AwardStatus != false) {
        output.WriteRawTag(24);
        output.WriteBool(AwardStatus);
      }
      if (AwardCountdown != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AwardCountdown);
      }
      if (item_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Item);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (HourlyCurrent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HourlyCurrent);
      }
      if (HourlyTarget != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HourlyTarget);
      }
      if (AwardStatus != false) {
        size += 1 + 1;
      }
      if (AwardCountdown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardCountdown);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HourlyCurrent = input.ReadUInt32();
            break;
          }
          case 16: {
            HourlyTarget = input.ReadUInt32();
            break;
          }
          case 24: {
            AwardStatus = input.ReadBool();
            break;
          }
          case 32: {
            AwardCountdown = input.ReadUInt32();
            break;
          }
          case 42: {
            if (item_ == null) {
              item_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// wheelBonus内容
  /// </summary>
  public sealed class WheelBonusInfo : pb::IMessage {
    private static readonly pb::MessageParser<WheelBonusInfo> _parser = new pb::MessageParser<WheelBonusInfo>(() => new WheelBonusInfo());
    public static pb::MessageParser<WheelBonusInfo> Parser { get { return _parser; } }

    private uint wheelCurrent_;
    /// <summary>
    /// wheel的完成进度
    /// </summary>
    public uint WheelCurrent {
      get { return wheelCurrent_; }
      set {
        wheelCurrent_ = value;
      }
    }

    private uint wheelTarget_;
    /// <summary>
    /// wheel的目标进度(达到目标进度进入superWheel)
    /// </summary>
    public uint WheelTarget {
      get { return wheelTarget_; }
      set {
        wheelTarget_ = value;
      }
    }

    private bool awardStatus_;
    /// <summary>
    /// 是否可以领奖
    /// </summary>
    public bool AwardStatus {
      get { return awardStatus_; }
      set {
        awardStatus_ = value;
      }
    }

    private uint awardCountdown_;
    /// <summary>
    /// 领奖倒计时，单位秒
    /// </summary>
    public uint AwardCountdown {
      get { return awardCountdown_; }
      set {
        awardCountdown_ = value;
      }
    }

    private ulong maxCoinNormalWheel_;
    /// <summary>
    /// 单层转盘最大奖励值
    /// </summary>
    public ulong MaxCoinNormalWheel {
      get { return maxCoinNormalWheel_; }
      set {
        maxCoinNormalWheel_ = value;
      }
    }

    private ulong maxCoinSuperWheel_;
    /// <summary>
    ///三层转盘最大奖励值
    /// </summary>
    public ulong MaxCoinSuperWheel {
      get { return maxCoinSuperWheel_; }
      set {
        maxCoinSuperWheel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (WheelCurrent != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(WheelCurrent);
      }
      if (WheelTarget != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(WheelTarget);
      }
      if (AwardStatus != false) {
        output.WriteRawTag(24);
        output.WriteBool(AwardStatus);
      }
      if (AwardCountdown != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AwardCountdown);
      }
      if (MaxCoinNormalWheel != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(MaxCoinNormalWheel);
      }
      if (MaxCoinSuperWheel != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(MaxCoinSuperWheel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (WheelCurrent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WheelCurrent);
      }
      if (WheelTarget != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WheelTarget);
      }
      if (AwardStatus != false) {
        size += 1 + 1;
      }
      if (AwardCountdown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwardCountdown);
      }
      if (MaxCoinNormalWheel != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxCoinNormalWheel);
      }
      if (MaxCoinSuperWheel != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxCoinSuperWheel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WheelCurrent = input.ReadUInt32();
            break;
          }
          case 16: {
            WheelTarget = input.ReadUInt32();
            break;
          }
          case 24: {
            AwardStatus = input.ReadBool();
            break;
          }
          case 32: {
            AwardCountdown = input.ReadUInt32();
            break;
          }
          case 40: {
            MaxCoinNormalWheel = input.ReadUInt64();
            break;
          }
          case 48: {
            MaxCoinSuperWheel = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// wheel通用定义
  /// </summary>
  public sealed class CommonWheel : pb::IMessage {
    private static readonly pb::MessageParser<CommonWheel> _parser = new pb::MessageParser<CommonWheel>(() => new CommonWheel());
    public static pb::MessageParser<CommonWheel> Parser { get { return _parser; } }

    private string type_ = "";
    /// <summary>
    /// wheel类型(lucklyWheel/superWheel/goldenWheel)
    /// </summary>
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint id_;
    /// <summary>
    /// 对应各个类型wheel的id信息
    /// </summary>
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private uint wedgeType_;
    /// <summary>
    /// 对应的wheel扇叶类型
    /// </summary>
    public uint WedgeType {
      get { return wedgeType_; }
      set {
        wedgeType_ = value;
      }
    }

    private uint totalWeight_;
    /// <summary>
    /// wedge的权重之和
    /// </summary>
    public uint TotalWeight {
      get { return totalWeight_; }
      set {
        totalWeight_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.WedgeInfo> _repeated_wedge_codec
        = pb::FieldCodec.ForMessage(42, global::DragonU3DSDK.Network.API.ILProtocol.WedgeInfo.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.WedgeInfo> wedge_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.WedgeInfo>();
    /// <summary>
    /// 整个wheel信息(lucklyWheel/superWheel/goldenWheel通用)
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.WedgeInfo> Wedge {
      get { return wedge_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (WedgeType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(WedgeType);
      }
      if (TotalWeight != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TotalWeight);
      }
      wedge_.WriteTo(output, _repeated_wedge_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (WedgeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WedgeType);
      }
      if (TotalWeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalWeight);
      }
      size += wedge_.CalculateSize(_repeated_wedge_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 24: {
            WedgeType = input.ReadUInt32();
            break;
          }
          case 32: {
            TotalWeight = input.ReadUInt32();
            break;
          }
          case 42: {
            wedge_.AddEntriesFrom(input, _repeated_wedge_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class HourlyTimerBonusInfo : pb::IMessage {
    private static readonly pb::MessageParser<HourlyTimerBonusInfo> _parser = new pb::MessageParser<HourlyTimerBonusInfo>(() => new HourlyTimerBonusInfo());
    public static pb::MessageParser<HourlyTimerBonusInfo> Parser { get { return _parser; } }

    private ulong timerBonusMultiplePercentage_;
    /// <summary>
    ///timerbonus spin buff的倍数百分数 如100表是原来的100% 150表原来的150%。最低为100
    /// </summary>
    public ulong TimerBonusMultiplePercentage {
      get { return timerBonusMultiplePercentage_; }
      set {
        timerBonusMultiplePercentage_ = value;
      }
    }

    private ulong coins_;
    /// <summary>
    ///当前金币
    /// </summary>
    public ulong Coins {
      get { return coins_; }
      set {
        coins_ = value;
      }
    }

    private ulong coinsMax_;
    /// <summary>
    ///最大金币
    /// </summary>
    public ulong CoinsMax {
      get { return coinsMax_; }
      set {
        coinsMax_ = value;
      }
    }

    private ulong incSpeedPerSeconds_;
    /// <summary>
    /// 金币增长速度
    /// </summary>
    public ulong IncSpeedPerSeconds {
      get { return incSpeedPerSeconds_; }
      set {
        incSpeedPerSeconds_ = value;
      }
    }

    private ulong refreshCountDown_;
    /// <summary>
    ///刷新倒计时，单位秒
    /// </summary>
    public ulong RefreshCountDown {
      get { return refreshCountDown_; }
      set {
        refreshCountDown_ = value;
      }
    }

    private ulong spinBuffLevel_;
    /// <summary>
    /// 当前timerbonus spin buff的等级
    /// </summary>
    public ulong SpinBuffLevel {
      get { return spinBuffLevel_; }
      set {
        spinBuffLevel_ = value;
      }
    }

    private static readonly pb::FieldCodec<ulong> _repeated_timerBonusMultiplePercentageList_codec
        = pb::FieldCodec.ForUInt64(58);
    private readonly pbc::RepeatedField<ulong> timerBonusMultiplePercentageList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// spinBuff等级-加成百分比列表 等级1的取第零个
    /// </summary>
    public pbc::RepeatedField<ulong> TimerBonusMultiplePercentageList {
      get { return timerBonusMultiplePercentageList_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TimerBonusMultiplePercentage != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TimerBonusMultiplePercentage);
      }
      if (Coins != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Coins);
      }
      if (CoinsMax != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CoinsMax);
      }
      if (IncSpeedPerSeconds != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(IncSpeedPerSeconds);
      }
      if (RefreshCountDown != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(RefreshCountDown);
      }
      if (SpinBuffLevel != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SpinBuffLevel);
      }
      timerBonusMultiplePercentageList_.WriteTo(output, _repeated_timerBonusMultiplePercentageList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (TimerBonusMultiplePercentage != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimerBonusMultiplePercentage);
      }
      if (Coins != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Coins);
      }
      if (CoinsMax != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CoinsMax);
      }
      if (IncSpeedPerSeconds != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IncSpeedPerSeconds);
      }
      if (RefreshCountDown != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RefreshCountDown);
      }
      if (SpinBuffLevel != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SpinBuffLevel);
      }
      size += timerBonusMultiplePercentageList_.CalculateSize(_repeated_timerBonusMultiplePercentageList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimerBonusMultiplePercentage = input.ReadUInt64();
            break;
          }
          case 16: {
            Coins = input.ReadUInt64();
            break;
          }
          case 24: {
            CoinsMax = input.ReadUInt64();
            break;
          }
          case 32: {
            IncSpeedPerSeconds = input.ReadUInt64();
            break;
          }
          case 40: {
            RefreshCountDown = input.ReadUInt64();
            break;
          }
          case 48: {
            SpinBuffLevel = input.ReadUInt64();
            break;
          }
          case 58:
          case 56: {
            timerBonusMultiplePercentageList_.AddEntriesFrom(input, _repeated_timerBonusMultiplePercentageList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// timerbonusbuff，在CGetBuff；spin的systemContentList中返回
  /// </summary>
  public sealed class BuffTimerbonusSpin : pb::IMessage {
    private static readonly pb::MessageParser<BuffTimerbonusSpin> _parser = new pb::MessageParser<BuffTimerbonusSpin>(() => new BuffTimerbonusSpin());
    public static pb::MessageParser<BuffTimerbonusSpin> Parser { get { return _parser; } }

    private ulong spinBuffLevel_;
    /// <summary>
    /// 当前timerbonus spin buff的等级
    /// </summary>
    public ulong SpinBuffLevel {
      get { return spinBuffLevel_; }
      set {
        spinBuffLevel_ = value;
      }
    }

    private ulong exp_;
    /// <summary>
    ///当前等级基础上的经验，取值0-99
    /// </summary>
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    private ulong timerBonusMultiplePercentage_;
    /// <summary>
    ///timerbonus spin buff的倍数百分数 如100表是原来的100% 150表原来的150%。最低为100
    /// </summary>
    public ulong TimerBonusMultiplePercentage {
      get { return timerBonusMultiplePercentage_; }
      set {
        timerBonusMultiplePercentage_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SpinBuffLevel != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SpinBuffLevel);
      }
      if (Exp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Exp);
      }
      if (TimerBonusMultiplePercentage != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TimerBonusMultiplePercentage);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SpinBuffLevel != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SpinBuffLevel);
      }
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      if (TimerBonusMultiplePercentage != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimerBonusMultiplePercentage);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SpinBuffLevel = input.ReadUInt64();
            break;
          }
          case 16: {
            Exp = input.ReadUInt64();
            break;
          }
          case 24: {
            TimerBonusMultiplePercentage = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 推送消息：hourlyBonus金币填充速度变化
  /// </summary>
  public sealed class FortunexNotifyficationHourlyBonus : pb::IMessage {
    private static readonly pb::MessageParser<FortunexNotifyficationHourlyBonus> _parser = new pb::MessageParser<FortunexNotifyficationHourlyBonus>(() => new FortunexNotifyficationHourlyBonus());
    public static pb::MessageParser<FortunexNotifyficationHourlyBonus> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.HourlyTimerBonusInfo hourlyTimerBonusInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.HourlyTimerBonusInfo HourlyTimerBonusInfo {
      get { return hourlyTimerBonusInfo_; }
      set {
        hourlyTimerBonusInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (hourlyTimerBonusInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HourlyTimerBonusInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (hourlyTimerBonusInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HourlyTimerBonusInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (hourlyTimerBonusInfo_ == null) {
              hourlyTimerBonusInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.HourlyTimerBonusInfo();
            }
            input.ReadMessage(hourlyTimerBonusInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// timerBonus基本信息
  /// </summary>
  public sealed class TimerBonusInfo : pb::IMessage {
    private static readonly pb::MessageParser<TimerBonusInfo> _parser = new pb::MessageParser<TimerBonusInfo>(() => new TimerBonusInfo());
    public static pb::MessageParser<TimerBonusInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusStage bonusStage_ = 0;
    /// <summary>
    /// 该值不会等于HOURLY_BONUS
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusStage BonusStage {
      get { return bonusStage_; }
      set {
        bonusStage_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.HourlyBonus hourlyBonus_;
    /// <summary>
    /// 该字段废弃，用hourly_timer_bonus_info
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.HourlyBonus HourlyBonus {
      get { return hourlyBonus_; }
      set {
        hourlyBonus_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.WheelBonusInfo wheelBonus_;
    public global::DragonU3DSDK.Network.API.ILProtocol.WheelBonusInfo WheelBonus {
      get { return wheelBonus_; }
      set {
        wheelBonus_ = value;
      }
    }

    private ulong hourlyBonusInterval_;
    /// <summary>
    /// hourlybonus间隔时间 单位分
    /// </summary>
    public ulong HourlyBonusInterval {
      get { return hourlyBonusInterval_; }
      set {
        hourlyBonusInterval_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.HourlyTimerBonusInfo hourlyTimerBonusInfo_;
    /// <summary>
    /// hourlyBonus信息，增长速度的变化通过FortunexNotifyficationHourlyBonus推送消息通知
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.HourlyTimerBonusInfo HourlyTimerBonusInfo {
      get { return hourlyTimerBonusInfo_; }
      set {
        hourlyTimerBonusInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BonusStage != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BonusStage);
      }
      if (hourlyBonus_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HourlyBonus);
      }
      if (wheelBonus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WheelBonus);
      }
      if (HourlyBonusInterval != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(HourlyBonusInterval);
      }
      if (hourlyTimerBonusInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(HourlyTimerBonusInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BonusStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BonusStage);
      }
      if (hourlyBonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HourlyBonus);
      }
      if (wheelBonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WheelBonus);
      }
      if (HourlyBonusInterval != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HourlyBonusInterval);
      }
      if (hourlyTimerBonusInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HourlyTimerBonusInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bonusStage_ = (global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusStage) input.ReadEnum();
            break;
          }
          case 18: {
            if (hourlyBonus_ == null) {
              hourlyBonus_ = new global::DragonU3DSDK.Network.API.ILProtocol.HourlyBonus();
            }
            input.ReadMessage(hourlyBonus_);
            break;
          }
          case 26: {
            if (wheelBonus_ == null) {
              wheelBonus_ = new global::DragonU3DSDK.Network.API.ILProtocol.WheelBonusInfo();
            }
            input.ReadMessage(wheelBonus_);
            break;
          }
          case 32: {
            HourlyBonusInterval = input.ReadUInt64();
            break;
          }
          case 42: {
            if (hourlyTimerBonusInfo_ == null) {
              hourlyTimerBonusInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.HourlyTimerBonusInfo();
            }
            input.ReadMessage(hourlyTimerBonusInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// spin结果定义
  /// </summary>
  public sealed class SpinWheelResult : pb::IMessage {
    private static readonly pb::MessageParser<SpinWheelResult> _parser = new pb::MessageParser<SpinWheelResult>(() => new SpinWheelResult());
    public static pb::MessageParser<SpinWheelResult> Parser { get { return _parser; } }

    private uint wheelId_;
    public uint WheelId {
      get { return wheelId_; }
      set {
        wheelId_ = value;
      }
    }

    private uint wedgeType_;
    public uint WedgeType {
      get { return wedgeType_; }
      set {
        wedgeType_ = value;
      }
    }

    private uint odds_;
    /// <summary>
    /// multiple
    /// </summary>
    public uint Odds {
      get { return odds_; }
      set {
        odds_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Item> _repeated_item_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Item.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> item_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item>();
    /// <summary>
    /// 累积的奖励(coin/emerald,同类型的进行累积)
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> Item {
      get { return item_; }
    }

    private static readonly pb::FieldCodec<uint> _repeated_hitWedgeId_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> hitWedgeId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 每次命中的wedge
    /// </summary>
    public pbc::RepeatedField<uint> HitWedgeId {
      get { return hitWedgeId_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (WheelId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(WheelId);
      }
      if (WedgeType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(WedgeType);
      }
      if (Odds != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Odds);
      }
      item_.WriteTo(output, _repeated_item_codec);
      hitWedgeId_.WriteTo(output, _repeated_hitWedgeId_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (WheelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WheelId);
      }
      if (WedgeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WedgeType);
      }
      if (Odds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Odds);
      }
      size += item_.CalculateSize(_repeated_item_codec);
      size += hitWedgeId_.CalculateSize(_repeated_hitWedgeId_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WheelId = input.ReadUInt32();
            break;
          }
          case 16: {
            WedgeType = input.ReadUInt32();
            break;
          }
          case 24: {
            Odds = input.ReadUInt32();
            break;
          }
          case 34: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
          case 42:
          case 40: {
            hitWedgeId_.AddEntriesFrom(input, _repeated_hitWedgeId_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端拉取timerBonus内容
  /// </summary>
  public sealed class CGetTimerBonus : pb::IMessage {
    private static readonly pb::MessageParser<CGetTimerBonus> _parser = new pb::MessageParser<CGetTimerBonus>(() => new CGetTimerBonus());
    public static pb::MessageParser<CGetTimerBonus> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 服务器返回timerBonsu内容
  /// </summary>
  public sealed class SGetTimerBonus : pb::IMessage {
    private static readonly pb::MessageParser<SGetTimerBonus> _parser = new pb::MessageParser<SGetTimerBonus>(() => new SGetTimerBonus());
    public static pb::MessageParser<SGetTimerBonus> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusInfo timerBonusInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusInfo TimerBonusInfo {
      get { return timerBonusInfo_; }
      set {
        timerBonusInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (timerBonusInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TimerBonusInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (timerBonusInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimerBonusInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (timerBonusInfo_ == null) {
              timerBonusInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusInfo();
            }
            input.ReadMessage(timerBonusInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端拉取wheel内容
  /// </summary>
  public sealed class CGetWheelBonus : pb::IMessage {
    private static readonly pb::MessageParser<CGetWheelBonus> _parser = new pb::MessageParser<CGetWheelBonus>(() => new CGetWheelBonus());
    public static pb::MessageParser<CGetWheelBonus> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 服务器返回wheel的内容
  /// </summary>
  public sealed class SGetWheelBonus : pb::IMessage {
    private static readonly pb::MessageParser<SGetWheelBonus> _parser = new pb::MessageParser<SGetWheelBonus>(() => new SGetWheelBonus());
    public static pb::MessageParser<SGetWheelBonus> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusStage bonusStage_ = 0;
    public global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusStage BonusStage {
      get { return bonusStage_; }
      set {
        bonusStage_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel> _repeated_wheelBonus_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel> wheelBonus_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel> WheelBonus {
      get { return wheelBonus_; }
    }

    private float spinBuffOdds_;
    /// <summary>
    /// ShopItemConfig pay_item = 3;         //
    /// 计费点内容(goldenWheelBonus才有此内容)
    /// </summary>
    public float SpinBuffOdds {
      get { return spinBuffOdds_; }
      set {
        spinBuffOdds_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BonusStage != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BonusStage);
      }
      wheelBonus_.WriteTo(output, _repeated_wheelBonus_codec);
      if (SpinBuffOdds != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SpinBuffOdds);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BonusStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BonusStage);
      }
      size += wheelBonus_.CalculateSize(_repeated_wheelBonus_codec);
      if (SpinBuffOdds != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            bonusStage_ = (global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusStage) input.ReadEnum();
            break;
          }
          case 18: {
            wheelBonus_.AddEntriesFrom(input, _repeated_wheelBonus_codec);
            break;
          }
          case 29: {
            SpinBuffOdds = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端拉取goldenWheelBonus内容
  /// </summary>
  public sealed class CGetGoldenWheelBonus : pb::IMessage {
    private static readonly pb::MessageParser<CGetGoldenWheelBonus> _parser = new pb::MessageParser<CGetGoldenWheelBonus>(() => new CGetGoldenWheelBonus());
    public static pb::MessageParser<CGetGoldenWheelBonus> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 服务器返回goldenWheelBonus内容
  /// </summary>
  public sealed class SGetGoldenWheelBonus : pb::IMessage {
    private static readonly pb::MessageParser<SGetGoldenWheelBonus> _parser = new pb::MessageParser<SGetGoldenWheelBonus>(() => new SGetGoldenWheelBonus());
    public static pb::MessageParser<SGetGoldenWheelBonus> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel> _repeated_wheelBonus_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel> wheelBonus_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel> WheelBonus {
      get { return wheelBonus_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig payItem_;
    /// <summary>
    /// 计费点内容(goldenWheelBonus才有此内容)
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig PayItem {
      get { return payItem_; }
      set {
        payItem_ = value;
      }
    }

    private ulong godenOdds_;
    /// <summary>
    /// godenOddsList中的某项
    /// </summary>
    public ulong GodenOdds {
      get { return godenOdds_; }
      set {
        godenOdds_ = value;
      }
    }

    private float spinBuffOdds_;
    /// <summary>
    /// spinBuff加成对转盘的加成倍数 如 1.2
    /// </summary>
    public float SpinBuffOdds {
      get { return spinBuffOdds_; }
      set {
        spinBuffOdds_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      wheelBonus_.WriteTo(output, _repeated_wheelBonus_codec);
      if (payItem_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PayItem);
      }
      if (GodenOdds != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GodenOdds);
      }
      if (SpinBuffOdds != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SpinBuffOdds);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += wheelBonus_.CalculateSize(_repeated_wheelBonus_codec);
      if (payItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PayItem);
      }
      if (GodenOdds != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GodenOdds);
      }
      if (SpinBuffOdds != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            wheelBonus_.AddEntriesFrom(input, _repeated_wheelBonus_codec);
            break;
          }
          case 18: {
            if (payItem_ == null) {
              payItem_ = new global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig();
            }
            input.ReadMessage(payItem_);
            break;
          }
          case 24: {
            GodenOdds = input.ReadUInt64();
            break;
          }
          case 37: {
            SpinBuffOdds = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端领取hourlyBonus奖励
  /// </summary>
  public sealed class CGetHourlyBonus : pb::IMessage {
    private static readonly pb::MessageParser<CGetHourlyBonus> _parser = new pb::MessageParser<CGetHourlyBonus>(() => new CGetHourlyBonus());
    public static pb::MessageParser<CGetHourlyBonus> Parser { get { return _parser; } }

    private bool isAdWatched_;
    /// <summary>
    ///是否观看了广告 
    /// </summary>
    public bool IsAdWatched {
      get { return isAdWatched_; }
      set {
        isAdWatched_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsAdWatched != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsAdWatched);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IsAdWatched != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsAdWatched = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器返回hourlyBonus奖励
  /// </summary>
  public sealed class SGetHourlyBonus : pb::IMessage {
    private static readonly pb::MessageParser<SGetHourlyBonus> _parser = new pb::MessageParser<SGetHourlyBonus>(() => new SGetHourlyBonus());
    public static pb::MessageParser<SGetHourlyBonus> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item item_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusInfo timerBonusInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusInfo TimerBonusInfo {
      get { return timerBonusInfo_; }
      set {
        timerBonusInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
      if (timerBonusInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TimerBonusInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      if (timerBonusInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimerBonusInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (item_ == null) {
              item_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item();
            }
            input.ReadMessage(item_);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 26: {
            if (timerBonusInfo_ == null) {
              timerBonusInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusInfo();
            }
            input.ReadMessage(timerBonusInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端请求wheel spin
  /// </summary>
  public sealed class CSpinWheel : pb::IMessage {
    private static readonly pb::MessageParser<CSpinWheel> _parser = new pb::MessageParser<CSpinWheel>(() => new CSpinWheel());
    public static pb::MessageParser<CSpinWheel> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusWheelId wheelId_ = 0;
    /// <summary>
    /// wheel的id
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusWheelId WheelId {
      get { return wheelId_; }
      set {
        wheelId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (WheelId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) WheelId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (WheelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WheelId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            wheelId_ = (global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusWheelId) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器返回spin结果
  /// </summary>
  public sealed class SSpinWheel : pb::IMessage {
    private static readonly pb::MessageParser<SSpinWheel> _parser = new pb::MessageParser<SSpinWheel>(() => new SSpinWheel());
    public static pb::MessageParser<SSpinWheel> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Item> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Item.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> item_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item>();
    /// <summary>
    /// 本次wheel spin奖励内容(如果有多个wheel则会累积到一起)
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> Item {
      get { return item_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SpinWheelResult> _repeated_result_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.SpinWheelResult.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SpinWheelResult> result_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SpinWheelResult>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SpinWheelResult> Result {
      get { return result_; }
    }

    private ulong userBuffGodenOdds_;
    /// <summary>
    /// 用户buff引起的金币加成
    /// </summary>
    public ulong UserBuffGodenOdds {
      get { return userBuffGodenOdds_; }
      set {
        userBuffGodenOdds_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
      result_.WriteTo(output, _repeated_result_codec);
      if (UserBuffGodenOdds != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(UserBuffGodenOdds);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      size += result_.CalculateSize(_repeated_result_codec);
      if (UserBuffGodenOdds != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserBuffGodenOdds);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
          case 18: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
          case 32: {
            UserBuffGodenOdds = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端领取wheelBonus奖励
  /// </summary>
  public sealed class CCollectWheelBonus : pb::IMessage {
    private static readonly pb::MessageParser<CCollectWheelBonus> _parser = new pb::MessageParser<CCollectWheelBonus>(() => new CCollectWheelBonus());
    public static pb::MessageParser<CCollectWheelBonus> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 服务器返回wheelBonus奖励
  /// </summary>
  public sealed class SCollectWheelBonus : pb::IMessage {
    private static readonly pb::MessageParser<SCollectWheelBonus> _parser = new pb::MessageParser<SCollectWheelBonus>(() => new SCollectWheelBonus());
    public static pb::MessageParser<SCollectWheelBonus> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Item> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Item.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> item_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> Item {
      get { return item_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusInfo timerBonusInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusInfo TimerBonusInfo {
      get { return timerBonusInfo_; }
      set {
        timerBonusInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
      if (timerBonusInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TimerBonusInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      if (timerBonusInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimerBonusInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 26: {
            if (timerBonusInfo_ == null) {
              timerBonusInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusInfo();
            }
            input.ReadMessage(timerBonusInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端发起一次不记进度的wheelbonus转盘，仅用于发奖；
  /// 转盘信息，转盘结果及奖品，一次性下发；
  /// </summary>
  public sealed class CSpinWheelBonusWithNoRecord : pb::IMessage {
    private static readonly pb::MessageParser<CSpinWheelBonusWithNoRecord> _parser = new pb::MessageParser<CSpinWheelBonusWithNoRecord>(() => new CSpinWheelBonusWithNoRecord());
    public static pb::MessageParser<CSpinWheelBonusWithNoRecord> Parser { get { return _parser; } }

    private ulong placeId_;
    public ulong PlaceId {
      get { return placeId_; }
      set {
        placeId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlaceId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlaceId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PlaceId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlaceId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlaceId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class SSpinWheelBonusWithNoRecord : pb::IMessage {
    private static readonly pb::MessageParser<SSpinWheelBonusWithNoRecord> _parser = new pb::MessageParser<SSpinWheelBonusWithNoRecord>(() => new SSpinWheelBonusWithNoRecord());
    public static pb::MessageParser<SSpinWheelBonusWithNoRecord> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel> _repeated_wheelBonus_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel> wheelBonus_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CommonWheel> WheelBonus {
      get { return wheelBonus_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Item> _repeated_item_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Item.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> item_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item>();
    /// <summary>
    /// 本次wheel spin奖励内容
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> Item {
      get { return item_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.SpinWheelResult result_;
    public global::DragonU3DSDK.Network.API.ILProtocol.SpinWheelResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private ulong userBuffGodenOdds_;
    /// <summary>
    /// 用户buff引起的金币倍数加成 1表未加成 >1表有加成，如2表金币翻倍
    /// </summary>
    public ulong UserBuffGodenOdds {
      get { return userBuffGodenOdds_; }
      set {
        userBuffGodenOdds_ = value;
      }
    }

    private float spinBuffOdds_;
    /// <summary>
    /// spinBuff加成对转盘的加成倍数 如 1.2
    /// </summary>
    public float SpinBuffOdds {
      get { return spinBuffOdds_; }
      set {
        spinBuffOdds_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      wheelBonus_.WriteTo(output, _repeated_wheelBonus_codec);
      item_.WriteTo(output, _repeated_item_codec);
      if (result_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Result);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserProfile);
      }
      if (UserBuffGodenOdds != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(UserBuffGodenOdds);
      }
      if (SpinBuffOdds != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(SpinBuffOdds);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += wheelBonus_.CalculateSize(_repeated_wheelBonus_codec);
      size += item_.CalculateSize(_repeated_item_codec);
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      if (UserBuffGodenOdds != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserBuffGodenOdds);
      }
      if (SpinBuffOdds != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            wheelBonus_.AddEntriesFrom(input, _repeated_wheelBonus_codec);
            break;
          }
          case 18: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
          case 26: {
            if (result_ == null) {
              result_ = new global::DragonU3DSDK.Network.API.ILProtocol.SpinWheelResult();
            }
            input.ReadMessage(result_);
            break;
          }
          case 34: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 40: {
            UserBuffGodenOdds = input.ReadUInt64();
            break;
          }
          case 53: {
            SpinBuffOdds = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通知观看了转盘内的广告
  /// </summary>
  public sealed class CNotifyAdWatchedForWheel : pb::IMessage {
    private static readonly pb::MessageParser<CNotifyAdWatchedForWheel> _parser = new pb::MessageParser<CNotifyAdWatchedForWheel>(() => new CNotifyAdWatchedForWheel());
    public static pb::MessageParser<CNotifyAdWatchedForWheel> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SNotifyAdWatchedForWheel : pb::IMessage {
    private static readonly pb::MessageParser<SNotifyAdWatchedForWheel> _parser = new pb::MessageParser<SNotifyAdWatchedForWheel>(() => new SNotifyAdWatchedForWheel());
    public static pb::MessageParser<SNotifyAdWatchedForWheel> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusInfo timerBonusInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusInfo TimerBonusInfo {
      get { return timerBonusInfo_; }
      set {
        timerBonusInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (timerBonusInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TimerBonusInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (timerBonusInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimerBonusInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (timerBonusInfo_ == null) {
              timerBonusInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.TimerBonusInfo();
            }
            input.ReadMessage(timerBonusInfo_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
