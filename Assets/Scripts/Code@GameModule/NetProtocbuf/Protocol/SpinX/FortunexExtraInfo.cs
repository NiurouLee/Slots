// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortunex_extra_info.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Messages
  /// <summary>
  ///================= WinsOPlenty ====================================
  /// </summary>
  public sealed class WinsOPlentyGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<WinsOPlentyGameResultExtraInfo> _parser = new pb::MessageParser<WinsOPlentyGameResultExtraInfo>(() => new WinsOPlentyGameResultExtraInfo());
    public static pb::MessageParser<WinsOPlentyGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlentyGameResultExtraInfo.Types.WildTitle>.Codec _map_wildTitleMap_codec
        = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlentyGameResultExtraInfo.Types.WildTitle>.Codec(pb::FieldCodec.ForUInt64(8), pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlentyGameResultExtraInfo.Types.WildTitle.Parser), 10);
    private readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlentyGameResultExtraInfo.Types.WildTitle> wildTitleMap_ = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlentyGameResultExtraInfo.Types.WildTitle>();
    /// <summary>
    /// 小辣椒信息
    /// </summary>
    public pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlentyGameResultExtraInfo.Types.WildTitle> WildTitleMap {
      get { return wildTitleMap_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlentyGameResultExtraInfo.Types.WheelBonusInfo wheelBonusInfo_;
    /// <summary>
    /// 轮盘信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlentyGameResultExtraInfo.Types.WheelBonusInfo WheelBonusInfo {
      get { return wheelBonusInfo_; }
      set {
        wheelBonusInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      wildTitleMap_.WriteTo(output, _map_wildTitleMap_codec);
      if (wheelBonusInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WheelBonusInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += wildTitleMap_.CalculateSize(_map_wildTitleMap_codec);
      if (wheelBonusInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WheelBonusInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            wildTitleMap_.AddEntriesFrom(input, _map_wildTitleMap_codec);
            break;
          }
          case 18: {
            if (wheelBonusInfo_ == null) {
              wheelBonusInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlentyGameResultExtraInfo.Types.WheelBonusInfo();
            }
            input.ReadMessage(wheelBonusInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WinsOPlentyGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class WildTitle : pb::IMessage {
        private static readonly pb::MessageParser<WildTitle> _parser = new pb::MessageParser<WildTitle>(() => new WildTitle());
        public static pb::MessageParser<WildTitle> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<uint> _repeated_lastTitle_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> lastTitle_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 上一轮每一列小辣椒数量
        /// </summary>
        public pbc::RepeatedField<uint> LastTitle {
          get { return lastTitle_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_currentTitle_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> currentTitle_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 本轮每一列小辣椒数量
        /// </summary>
        public pbc::RepeatedField<uint> CurrentTitle {
          get { return currentTitle_; }
        }

        private static readonly pb::FieldCodec<bool> _repeated_activeTitle_codec
            = pb::FieldCodec.ForBool(26);
        private readonly pbc::RepeatedField<bool> activeTitle_ = new pbc::RepeatedField<bool>();
        /// <summary>
        /// 本轮每一列是否是sticky wild模式
        /// </summary>
        public pbc::RepeatedField<bool> ActiveTitle {
          get { return activeTitle_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          lastTitle_.WriteTo(output, _repeated_lastTitle_codec);
          currentTitle_.WriteTo(output, _repeated_currentTitle_codec);
          activeTitle_.WriteTo(output, _repeated_activeTitle_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += lastTitle_.CalculateSize(_repeated_lastTitle_codec);
          size += currentTitle_.CalculateSize(_repeated_currentTitle_codec);
          size += activeTitle_.CalculateSize(_repeated_activeTitle_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 8: {
                lastTitle_.AddEntriesFrom(input, _repeated_lastTitle_codec);
                break;
              }
              case 18:
              case 16: {
                currentTitle_.AddEntriesFrom(input, _repeated_currentTitle_codec);
                break;
              }
              case 26:
              case 24: {
                activeTitle_.AddEntriesFrom(input, _repeated_activeTitle_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class WheelBonusInfo : pb::IMessage {
        private static readonly pb::MessageParser<WheelBonusInfo> _parser = new pb::MessageParser<WheelBonusInfo>(() => new WheelBonusInfo());
        public static pb::MessageParser<WheelBonusInfo> Parser { get { return _parser; } }

        private bool chosen_;
        /// <summary>
        /// 轮盘是否选过
        /// </summary>
        public bool Chosen {
          get { return chosen_; }
          set {
            chosen_ = value;
          }
        }

        private int choice_;
        /// <summary>
        /// 轮盘结果
        /// </summary>
        public int Choice {
          get { return choice_; }
          set {
            choice_ = value;
          }
        }

        private ulong bet_;
        /// <summary>
        /// 进入轮盘的下注
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private int jackpotId_;
        /// <summary>
        /// jackpot_id
        /// </summary>
        public int JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private int freeSpinCount_;
        /// <summary>
        /// free spi count
        /// </summary>
        public int FreeSpinCount {
          get { return freeSpinCount_; }
          set {
            freeSpinCount_ = value;
          }
        }

        private bool settled_;
        /// <summary>
        /// wheel bonus是否settle
        /// </summary>
        public bool Settled {
          get { return settled_; }
          set {
            settled_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Chosen != false) {
            output.WriteRawTag(8);
            output.WriteBool(Chosen);
          }
          if (Choice != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Choice);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Bet);
          }
          if (JackpotId != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(JackpotId);
          }
          if (FreeSpinCount != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(FreeSpinCount);
          }
          if (Settled != false) {
            output.WriteRawTag(48);
            output.WriteBool(Settled);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Chosen != false) {
            size += 1 + 1;
          }
          if (Choice != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Choice);
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotId);
          }
          if (FreeSpinCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeSpinCount);
          }
          if (Settled != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Chosen = input.ReadBool();
                break;
              }
              case 16: {
                Choice = input.ReadInt32();
                break;
              }
              case 24: {
                Bet = input.ReadUInt64();
                break;
              }
              case 32: {
                JackpotId = input.ReadInt32();
                break;
              }
              case 40: {
                FreeSpinCount = input.ReadInt32();
                break;
              }
              case 48: {
                Settled = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///
  ///result结构中fsm可能状态:
  ///normal: 普通带jackpot
  ///freeSpin: 普通freespin带jackpot
  ///superFreeSpin: map中触发的freespin
  ///bonusGame: map中轮盘游戏
  /// </summary>
  public sealed class PiggyBankGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<PiggyBankGameResultExtraInfo> _parser = new pb::MessageParser<PiggyBankGameResultExtraInfo>(() => new PiggyBankGameResultExtraInfo());
    public static pb::MessageParser<PiggyBankGameResultExtraInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Pot pot_;
    /// <summary>
    /// 进度条
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Pot Pot {
      get { return pot_; }
      set {
        pot_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Wheel wheel_;
    /// <summary>
    /// 轮盘信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Wheel Wheel {
      get { return wheel_; }
      set {
        wheel_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Buff> _repeated_buffs_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Buff.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Buff> buffs_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Buff>();
    /// <summary>
    /// buff信息
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Buff> Buffs {
      get { return buffs_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.FreeSpinInfo superFreeSpinInfo_;
    /// <summary>
    /// super free game 信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.FreeSpinInfo SuperFreeSpinInfo {
      get { return superFreeSpinInfo_; }
      set {
        superFreeSpinInfo_ = value;
      }
    }

    private long normalPiggySafeRate_;
    /// <summary>
    /// 每个猪的win rate
    /// </summary>
    public long NormalPiggySafeRate {
      get { return normalPiggySafeRate_; }
      set {
        normalPiggySafeRate_ = value;
      }
    }

    private long superWinRate_;
    /// <summary>
    /// super free win rate
    /// </summary>
    public long SuperWinRate {
      get { return superWinRate_; }
      set {
        superWinRate_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (pot_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pot);
      }
      if (wheel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Wheel);
      }
      buffs_.WriteTo(output, _repeated_buffs_codec);
      if (superFreeSpinInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SuperFreeSpinInfo);
      }
      if (NormalPiggySafeRate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NormalPiggySafeRate);
      }
      if (SuperWinRate != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SuperWinRate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (pot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pot);
      }
      if (wheel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wheel);
      }
      size += buffs_.CalculateSize(_repeated_buffs_codec);
      if (superFreeSpinInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SuperFreeSpinInfo);
      }
      if (NormalPiggySafeRate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NormalPiggySafeRate);
      }
      if (SuperWinRate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SuperWinRate);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pot_ == null) {
              pot_ = new global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Pot();
            }
            input.ReadMessage(pot_);
            break;
          }
          case 18: {
            if (wheel_ == null) {
              wheel_ = new global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Wheel();
            }
            input.ReadMessage(wheel_);
            break;
          }
          case 26: {
            buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
            break;
          }
          case 34: {
            if (superFreeSpinInfo_ == null) {
              superFreeSpinInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.FreeSpinInfo();
            }
            input.ReadMessage(superFreeSpinInfo_);
            break;
          }
          case 40: {
            NormalPiggySafeRate = input.ReadInt64();
            break;
          }
          case 48: {
            SuperWinRate = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PiggyBankGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class Pot : pb::IMessage {
        private static readonly pb::MessageParser<Pot> _parser = new pb::MessageParser<Pot>(() => new Pot());
        public static pb::MessageParser<Pot> Parser { get { return _parser; } }

        private uint progress_;
        /// <summary>
        /// 当前等级进度
        /// </summary>
        public uint Progress {
          get { return progress_; }
          set {
            progress_ = value;
          }
        }

        private uint level_;
        /// <summary>
        /// 当前等级
        /// </summary>
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        private uint amount_;
        /// <summary>
        /// 当前进度总量
        /// </summary>
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private ulong avgBet_;
        /// <summary>
        /// 平均bet
        /// </summary>
        public ulong AvgBet {
          get { return avgBet_; }
          set {
            avgBet_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Progress != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Progress);
          }
          if (Level != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Level);
          }
          if (Amount != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Amount);
          }
          if (AvgBet != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(AvgBet);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Progress != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Progress);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          if (AvgBet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AvgBet);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Progress = input.ReadUInt32();
                break;
              }
              case 16: {
                Level = input.ReadUInt32();
                break;
              }
              case 24: {
                Amount = input.ReadUInt32();
                break;
              }
              case 32: {
                AvgBet = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class Buff : pb::IMessage {
        private static readonly pb::MessageParser<Buff> _parser = new pb::MessageParser<Buff>(() => new Buff());
        public static pb::MessageParser<Buff> Parser { get { return _parser; } }

        private global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Buff.Types.Type type_ = 0;
        /// <summary>
        /// buff类型
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Buff.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        private int value_;
        /// <summary>
        /// buff大小值
        /// </summary>
        public int Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        private bool acquired_;
        /// <summary>
        /// 已获取
        /// </summary>
        public bool Acquired {
          get { return acquired_; }
          set {
            acquired_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Value != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Value);
          }
          if (Acquired != false) {
            output.WriteRawTag(24);
            output.WriteBool(Acquired);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Value != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
          }
          if (Acquired != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                type_ = (global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Buff.Types.Type) input.ReadEnum();
                break;
              }
              case 16: {
                Value = input.ReadInt32();
                break;
              }
              case 24: {
                Acquired = input.ReadBool();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Buff message type.</summary>
        public static class Types {
          public enum Type {
            AddCoins = 0,
            AddFreeSpin = 1,
            AddRow = 2,
            AddColumn = 3,
            AddSymbols = 4,
            AddExtraBonus = 5,
          }

        }
        #endregion

      }

      public sealed class Wheel : pb::IMessage {
        private static readonly pb::MessageParser<Wheel> _parser = new pb::MessageParser<Wheel>(() => new Wheel());
        public static pb::MessageParser<Wheel> Parser { get { return _parser; } }

        private bool chosen_;
        /// <summary>
        /// 轮盘是否选过
        /// </summary>
        public bool Chosen {
          get { return chosen_; }
          set {
            chosen_ = value;
          }
        }

        private int choice_;
        /// <summary>
        /// 轮盘结果
        /// </summary>
        public int Choice {
          get { return choice_; }
          set {
            choice_ = value;
          }
        }

        private ulong bet_;
        /// <summary>
        /// 进入轮盘的下注
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Buff.Types.Type wheelBuffType_ = 0;
        public global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Buff.Types.Type WheelBuffType {
          get { return wheelBuffType_; }
          set {
            wheelBuffType_ = value;
          }
        }

        private static readonly pb::FieldCodec<ulong> _repeated_wheelWinRate_codec
            = pb::FieldCodec.ForUInt64(42);
        private readonly pbc::RepeatedField<ulong> wheelWinRate_ = new pbc::RepeatedField<ulong>();
        public pbc::RepeatedField<ulong> WheelWinRate {
          get { return wheelWinRate_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Chosen != false) {
            output.WriteRawTag(8);
            output.WriteBool(Chosen);
          }
          if (Choice != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Choice);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Bet);
          }
          if (WheelBuffType != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) WheelBuffType);
          }
          wheelWinRate_.WriteTo(output, _repeated_wheelWinRate_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Chosen != false) {
            size += 1 + 1;
          }
          if (Choice != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Choice);
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (WheelBuffType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WheelBuffType);
          }
          size += wheelWinRate_.CalculateSize(_repeated_wheelWinRate_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Chosen = input.ReadBool();
                break;
              }
              case 16: {
                Choice = input.ReadInt32();
                break;
              }
              case 24: {
                Bet = input.ReadUInt64();
                break;
              }
              case 32: {
                wheelBuffType_ = (global::DragonU3DSDK.Network.API.ILProtocol.PiggyBankGameResultExtraInfo.Types.Buff.Types.Type) input.ReadEnum();
                break;
              }
              case 42:
              case 40: {
                wheelWinRate_.AddEntriesFrom(input, _repeated_wheelWinRate_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class FreeSpinInfo : pb::IMessage {
        private static readonly pb::MessageParser<FreeSpinInfo> _parser = new pb::MessageParser<FreeSpinInfo>(() => new FreeSpinInfo());
        public static pb::MessageParser<FreeSpinInfo> Parser { get { return _parser; } }

        private uint left_;
        public uint Left {
          get { return left_; }
          set {
            left_ = value;
          }
        }

        private uint total_;
        public uint Total {
          get { return total_; }
          set {
            total_ = value;
          }
        }

        private ulong bet_;
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private bool isSuperFree_;
        public bool IsSuperFree {
          get { return isSuperFree_; }
          set {
            isSuperFree_ = value;
          }
        }

        private ulong winRateThisTurn_;
        public ulong WinRateThisTurn {
          get { return winRateThisTurn_; }
          set {
            winRateThisTurn_ = value;
          }
        }

        private ulong winRateAllTurns_;
        public ulong WinRateAllTurns {
          get { return winRateAllTurns_; }
          set {
            winRateAllTurns_ = value;
          }
        }

        private uint potLevel_;
        public uint PotLevel {
          get { return potLevel_; }
          set {
            potLevel_ = value;
          }
        }

        private ulong winRate_;
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        private ulong totalWin_;
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        private bool isOver_;
        public bool IsOver {
          get { return isOver_; }
          set {
            isOver_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_panels_codec
            = pb::FieldCodec.ForMessage(90, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> panels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> Panels {
          get { return panels_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Left != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Left);
          }
          if (Total != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Total);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Bet);
          }
          if (IsSuperFree != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsSuperFree);
          }
          if (WinRateThisTurn != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(WinRateThisTurn);
          }
          if (WinRateAllTurns != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(WinRateAllTurns);
          }
          if (PotLevel != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(PotLevel);
          }
          if (WinRate != 0UL) {
            output.WriteRawTag(64);
            output.WriteUInt64(WinRate);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(72);
            output.WriteUInt64(TotalWin);
          }
          if (IsOver != false) {
            output.WriteRawTag(80);
            output.WriteBool(IsOver);
          }
          panels_.WriteTo(output, _repeated_panels_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Left != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Left);
          }
          if (Total != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Total);
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (IsSuperFree != false) {
            size += 1 + 1;
          }
          if (WinRateThisTurn != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRateThisTurn);
          }
          if (WinRateAllTurns != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRateAllTurns);
          }
          if (PotLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PotLevel);
          }
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          if (IsOver != false) {
            size += 1 + 1;
          }
          size += panels_.CalculateSize(_repeated_panels_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Left = input.ReadUInt32();
                break;
              }
              case 16: {
                Total = input.ReadUInt32();
                break;
              }
              case 24: {
                Bet = input.ReadUInt64();
                break;
              }
              case 32: {
                IsSuperFree = input.ReadBool();
                break;
              }
              case 40: {
                WinRateThisTurn = input.ReadUInt64();
                break;
              }
              case 48: {
                WinRateAllTurns = input.ReadUInt64();
                break;
              }
              case 56: {
                PotLevel = input.ReadUInt32();
                break;
              }
              case 64: {
                WinRate = input.ReadUInt64();
                break;
              }
              case 72: {
                TotalWin = input.ReadUInt64();
                break;
              }
              case 80: {
                IsOver = input.ReadBool();
                break;
              }
              case 90: {
                panels_.AddEntriesFrom(input, _repeated_panels_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///
  ///result结构中fsm可能状态:
  ///normal: 普通带jackpot
  ///freeSpin: 普通freespin带jackpot
  ///superFreeSpin: map中触发的freespin
  ///bonusGame: map中轮盘游戏
  /// </summary>
  public sealed class PiggyBank2GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<PiggyBank2GameResultExtraInfo> _parser = new pb::MessageParser<PiggyBank2GameResultExtraInfo>(() => new PiggyBank2GameResultExtraInfo());
    public static pb::MessageParser<PiggyBank2GameResultExtraInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Pot pot_;
    /// <summary>
    /// 进度条
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Pot Pot {
      get { return pot_; }
      set {
        pot_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Wheel wheel_;
    /// <summary>
    /// 轮盘信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Wheel Wheel {
      get { return wheel_; }
      set {
        wheel_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Buff> _repeated_buffs_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Buff.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Buff> buffs_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Buff>();
    /// <summary>
    /// buff信息
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Buff> Buffs {
      get { return buffs_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.FreeSpinInfo superFreeSpinInfo_;
    /// <summary>
    /// super free game 信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.FreeSpinInfo SuperFreeSpinInfo {
      get { return superFreeSpinInfo_; }
      set {
        superFreeSpinInfo_ = value;
      }
    }

    private long normalPiggySafeRate_;
    /// <summary>
    /// 每个猪的win rate
    /// </summary>
    public long NormalPiggySafeRate {
      get { return normalPiggySafeRate_; }
      set {
        normalPiggySafeRate_ = value;
      }
    }

    private long superWinRate_;
    /// <summary>
    /// super free win rate
    /// </summary>
    public long SuperWinRate {
      get { return superWinRate_; }
      set {
        superWinRate_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (pot_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pot);
      }
      if (wheel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Wheel);
      }
      buffs_.WriteTo(output, _repeated_buffs_codec);
      if (superFreeSpinInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SuperFreeSpinInfo);
      }
      if (NormalPiggySafeRate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NormalPiggySafeRate);
      }
      if (SuperWinRate != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SuperWinRate);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (pot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pot);
      }
      if (wheel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wheel);
      }
      size += buffs_.CalculateSize(_repeated_buffs_codec);
      if (superFreeSpinInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SuperFreeSpinInfo);
      }
      if (NormalPiggySafeRate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NormalPiggySafeRate);
      }
      if (SuperWinRate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SuperWinRate);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pot_ == null) {
              pot_ = new global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Pot();
            }
            input.ReadMessage(pot_);
            break;
          }
          case 18: {
            if (wheel_ == null) {
              wheel_ = new global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Wheel();
            }
            input.ReadMessage(wheel_);
            break;
          }
          case 26: {
            buffs_.AddEntriesFrom(input, _repeated_buffs_codec);
            break;
          }
          case 34: {
            if (superFreeSpinInfo_ == null) {
              superFreeSpinInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.FreeSpinInfo();
            }
            input.ReadMessage(superFreeSpinInfo_);
            break;
          }
          case 40: {
            NormalPiggySafeRate = input.ReadInt64();
            break;
          }
          case 48: {
            SuperWinRate = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PiggyBank2GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class Pot : pb::IMessage {
        private static readonly pb::MessageParser<Pot> _parser = new pb::MessageParser<Pot>(() => new Pot());
        public static pb::MessageParser<Pot> Parser { get { return _parser; } }

        private uint progress_;
        /// <summary>
        /// 当前等级进度
        /// </summary>
        public uint Progress {
          get { return progress_; }
          set {
            progress_ = value;
          }
        }

        private uint level_;
        /// <summary>
        /// 当前等级
        /// </summary>
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        private uint amount_;
        /// <summary>
        /// 当前进度总量
        /// </summary>
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private ulong avgBet_;
        /// <summary>
        /// 平均bet
        /// </summary>
        public ulong AvgBet {
          get { return avgBet_; }
          set {
            avgBet_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Progress != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Progress);
          }
          if (Level != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Level);
          }
          if (Amount != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Amount);
          }
          if (AvgBet != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(AvgBet);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Progress != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Progress);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          if (AvgBet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AvgBet);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Progress = input.ReadUInt32();
                break;
              }
              case 16: {
                Level = input.ReadUInt32();
                break;
              }
              case 24: {
                Amount = input.ReadUInt32();
                break;
              }
              case 32: {
                AvgBet = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class Buff : pb::IMessage {
        private static readonly pb::MessageParser<Buff> _parser = new pb::MessageParser<Buff>(() => new Buff());
        public static pb::MessageParser<Buff> Parser { get { return _parser; } }

        private global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Buff.Types.Type type_ = 0;
        /// <summary>
        /// buff类型
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Buff.Types.Type Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        private int value_;
        /// <summary>
        /// buff大小值
        /// </summary>
        public int Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        private bool acquired_;
        /// <summary>
        /// 已获取
        /// </summary>
        public bool Acquired {
          get { return acquired_; }
          set {
            acquired_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Type != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (Value != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Value);
          }
          if (Acquired != false) {
            output.WriteRawTag(24);
            output.WriteBool(Acquired);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Value != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
          }
          if (Acquired != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                type_ = (global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Buff.Types.Type) input.ReadEnum();
                break;
              }
              case 16: {
                Value = input.ReadInt32();
                break;
              }
              case 24: {
                Acquired = input.ReadBool();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Buff message type.</summary>
        public static class Types {
          public enum Type {
            AddCoins = 0,
            AddFreeSpin = 1,
            AddRow = 2,
            AddColumn = 3,
            AddSymbols = 4,
            AddExtraBonus = 5,
          }

        }
        #endregion

      }

      public sealed class Wheel : pb::IMessage {
        private static readonly pb::MessageParser<Wheel> _parser = new pb::MessageParser<Wheel>(() => new Wheel());
        public static pb::MessageParser<Wheel> Parser { get { return _parser; } }

        private bool chosen_;
        /// <summary>
        /// 轮盘是否选过
        /// </summary>
        public bool Chosen {
          get { return chosen_; }
          set {
            chosen_ = value;
          }
        }

        private int choice_;
        /// <summary>
        /// 轮盘结果
        /// </summary>
        public int Choice {
          get { return choice_; }
          set {
            choice_ = value;
          }
        }

        private ulong bet_;
        /// <summary>
        /// 进入轮盘的下注
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Buff.Types.Type wheelBuffType_ = 0;
        public global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Buff.Types.Type WheelBuffType {
          get { return wheelBuffType_; }
          set {
            wheelBuffType_ = value;
          }
        }

        private static readonly pb::FieldCodec<ulong> _repeated_wheelWinRate_codec
            = pb::FieldCodec.ForUInt64(42);
        private readonly pbc::RepeatedField<ulong> wheelWinRate_ = new pbc::RepeatedField<ulong>();
        public pbc::RepeatedField<ulong> WheelWinRate {
          get { return wheelWinRate_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Chosen != false) {
            output.WriteRawTag(8);
            output.WriteBool(Chosen);
          }
          if (Choice != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Choice);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Bet);
          }
          if (WheelBuffType != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) WheelBuffType);
          }
          wheelWinRate_.WriteTo(output, _repeated_wheelWinRate_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Chosen != false) {
            size += 1 + 1;
          }
          if (Choice != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Choice);
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (WheelBuffType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WheelBuffType);
          }
          size += wheelWinRate_.CalculateSize(_repeated_wheelWinRate_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Chosen = input.ReadBool();
                break;
              }
              case 16: {
                Choice = input.ReadInt32();
                break;
              }
              case 24: {
                Bet = input.ReadUInt64();
                break;
              }
              case 32: {
                wheelBuffType_ = (global::DragonU3DSDK.Network.API.ILProtocol.PiggyBank2GameResultExtraInfo.Types.Buff.Types.Type) input.ReadEnum();
                break;
              }
              case 42:
              case 40: {
                wheelWinRate_.AddEntriesFrom(input, _repeated_wheelWinRate_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class FreeSpinInfo : pb::IMessage {
        private static readonly pb::MessageParser<FreeSpinInfo> _parser = new pb::MessageParser<FreeSpinInfo>(() => new FreeSpinInfo());
        public static pb::MessageParser<FreeSpinInfo> Parser { get { return _parser; } }

        private uint left_;
        public uint Left {
          get { return left_; }
          set {
            left_ = value;
          }
        }

        private uint total_;
        public uint Total {
          get { return total_; }
          set {
            total_ = value;
          }
        }

        private ulong bet_;
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private bool isSuperFree_;
        public bool IsSuperFree {
          get { return isSuperFree_; }
          set {
            isSuperFree_ = value;
          }
        }

        private ulong winRateThisTurn_;
        public ulong WinRateThisTurn {
          get { return winRateThisTurn_; }
          set {
            winRateThisTurn_ = value;
          }
        }

        private ulong winRateAllTurns_;
        public ulong WinRateAllTurns {
          get { return winRateAllTurns_; }
          set {
            winRateAllTurns_ = value;
          }
        }

        private uint potLevel_;
        public uint PotLevel {
          get { return potLevel_; }
          set {
            potLevel_ = value;
          }
        }

        private ulong winRate_;
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        private ulong totalWin_;
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        private bool isOver_;
        public bool IsOver {
          get { return isOver_; }
          set {
            isOver_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Left != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Left);
          }
          if (Total != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Total);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Bet);
          }
          if (IsSuperFree != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsSuperFree);
          }
          if (WinRateThisTurn != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(WinRateThisTurn);
          }
          if (WinRateAllTurns != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(WinRateAllTurns);
          }
          if (PotLevel != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(PotLevel);
          }
          if (WinRate != 0UL) {
            output.WriteRawTag(64);
            output.WriteUInt64(WinRate);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(72);
            output.WriteUInt64(TotalWin);
          }
          if (IsOver != false) {
            output.WriteRawTag(80);
            output.WriteBool(IsOver);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Left != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Left);
          }
          if (Total != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Total);
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (IsSuperFree != false) {
            size += 1 + 1;
          }
          if (WinRateThisTurn != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRateThisTurn);
          }
          if (WinRateAllTurns != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRateAllTurns);
          }
          if (PotLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PotLevel);
          }
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          if (IsOver != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Left = input.ReadUInt32();
                break;
              }
              case 16: {
                Total = input.ReadUInt32();
                break;
              }
              case 24: {
                Bet = input.ReadUInt64();
                break;
              }
              case 32: {
                IsSuperFree = input.ReadBool();
                break;
              }
              case 40: {
                WinRateThisTurn = input.ReadUInt64();
                break;
              }
              case 48: {
                WinRateAllTurns = input.ReadUInt64();
                break;
              }
              case 56: {
                PotLevel = input.ReadUInt32();
                break;
              }
              case 64: {
                WinRate = input.ReadUInt64();
                break;
              }
              case 72: {
                TotalWin = input.ReadUInt64();
                break;
              }
              case 80: {
                IsOver = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///================= BingoClover ====================================
  /// </summary>
  public sealed class BingoCloverGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<BingoCloverGameResultExtraInfo> _parser = new pb::MessageParser<BingoCloverGameResultExtraInfo>(() => new BingoCloverGameResultExtraInfo());
    public static pb::MessageParser<BingoCloverGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoData>.Codec _map_bingoMap_codec
        = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoData>.Codec(pb::FieldCodec.ForUInt64(8), pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoData.Parser), 10);
    private readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoData> bingoMap_ = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoData>();
    /// <summary>
    /// bingo数据表，key为bet
    /// </summary>
    public pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoData> BingoMap {
      get { return bingoMap_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.Pot pot_;
    public global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.Pot Pot {
      get { return pot_; }
      set {
        pot_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoData superBingo_;
    /// <summary>
    /// 进入地图feature后的bingo数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoData SuperBingo {
      get { return superBingo_; }
      set {
        superBingo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.Wheel wheel_;
    public global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.Wheel Wheel {
      get { return wheel_; }
      set {
        wheel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bingoMap_.WriteTo(output, _map_bingoMap_codec);
      if (pot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pot);
      }
      if (superBingo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SuperBingo);
      }
      if (wheel_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Wheel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += bingoMap_.CalculateSize(_map_bingoMap_codec);
      if (pot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pot);
      }
      if (superBingo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SuperBingo);
      }
      if (wheel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wheel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bingoMap_.AddEntriesFrom(input, _map_bingoMap_codec);
            break;
          }
          case 18: {
            if (pot_ == null) {
              pot_ = new global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.Pot();
            }
            input.ReadMessage(pot_);
            break;
          }
          case 26: {
            if (superBingo_ == null) {
              superBingo_ = new global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoData();
            }
            input.ReadMessage(superBingo_);
            break;
          }
          case 34: {
            if (wheel_ == null) {
              wheel_ = new global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.Wheel();
            }
            input.ReadMessage(wheel_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BingoCloverGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class BingoItem : pb::IMessage {
        private static readonly pb::MessageParser<BingoItem> _parser = new pb::MessageParser<BingoItem>(() => new BingoItem());
        public static pb::MessageParser<BingoItem> Parser { get { return _parser; } }

        private int positionId_;
        /// <summary>
        /// 位置id
        /// </summary>
        public int PositionId {
          get { return positionId_; }
          set {
            positionId_ = value;
          }
        }

        private ulong winRate_;
        /// <summary>
        /// 赢钱倍率
        /// </summary>
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        private uint jackpotId_;
        /// <summary>
        /// jackpot id
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private bool isCentre_;
        /// <summary>
        /// 是否是正中间
        /// </summary>
        public bool IsCentre {
          get { return isCentre_; }
          set {
            isCentre_ = value;
          }
        }

        private bool isCross_;
        /// <summary>
        /// 是否是cross飞行物
        /// </summary>
        public bool IsCross {
          get { return isCross_; }
          set {
            isCross_ = value;
          }
        }

        private bool isBlock_;
        /// <summary>
        /// 是否是block飞行物
        /// </summary>
        public bool IsBlock {
          get { return isBlock_; }
          set {
            isBlock_ = value;
          }
        }

        private static readonly pb::FieldCodec<int> _repeated_otherPositionIds_codec
            = pb::FieldCodec.ForInt32(58);
        private readonly pbc::RepeatedField<int> otherPositionIds_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// 飞行物影响的其他位置
        /// </summary>
        public pbc::RepeatedField<int> OtherPositionIds {
          get { return otherPositionIds_; }
        }

        private bool isChosen_;
        /// <summary>
        /// 作为中心wheel是否完成bonus
        /// </summary>
        public bool IsChosen {
          get { return isChosen_; }
          set {
            isChosen_ = value;
          }
        }

        private ulong jackpotPay_;
        /// <summary>
        /// jackpot pay
        /// </summary>
        public ulong JackpotPay {
          get { return jackpotPay_; }
          set {
            jackpotPay_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (PositionId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PositionId);
          }
          if (WinRate != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(WinRate);
          }
          if (JackpotId != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(JackpotId);
          }
          if (IsCentre != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsCentre);
          }
          if (IsCross != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsCross);
          }
          if (IsBlock != false) {
            output.WriteRawTag(48);
            output.WriteBool(IsBlock);
          }
          otherPositionIds_.WriteTo(output, _repeated_otherPositionIds_codec);
          if (IsChosen != false) {
            output.WriteRawTag(64);
            output.WriteBool(IsChosen);
          }
          if (JackpotPay != 0UL) {
            output.WriteRawTag(72);
            output.WriteUInt64(JackpotPay);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (PositionId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PositionId);
          }
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (IsCentre != false) {
            size += 1 + 1;
          }
          if (IsCross != false) {
            size += 1 + 1;
          }
          if (IsBlock != false) {
            size += 1 + 1;
          }
          size += otherPositionIds_.CalculateSize(_repeated_otherPositionIds_codec);
          if (IsChosen != false) {
            size += 1 + 1;
          }
          if (JackpotPay != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PositionId = input.ReadInt32();
                break;
              }
              case 16: {
                WinRate = input.ReadUInt64();
                break;
              }
              case 24: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 32: {
                IsCentre = input.ReadBool();
                break;
              }
              case 40: {
                IsCross = input.ReadBool();
                break;
              }
              case 48: {
                IsBlock = input.ReadBool();
                break;
              }
              case 58:
              case 56: {
                otherPositionIds_.AddEntriesFrom(input, _repeated_otherPositionIds_codec);
                break;
              }
              case 64: {
                IsChosen = input.ReadBool();
                break;
              }
              case 72: {
                JackpotPay = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class BingoLine : pb::IMessage {
        private static readonly pb::MessageParser<BingoLine> _parser = new pb::MessageParser<BingoLine>(() => new BingoLine());
        public static pb::MessageParser<BingoLine> Parser { get { return _parser; } }

        private int lineId_;
        /// <summary>
        /// bingo成功线id， 1～9: 从上往下,从左往右; 10:左上右下; 11:右上左下
        /// </summary>
        public int LineId {
          get { return lineId_; }
          set {
            lineId_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> _repeated_items_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bingo数据队列
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> Items {
          get { return items_; }
        }

        private ulong totalWinRate_;
        /// <summary>
        /// line 总奖励心奖励
        /// </summary>
        public ulong TotalWinRate {
          get { return totalWinRate_; }
          set {
            totalWinRate_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (LineId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(LineId);
          }
          items_.WriteTo(output, _repeated_items_codec);
          if (TotalWinRate != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(TotalWinRate);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (LineId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineId);
          }
          size += items_.CalculateSize(_repeated_items_codec);
          if (TotalWinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWinRate);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                LineId = input.ReadInt32();
                break;
              }
              case 18: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 24: {
                TotalWinRate = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class BingoHotLine : pb::IMessage {
        private static readonly pb::MessageParser<BingoHotLine> _parser = new pb::MessageParser<BingoHotLine>(() => new BingoHotLine());
        public static pb::MessageParser<BingoHotLine> Parser { get { return _parser; } }

        private int lineId_;
        /// <summary>
        /// bingo成功线id， 1～9: 从上往下,从左往右; 10:左上右下; 11:右上左下
        /// </summary>
        public int LineId {
          get { return lineId_; }
          set {
            lineId_ = value;
          }
        }

        private static readonly pb::FieldCodec<int> _repeated_positionIds_codec
            = pb::FieldCodec.ForInt32(18);
        private readonly pbc::RepeatedField<int> positionIds_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// bingo数据队列
        /// </summary>
        public pbc::RepeatedField<int> PositionIds {
          get { return positionIds_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (LineId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(LineId);
          }
          positionIds_.WriteTo(output, _repeated_positionIds_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (LineId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineId);
          }
          size += positionIds_.CalculateSize(_repeated_positionIds_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                LineId = input.ReadInt32();
                break;
              }
              case 18:
              case 16: {
                positionIds_.AddEntriesFrom(input, _repeated_positionIds_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class BingoData : pb::IMessage {
        private static readonly pb::MessageParser<BingoData> _parser = new pb::MessageParser<BingoData>(() => new BingoData());
        public static pb::MessageParser<BingoData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bingo数据length为25;
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> Items {
          get { return items_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoLine> _repeated_lines_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoLine.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoLine> lines_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoLine>();
        /// <summary>
        /// bingo成功线
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoLine> Lines {
          get { return lines_; }
        }

        private static readonly pb::FieldCodec<int> _repeated_hotSpots_codec
            = pb::FieldCodec.ForInt32(26);
        private readonly pbc::RepeatedField<int> hotSpots_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// 绝胜点
        /// </summary>
        public pbc::RepeatedField<int> HotSpots {
          get { return hotSpots_; }
        }

        private bool isCross_;
        /// <summary>
        /// 是否cross类型的bingo
        /// </summary>
        public bool IsCross {
          get { return isCross_; }
          set {
            isCross_ = value;
          }
        }

        private bool isBlock_;
        /// <summary>
        /// 是否block类型的bingo
        /// </summary>
        public bool IsBlock {
          get { return isBlock_; }
          set {
            isBlock_ = value;
          }
        }

        private ulong totalWin_;
        /// <summary>
        /// bingo 总奖励
        /// </summary>
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> _repeated_startIncrease_codec
            = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> startIncrease_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bingo新局刚开始的items
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> StartIncrease {
          get { return startIncrease_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> _repeated_randomIncrease_codec
            = pb::FieldCodec.ForMessage(66, global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> randomIncrease_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bing每局随机加入的items
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> RandomIncrease {
          get { return randomIncrease_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> _repeated_panelIncrease_codec
            = pb::FieldCodec.ForMessage(74, global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> panelIncrease_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bingo每局panel上增加的items
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoItem> PanelIncrease {
          get { return panelIncrease_; }
        }

        private bool isOver_;
        /// <summary>
        /// 用于super bingo, 表示FreeSpin已经结束。 注意这里不是指触发bingo
        /// </summary>
        public bool IsOver {
          get { return isOver_; }
          set {
            isOver_ = value;
          }
        }

        private ulong bet_;
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private int currentBonusLine_;
        public int CurrentBonusLine {
          get { return currentBonusLine_; }
          set {
            currentBonusLine_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoHotLine> _repeated_hotLines_codec
            = pb::FieldCodec.ForMessage(106, global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoHotLine.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoHotLine> hotLines_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoHotLine>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.BingoHotLine> HotLines {
          get { return hotLines_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          lines_.WriteTo(output, _repeated_lines_codec);
          hotSpots_.WriteTo(output, _repeated_hotSpots_codec);
          if (IsCross != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsCross);
          }
          if (IsBlock != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsBlock);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(TotalWin);
          }
          startIncrease_.WriteTo(output, _repeated_startIncrease_codec);
          randomIncrease_.WriteTo(output, _repeated_randomIncrease_codec);
          panelIncrease_.WriteTo(output, _repeated_panelIncrease_codec);
          if (IsOver != false) {
            output.WriteRawTag(80);
            output.WriteBool(IsOver);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(88);
            output.WriteUInt64(Bet);
          }
          if (CurrentBonusLine != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(CurrentBonusLine);
          }
          hotLines_.WriteTo(output, _repeated_hotLines_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          size += lines_.CalculateSize(_repeated_lines_codec);
          size += hotSpots_.CalculateSize(_repeated_hotSpots_codec);
          if (IsCross != false) {
            size += 1 + 1;
          }
          if (IsBlock != false) {
            size += 1 + 1;
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          size += startIncrease_.CalculateSize(_repeated_startIncrease_codec);
          size += randomIncrease_.CalculateSize(_repeated_randomIncrease_codec);
          size += panelIncrease_.CalculateSize(_repeated_panelIncrease_codec);
          if (IsOver != false) {
            size += 1 + 1;
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (CurrentBonusLine != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentBonusLine);
          }
          size += hotLines_.CalculateSize(_repeated_hotLines_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 18: {
                lines_.AddEntriesFrom(input, _repeated_lines_codec);
                break;
              }
              case 26:
              case 24: {
                hotSpots_.AddEntriesFrom(input, _repeated_hotSpots_codec);
                break;
              }
              case 32: {
                IsCross = input.ReadBool();
                break;
              }
              case 40: {
                IsBlock = input.ReadBool();
                break;
              }
              case 48: {
                TotalWin = input.ReadUInt64();
                break;
              }
              case 58: {
                startIncrease_.AddEntriesFrom(input, _repeated_startIncrease_codec);
                break;
              }
              case 66: {
                randomIncrease_.AddEntriesFrom(input, _repeated_randomIncrease_codec);
                break;
              }
              case 74: {
                panelIncrease_.AddEntriesFrom(input, _repeated_panelIncrease_codec);
                break;
              }
              case 80: {
                IsOver = input.ReadBool();
                break;
              }
              case 88: {
                Bet = input.ReadUInt64();
                break;
              }
              case 96: {
                CurrentBonusLine = input.ReadInt32();
                break;
              }
              case 106: {
                hotLines_.AddEntriesFrom(input, _repeated_hotLines_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class Pot : pb::IMessage {
        private static readonly pb::MessageParser<Pot> _parser = new pb::MessageParser<Pot>(() => new Pot());
        public static pb::MessageParser<Pot> Parser { get { return _parser; } }

        private uint level_;
        /// <summary>
        /// 地图上的进度等级
        /// </summary>
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Level != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Level);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Level = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class Wheel : pb::IMessage {
        private static readonly pb::MessageParser<Wheel> _parser = new pb::MessageParser<Wheel>(() => new Wheel());
        public static pb::MessageParser<Wheel> Parser { get { return _parser; } }

        private bool chosen_;
        /// <summary>
        /// 轮盘是否选择
        /// </summary>
        public bool Chosen {
          get { return chosen_; }
          set {
            chosen_ = value;
          }
        }

        private int choice_;
        /// <summary>
        /// 轮盘结果
        /// </summary>
        public int Choice {
          get { return choice_; }
          set {
            choice_ = value;
          }
        }

        private ulong bet_;
        /// <summary>
        /// 轮盘基础bet
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private bool isSuperFree_;
        /// <summary>
        /// 是否是superFree
        /// </summary>
        public bool IsSuperFree {
          get { return isSuperFree_; }
          set {
            isSuperFree_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.Wheel.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(42, global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.Wheel.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.Wheel.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.Wheel.Types.Item>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoCloverGameResultExtraInfo.Types.Wheel.Types.Item> Items {
          get { return items_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Chosen != false) {
            output.WriteRawTag(8);
            output.WriteBool(Chosen);
          }
          if (Choice != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Choice);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Bet);
          }
          if (IsSuperFree != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsSuperFree);
          }
          items_.WriteTo(output, _repeated_items_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Chosen != false) {
            size += 1 + 1;
          }
          if (Choice != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Choice);
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (IsSuperFree != false) {
            size += 1 + 1;
          }
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Chosen = input.ReadBool();
                break;
              }
              case 16: {
                Choice = input.ReadInt32();
                break;
              }
              case 24: {
                Bet = input.ReadUInt64();
                break;
              }
              case 32: {
                IsSuperFree = input.ReadBool();
                break;
              }
              case 42: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Wheel message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private int jackpotId_;
            public int JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private uint winRate_;
            public uint WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (JackpotId != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(JackpotId);
              }
              if (WinRate != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(WinRate);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotId);
              }
              if (WinRate != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinRate);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    JackpotId = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    WinRate = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///================= BingoClover2 ====================================
  /// </summary>
  public sealed class BingoClover2GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<BingoClover2GameResultExtraInfo> _parser = new pb::MessageParser<BingoClover2GameResultExtraInfo>(() => new BingoClover2GameResultExtraInfo());
    public static pb::MessageParser<BingoClover2GameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoData>.Codec _map_bingoMap_codec
        = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoData>.Codec(pb::FieldCodec.ForUInt64(8), pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoData.Parser), 10);
    private readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoData> bingoMap_ = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoData>();
    /// <summary>
    /// bingo数据表，key为bet
    /// </summary>
    public pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoData> BingoMap {
      get { return bingoMap_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.Pot pot_;
    public global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.Pot Pot {
      get { return pot_; }
      set {
        pot_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoData superBingo_;
    /// <summary>
    /// 进入地图feature后的bingo数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoData SuperBingo {
      get { return superBingo_; }
      set {
        superBingo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.Wheel wheel_;
    public global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.Wheel Wheel {
      get { return wheel_; }
      set {
        wheel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bingoMap_.WriteTo(output, _map_bingoMap_codec);
      if (pot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pot);
      }
      if (superBingo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SuperBingo);
      }
      if (wheel_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Wheel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += bingoMap_.CalculateSize(_map_bingoMap_codec);
      if (pot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pot);
      }
      if (superBingo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SuperBingo);
      }
      if (wheel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wheel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bingoMap_.AddEntriesFrom(input, _map_bingoMap_codec);
            break;
          }
          case 18: {
            if (pot_ == null) {
              pot_ = new global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.Pot();
            }
            input.ReadMessage(pot_);
            break;
          }
          case 26: {
            if (superBingo_ == null) {
              superBingo_ = new global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoData();
            }
            input.ReadMessage(superBingo_);
            break;
          }
          case 34: {
            if (wheel_ == null) {
              wheel_ = new global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.Wheel();
            }
            input.ReadMessage(wheel_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BingoClover2GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class BingoItem : pb::IMessage {
        private static readonly pb::MessageParser<BingoItem> _parser = new pb::MessageParser<BingoItem>(() => new BingoItem());
        public static pb::MessageParser<BingoItem> Parser { get { return _parser; } }

        private int positionId_;
        /// <summary>
        /// 位置id
        /// </summary>
        public int PositionId {
          get { return positionId_; }
          set {
            positionId_ = value;
          }
        }

        private ulong winRate_;
        /// <summary>
        /// 赢钱倍率
        /// </summary>
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        private uint jackpotId_;
        /// <summary>
        /// jackpot id
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private bool isCentre_;
        /// <summary>
        /// 是否是正中间
        /// </summary>
        public bool IsCentre {
          get { return isCentre_; }
          set {
            isCentre_ = value;
          }
        }

        private bool isCross_;
        /// <summary>
        /// 是否是cross飞行物
        /// </summary>
        public bool IsCross {
          get { return isCross_; }
          set {
            isCross_ = value;
          }
        }

        private bool isBlock_;
        /// <summary>
        /// 是否是block飞行物
        /// </summary>
        public bool IsBlock {
          get { return isBlock_; }
          set {
            isBlock_ = value;
          }
        }

        private static readonly pb::FieldCodec<int> _repeated_otherPositionIds_codec
            = pb::FieldCodec.ForInt32(58);
        private readonly pbc::RepeatedField<int> otherPositionIds_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// 飞行物影响的其他位置
        /// </summary>
        public pbc::RepeatedField<int> OtherPositionIds {
          get { return otherPositionIds_; }
        }

        private bool isChosen_;
        /// <summary>
        /// 作为中心wheel是否完成bonus
        /// </summary>
        public bool IsChosen {
          get { return isChosen_; }
          set {
            isChosen_ = value;
          }
        }

        private ulong jackpotPay_;
        /// <summary>
        /// jackpot pay
        /// </summary>
        public ulong JackpotPay {
          get { return jackpotPay_; }
          set {
            jackpotPay_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (PositionId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PositionId);
          }
          if (WinRate != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(WinRate);
          }
          if (JackpotId != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(JackpotId);
          }
          if (IsCentre != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsCentre);
          }
          if (IsCross != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsCross);
          }
          if (IsBlock != false) {
            output.WriteRawTag(48);
            output.WriteBool(IsBlock);
          }
          otherPositionIds_.WriteTo(output, _repeated_otherPositionIds_codec);
          if (IsChosen != false) {
            output.WriteRawTag(64);
            output.WriteBool(IsChosen);
          }
          if (JackpotPay != 0UL) {
            output.WriteRawTag(72);
            output.WriteUInt64(JackpotPay);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (PositionId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PositionId);
          }
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (IsCentre != false) {
            size += 1 + 1;
          }
          if (IsCross != false) {
            size += 1 + 1;
          }
          if (IsBlock != false) {
            size += 1 + 1;
          }
          size += otherPositionIds_.CalculateSize(_repeated_otherPositionIds_codec);
          if (IsChosen != false) {
            size += 1 + 1;
          }
          if (JackpotPay != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PositionId = input.ReadInt32();
                break;
              }
              case 16: {
                WinRate = input.ReadUInt64();
                break;
              }
              case 24: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 32: {
                IsCentre = input.ReadBool();
                break;
              }
              case 40: {
                IsCross = input.ReadBool();
                break;
              }
              case 48: {
                IsBlock = input.ReadBool();
                break;
              }
              case 58:
              case 56: {
                otherPositionIds_.AddEntriesFrom(input, _repeated_otherPositionIds_codec);
                break;
              }
              case 64: {
                IsChosen = input.ReadBool();
                break;
              }
              case 72: {
                JackpotPay = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class BingoLine : pb::IMessage {
        private static readonly pb::MessageParser<BingoLine> _parser = new pb::MessageParser<BingoLine>(() => new BingoLine());
        public static pb::MessageParser<BingoLine> Parser { get { return _parser; } }

        private int lineId_;
        /// <summary>
        /// bingo成功线id， 1～9: 从上往下,从左往右; 10:左上右下; 11:右上左下
        /// </summary>
        public int LineId {
          get { return lineId_; }
          set {
            lineId_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> _repeated_items_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bingo数据队列
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> Items {
          get { return items_; }
        }

        private ulong totalWinRate_;
        /// <summary>
        /// line 总奖励心奖励
        /// </summary>
        public ulong TotalWinRate {
          get { return totalWinRate_; }
          set {
            totalWinRate_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (LineId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(LineId);
          }
          items_.WriteTo(output, _repeated_items_codec);
          if (TotalWinRate != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(TotalWinRate);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (LineId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineId);
          }
          size += items_.CalculateSize(_repeated_items_codec);
          if (TotalWinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWinRate);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                LineId = input.ReadInt32();
                break;
              }
              case 18: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 24: {
                TotalWinRate = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class BingoHotLine : pb::IMessage {
        private static readonly pb::MessageParser<BingoHotLine> _parser = new pb::MessageParser<BingoHotLine>(() => new BingoHotLine());
        public static pb::MessageParser<BingoHotLine> Parser { get { return _parser; } }

        private int lineId_;
        /// <summary>
        /// bingo成功线id， 1～9: 从上往下,从左往右; 10:左上右下; 11:右上左下
        /// </summary>
        public int LineId {
          get { return lineId_; }
          set {
            lineId_ = value;
          }
        }

        private static readonly pb::FieldCodec<int> _repeated_positionIds_codec
            = pb::FieldCodec.ForInt32(18);
        private readonly pbc::RepeatedField<int> positionIds_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// bingo数据队列
        /// </summary>
        public pbc::RepeatedField<int> PositionIds {
          get { return positionIds_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (LineId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(LineId);
          }
          positionIds_.WriteTo(output, _repeated_positionIds_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (LineId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineId);
          }
          size += positionIds_.CalculateSize(_repeated_positionIds_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                LineId = input.ReadInt32();
                break;
              }
              case 18:
              case 16: {
                positionIds_.AddEntriesFrom(input, _repeated_positionIds_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class BingoData : pb::IMessage {
        private static readonly pb::MessageParser<BingoData> _parser = new pb::MessageParser<BingoData>(() => new BingoData());
        public static pb::MessageParser<BingoData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bingo数据length为25;
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> Items {
          get { return items_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoLine> _repeated_lines_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoLine.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoLine> lines_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoLine>();
        /// <summary>
        /// bingo成功线
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoLine> Lines {
          get { return lines_; }
        }

        private static readonly pb::FieldCodec<int> _repeated_hotSpots_codec
            = pb::FieldCodec.ForInt32(26);
        private readonly pbc::RepeatedField<int> hotSpots_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// 绝胜点
        /// </summary>
        public pbc::RepeatedField<int> HotSpots {
          get { return hotSpots_; }
        }

        private bool isCross_;
        /// <summary>
        /// 是否cross类型的bingo
        /// </summary>
        public bool IsCross {
          get { return isCross_; }
          set {
            isCross_ = value;
          }
        }

        private bool isBlock_;
        /// <summary>
        /// 是否block类型的bingo
        /// </summary>
        public bool IsBlock {
          get { return isBlock_; }
          set {
            isBlock_ = value;
          }
        }

        private ulong totalWin_;
        /// <summary>
        /// bingo 总奖励
        /// </summary>
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> _repeated_startIncrease_codec
            = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> startIncrease_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bingo新局刚开始的items
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> StartIncrease {
          get { return startIncrease_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> _repeated_randomIncrease_codec
            = pb::FieldCodec.ForMessage(66, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> randomIncrease_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bing每局随机加入的items
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> RandomIncrease {
          get { return randomIncrease_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> _repeated_panelIncrease_codec
            = pb::FieldCodec.ForMessage(74, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> panelIncrease_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bingo每局panel上增加的items
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoItem> PanelIncrease {
          get { return panelIncrease_; }
        }

        private bool isOver_;
        /// <summary>
        /// 用于super bingo, 表示FreeSpin已经结束。 注意这里不是指触发bingo
        /// </summary>
        public bool IsOver {
          get { return isOver_; }
          set {
            isOver_ = value;
          }
        }

        private ulong bet_;
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private int currentBonusLine_;
        public int CurrentBonusLine {
          get { return currentBonusLine_; }
          set {
            currentBonusLine_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoHotLine> _repeated_hotLines_codec
            = pb::FieldCodec.ForMessage(106, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoHotLine.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoHotLine> hotLines_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoHotLine>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.BingoHotLine> HotLines {
          get { return hotLines_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          lines_.WriteTo(output, _repeated_lines_codec);
          hotSpots_.WriteTo(output, _repeated_hotSpots_codec);
          if (IsCross != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsCross);
          }
          if (IsBlock != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsBlock);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(TotalWin);
          }
          startIncrease_.WriteTo(output, _repeated_startIncrease_codec);
          randomIncrease_.WriteTo(output, _repeated_randomIncrease_codec);
          panelIncrease_.WriteTo(output, _repeated_panelIncrease_codec);
          if (IsOver != false) {
            output.WriteRawTag(80);
            output.WriteBool(IsOver);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(88);
            output.WriteUInt64(Bet);
          }
          if (CurrentBonusLine != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(CurrentBonusLine);
          }
          hotLines_.WriteTo(output, _repeated_hotLines_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          size += lines_.CalculateSize(_repeated_lines_codec);
          size += hotSpots_.CalculateSize(_repeated_hotSpots_codec);
          if (IsCross != false) {
            size += 1 + 1;
          }
          if (IsBlock != false) {
            size += 1 + 1;
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          size += startIncrease_.CalculateSize(_repeated_startIncrease_codec);
          size += randomIncrease_.CalculateSize(_repeated_randomIncrease_codec);
          size += panelIncrease_.CalculateSize(_repeated_panelIncrease_codec);
          if (IsOver != false) {
            size += 1 + 1;
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (CurrentBonusLine != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentBonusLine);
          }
          size += hotLines_.CalculateSize(_repeated_hotLines_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 18: {
                lines_.AddEntriesFrom(input, _repeated_lines_codec);
                break;
              }
              case 26:
              case 24: {
                hotSpots_.AddEntriesFrom(input, _repeated_hotSpots_codec);
                break;
              }
              case 32: {
                IsCross = input.ReadBool();
                break;
              }
              case 40: {
                IsBlock = input.ReadBool();
                break;
              }
              case 48: {
                TotalWin = input.ReadUInt64();
                break;
              }
              case 58: {
                startIncrease_.AddEntriesFrom(input, _repeated_startIncrease_codec);
                break;
              }
              case 66: {
                randomIncrease_.AddEntriesFrom(input, _repeated_randomIncrease_codec);
                break;
              }
              case 74: {
                panelIncrease_.AddEntriesFrom(input, _repeated_panelIncrease_codec);
                break;
              }
              case 80: {
                IsOver = input.ReadBool();
                break;
              }
              case 88: {
                Bet = input.ReadUInt64();
                break;
              }
              case 96: {
                CurrentBonusLine = input.ReadInt32();
                break;
              }
              case 106: {
                hotLines_.AddEntriesFrom(input, _repeated_hotLines_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class Pot : pb::IMessage {
        private static readonly pb::MessageParser<Pot> _parser = new pb::MessageParser<Pot>(() => new Pot());
        public static pb::MessageParser<Pot> Parser { get { return _parser; } }

        private uint level_;
        /// <summary>
        /// 地图上的进度等级
        /// </summary>
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Level != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Level);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Level = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class Wheel : pb::IMessage {
        private static readonly pb::MessageParser<Wheel> _parser = new pb::MessageParser<Wheel>(() => new Wheel());
        public static pb::MessageParser<Wheel> Parser { get { return _parser; } }

        private bool chosen_;
        /// <summary>
        /// 轮盘是否选择
        /// </summary>
        public bool Chosen {
          get { return chosen_; }
          set {
            chosen_ = value;
          }
        }

        private int choice_;
        /// <summary>
        /// 轮盘结果
        /// </summary>
        public int Choice {
          get { return choice_; }
          set {
            choice_ = value;
          }
        }

        private ulong bet_;
        /// <summary>
        /// 轮盘基础bet
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private bool isSuperFree_;
        /// <summary>
        /// 是否是superFree
        /// </summary>
        public bool IsSuperFree {
          get { return isSuperFree_; }
          set {
            isSuperFree_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.Wheel.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(42, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.Wheel.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.Wheel.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.Wheel.Types.Item>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover2GameResultExtraInfo.Types.Wheel.Types.Item> Items {
          get { return items_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Chosen != false) {
            output.WriteRawTag(8);
            output.WriteBool(Chosen);
          }
          if (Choice != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Choice);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Bet);
          }
          if (IsSuperFree != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsSuperFree);
          }
          items_.WriteTo(output, _repeated_items_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Chosen != false) {
            size += 1 + 1;
          }
          if (Choice != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Choice);
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (IsSuperFree != false) {
            size += 1 + 1;
          }
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Chosen = input.ReadBool();
                break;
              }
              case 16: {
                Choice = input.ReadInt32();
                break;
              }
              case 24: {
                Bet = input.ReadUInt64();
                break;
              }
              case 32: {
                IsSuperFree = input.ReadBool();
                break;
              }
              case 42: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Wheel message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private int jackpotId_;
            public int JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private uint winRate_;
            public uint WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (JackpotId != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(JackpotId);
              }
              if (WinRate != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(WinRate);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotId);
              }
              if (WinRate != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinRate);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    JackpotId = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    WinRate = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///================= Buffalo ====================================
  /// </summary>
  public sealed class BuffaloGoldGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<BuffaloGoldGameResultExtraInfo> _parser = new pb::MessageParser<BuffaloGoldGameResultExtraInfo>(() => new BuffaloGoldGameResultExtraInfo());
    public static pb::MessageParser<BuffaloGoldGameResultExtraInfo> Parser { get { return _parser; } }

    private int buffaloCount_;
    public int BuffaloCount {
      get { return buffaloCount_; }
      set {
        buffaloCount_ = value;
      }
    }

    private int multiplier_;
    public int Multiplier {
      get { return multiplier_; }
      set {
        multiplier_ = value;
      }
    }

    private int buffaloLevel_;
    public int BuffaloLevel {
      get { return buffaloLevel_; }
      set {
        buffaloLevel_ = value;
      }
    }

    private int buffaloLeftToUpgrade_;
    public int BuffaloLeftToUpgrade {
      get { return buffaloLeftToUpgrade_; }
      set {
        buffaloLeftToUpgrade_ = value;
      }
    }

    private int buffaloCountOld_;
    public int BuffaloCountOld {
      get { return buffaloCountOld_; }
      set {
        buffaloCountOld_ = value;
      }
    }

    private int buffaloLevelOld_;
    public int BuffaloLevelOld {
      get { return buffaloLevelOld_; }
      set {
        buffaloLevelOld_ = value;
      }
    }

    private int buffaloLeftToUpgradeOld_;
    public int BuffaloLeftToUpgradeOld {
      get { return buffaloLeftToUpgradeOld_; }
      set {
        buffaloLeftToUpgradeOld_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BuffaloGoldGameResultExtraInfo.Types.ReelPosition> _repeated_substitutes_codec
        = pb::FieldCodec.ForMessage(66, global::DragonU3DSDK.Network.API.ILProtocol.BuffaloGoldGameResultExtraInfo.Types.ReelPosition.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BuffaloGoldGameResultExtraInfo.Types.ReelPosition> substitutes_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BuffaloGoldGameResultExtraInfo.Types.ReelPosition>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BuffaloGoldGameResultExtraInfo.Types.ReelPosition> Substitutes {
      get { return substitutes_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BuffaloCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffaloCount);
      }
      if (Multiplier != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Multiplier);
      }
      if (BuffaloLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuffaloLevel);
      }
      if (BuffaloLeftToUpgrade != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BuffaloLeftToUpgrade);
      }
      if (BuffaloCountOld != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BuffaloCountOld);
      }
      if (BuffaloLevelOld != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BuffaloLevelOld);
      }
      if (BuffaloLeftToUpgradeOld != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BuffaloLeftToUpgradeOld);
      }
      substitutes_.WriteTo(output, _repeated_substitutes_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (BuffaloCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffaloCount);
      }
      if (Multiplier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiplier);
      }
      if (BuffaloLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffaloLevel);
      }
      if (BuffaloLeftToUpgrade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffaloLeftToUpgrade);
      }
      if (BuffaloCountOld != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffaloCountOld);
      }
      if (BuffaloLevelOld != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffaloLevelOld);
      }
      if (BuffaloLeftToUpgradeOld != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffaloLeftToUpgradeOld);
      }
      size += substitutes_.CalculateSize(_repeated_substitutes_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuffaloCount = input.ReadInt32();
            break;
          }
          case 16: {
            Multiplier = input.ReadInt32();
            break;
          }
          case 24: {
            BuffaloLevel = input.ReadInt32();
            break;
          }
          case 32: {
            BuffaloLeftToUpgrade = input.ReadInt32();
            break;
          }
          case 40: {
            BuffaloCountOld = input.ReadInt32();
            break;
          }
          case 48: {
            BuffaloLevelOld = input.ReadInt32();
            break;
          }
          case 56: {
            BuffaloLeftToUpgradeOld = input.ReadInt32();
            break;
          }
          case 66: {
            substitutes_.AddEntriesFrom(input, _repeated_substitutes_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BuffaloGoldGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class ReelPosition : pb::IMessage {
        private static readonly pb::MessageParser<ReelPosition> _parser = new pb::MessageParser<ReelPosition>(() => new ReelPosition());
        public static pb::MessageParser<ReelPosition> Parser { get { return _parser; } }

        private int col_;
        public int Col {
          get { return col_; }
          set {
            col_ = value;
          }
        }

        private int index_;
        public int Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Col != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Col);
          }
          if (Index != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Index);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Col != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Col);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Col = input.ReadInt32();
                break;
              }
              case 16: {
                Index = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///================= ColossalPigs ================
  /// </summary>
  public sealed class ColossalPigsGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<ColossalPigsGameResultExtraInfo> _parser = new pb::MessageParser<ColossalPigsGameResultExtraInfo>(() => new ColossalPigsGameResultExtraInfo());
    public static pb::MessageParser<ColossalPigsGameResultExtraInfo> Parser { get { return _parser; } }

    private bool finished_;
    /// <summary>
    /// 结算结束
    /// </summary>
    public bool Finished {
      get { return finished_; }
      set {
        finished_ = value;
      }
    }

    private ulong win_;
    /// <summary>
    /// 结算总赢钱
    /// </summary>
    public ulong Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    private uint attemptsCounter_;
    /// <summary>
    /// 当前结算到几个图标
    /// </summary>
    public uint AttemptsCounter {
      get { return attemptsCounter_; }
      set {
        attemptsCounter_ = value;
      }
    }

    private uint attemptsAmount_;
    /// <summary>
    /// 总共需要结算几个图标
    /// </summary>
    public uint AttemptsAmount {
      get { return attemptsAmount_; }
      set {
        attemptsAmount_ = value;
      }
    }

    private uint currentItemId_;
    /// <summary>
    /// 当前结算到的item id
    /// </summary>
    public uint CurrentItemId {
      get { return currentItemId_; }
      set {
        currentItemId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ColossalPigsGameResultExtraInfo.Types.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.ILProtocol.ColossalPigsGameResultExtraInfo.Types.Item.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ColossalPigsGameResultExtraInfo.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ColossalPigsGameResultExtraInfo.Types.Item>();
    /// <summary>
    /// 结算进度
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ColossalPigsGameResultExtraInfo.Types.Item> Items {
      get { return items_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Position> _repeated_wildReplacePositions_codec
        = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.Position.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Position> wildReplacePositions_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Position>();
    /// <summary>
    /// 第二个模式wild替换的数组
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Position> WildReplacePositions {
      get { return wildReplacePositions_; }
    }

    private ulong jackpotWin_;
    public ulong JackpotWin {
      get { return jackpotWin_; }
      set {
        jackpotWin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Finished != false) {
        output.WriteRawTag(8);
        output.WriteBool(Finished);
      }
      if (Win != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Win);
      }
      if (AttemptsCounter != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AttemptsCounter);
      }
      if (AttemptsAmount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AttemptsAmount);
      }
      if (CurrentItemId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CurrentItemId);
      }
      items_.WriteTo(output, _repeated_items_codec);
      wildReplacePositions_.WriteTo(output, _repeated_wildReplacePositions_codec);
      if (JackpotWin != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(JackpotWin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Finished != false) {
        size += 1 + 1;
      }
      if (Win != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Win);
      }
      if (AttemptsCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttemptsCounter);
      }
      if (AttemptsAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttemptsAmount);
      }
      if (CurrentItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentItemId);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      size += wildReplacePositions_.CalculateSize(_repeated_wildReplacePositions_codec);
      if (JackpotWin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotWin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Finished = input.ReadBool();
            break;
          }
          case 16: {
            Win = input.ReadUInt64();
            break;
          }
          case 24: {
            AttemptsCounter = input.ReadUInt32();
            break;
          }
          case 32: {
            AttemptsAmount = input.ReadUInt32();
            break;
          }
          case 40: {
            CurrentItemId = input.ReadUInt32();
            break;
          }
          case 50: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 58: {
            wildReplacePositions_.AddEntriesFrom(input, _repeated_wildReplacePositions_codec);
            break;
          }
          case 64: {
            JackpotWin = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ColossalPigsGameResultExtraInfo message type.</summary>
    public static class Types {
      /// <summary>
      /// 结算图标的结构
      /// </summary>
      public sealed class Item : pb::IMessage {
        private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
        public static pb::MessageParser<Item> Parser { get { return _parser; } }

        private uint id_;
        /// <summary>
        ///坐标(9x1)
        /// </summary>
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        private bool selected_;
        /// <summary>
        /// 已经选择
        /// </summary>
        public bool Selected {
          get { return selected_; }
          set {
            selected_ = value;
          }
        }

        private ulong win_;
        /// <summary>
        /// 赢钱
        /// </summary>
        public ulong Win {
          get { return win_; }
          set {
            win_ = value;
          }
        }

        private uint symbolId_;
        /// <summary>
        /// 图标id
        /// </summary>
        public uint SymbolId {
          get { return symbolId_; }
          set {
            symbolId_ = value;
          }
        }

        private bool finished_;
        /// <summary>
        /// 当前item已经结算完成
        /// </summary>
        public bool Finished {
          get { return finished_; }
          set {
            finished_ = value;
          }
        }

        private uint multiplier_;
        /// <summary>
        /// 翻倍的玩法的倍数
        /// </summary>
        public uint Multiplier {
          get { return multiplier_; }
          set {
            multiplier_ = value;
          }
        }

        private bool started_;
        /// <summary>
        /// 当前item游戏已经开始
        /// </summary>
        public bool Started {
          get { return started_; }
          set {
            started_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Selected != false) {
            output.WriteRawTag(16);
            output.WriteBool(Selected);
          }
          if (Win != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Win);
          }
          if (SymbolId != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(SymbolId);
          }
          if (Finished != false) {
            output.WriteRawTag(40);
            output.WriteBool(Finished);
          }
          if (Multiplier != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Multiplier);
          }
          if (Started != false) {
            output.WriteRawTag(56);
            output.WriteBool(Started);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Selected != false) {
            size += 1 + 1;
          }
          if (Win != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Win);
          }
          if (SymbolId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
          }
          if (Finished != false) {
            size += 1 + 1;
          }
          if (Multiplier != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Multiplier);
          }
          if (Started != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Selected = input.ReadBool();
                break;
              }
              case 24: {
                Win = input.ReadUInt64();
                break;
              }
              case 32: {
                SymbolId = input.ReadUInt32();
                break;
              }
              case 40: {
                Finished = input.ReadBool();
                break;
              }
              case 48: {
                Multiplier = input.ReadUInt32();
                break;
              }
              case 56: {
                Started = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///================= ColossalPigs2 ================
  /// </summary>
  public sealed class ColossalPigs2GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<ColossalPigs2GameResultExtraInfo> _parser = new pb::MessageParser<ColossalPigs2GameResultExtraInfo>(() => new ColossalPigs2GameResultExtraInfo());
    public static pb::MessageParser<ColossalPigs2GameResultExtraInfo> Parser { get { return _parser; } }

    private bool finished_;
    /// <summary>
    /// 结算结束
    /// </summary>
    public bool Finished {
      get { return finished_; }
      set {
        finished_ = value;
      }
    }

    private ulong win_;
    /// <summary>
    /// 结算总赢钱
    /// </summary>
    public ulong Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    private uint attemptsCounter_;
    /// <summary>
    /// 当前结算到几个图标
    /// </summary>
    public uint AttemptsCounter {
      get { return attemptsCounter_; }
      set {
        attemptsCounter_ = value;
      }
    }

    private uint attemptsAmount_;
    /// <summary>
    /// 总共需要结算几个图标
    /// </summary>
    public uint AttemptsAmount {
      get { return attemptsAmount_; }
      set {
        attemptsAmount_ = value;
      }
    }

    private uint currentItemId_;
    /// <summary>
    /// 当前结算到的item id
    /// </summary>
    public uint CurrentItemId {
      get { return currentItemId_; }
      set {
        currentItemId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ColossalPigs2GameResultExtraInfo.Types.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.ILProtocol.ColossalPigs2GameResultExtraInfo.Types.Item.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ColossalPigs2GameResultExtraInfo.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ColossalPigs2GameResultExtraInfo.Types.Item>();
    /// <summary>
    /// 结算进度
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ColossalPigs2GameResultExtraInfo.Types.Item> Items {
      get { return items_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Position> _repeated_wildReplacePositions_codec
        = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.Position.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Position> wildReplacePositions_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Position>();
    /// <summary>
    /// 第二个模式wild替换的数组
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Position> WildReplacePositions {
      get { return wildReplacePositions_; }
    }

    private ulong jackpotWin_;
    public ulong JackpotWin {
      get { return jackpotWin_; }
      set {
        jackpotWin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Finished != false) {
        output.WriteRawTag(8);
        output.WriteBool(Finished);
      }
      if (Win != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Win);
      }
      if (AttemptsCounter != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AttemptsCounter);
      }
      if (AttemptsAmount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AttemptsAmount);
      }
      if (CurrentItemId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CurrentItemId);
      }
      items_.WriteTo(output, _repeated_items_codec);
      wildReplacePositions_.WriteTo(output, _repeated_wildReplacePositions_codec);
      if (JackpotWin != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(JackpotWin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Finished != false) {
        size += 1 + 1;
      }
      if (Win != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Win);
      }
      if (AttemptsCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttemptsCounter);
      }
      if (AttemptsAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttemptsAmount);
      }
      if (CurrentItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentItemId);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      size += wildReplacePositions_.CalculateSize(_repeated_wildReplacePositions_codec);
      if (JackpotWin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotWin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Finished = input.ReadBool();
            break;
          }
          case 16: {
            Win = input.ReadUInt64();
            break;
          }
          case 24: {
            AttemptsCounter = input.ReadUInt32();
            break;
          }
          case 32: {
            AttemptsAmount = input.ReadUInt32();
            break;
          }
          case 40: {
            CurrentItemId = input.ReadUInt32();
            break;
          }
          case 50: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 58: {
            wildReplacePositions_.AddEntriesFrom(input, _repeated_wildReplacePositions_codec);
            break;
          }
          case 64: {
            JackpotWin = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ColossalPigs2GameResultExtraInfo message type.</summary>
    public static class Types {
      /// <summary>
      /// 结算图标的结构
      /// </summary>
      public sealed class Item : pb::IMessage {
        private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
        public static pb::MessageParser<Item> Parser { get { return _parser; } }

        private uint id_;
        /// <summary>
        ///坐标(9x1)
        /// </summary>
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        private bool selected_;
        /// <summary>
        /// 已经选择
        /// </summary>
        public bool Selected {
          get { return selected_; }
          set {
            selected_ = value;
          }
        }

        private ulong win_;
        /// <summary>
        /// 赢钱
        /// </summary>
        public ulong Win {
          get { return win_; }
          set {
            win_ = value;
          }
        }

        private uint symbolId_;
        /// <summary>
        /// 图标id
        /// </summary>
        public uint SymbolId {
          get { return symbolId_; }
          set {
            symbolId_ = value;
          }
        }

        private bool finished_;
        /// <summary>
        /// 当前item已经结算完成
        /// </summary>
        public bool Finished {
          get { return finished_; }
          set {
            finished_ = value;
          }
        }

        private uint multiplier_;
        /// <summary>
        /// 翻倍的玩法的倍数
        /// </summary>
        public uint Multiplier {
          get { return multiplier_; }
          set {
            multiplier_ = value;
          }
        }

        private bool started_;
        /// <summary>
        /// 当前item游戏已经开始
        /// </summary>
        public bool Started {
          get { return started_; }
          set {
            started_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Selected != false) {
            output.WriteRawTag(16);
            output.WriteBool(Selected);
          }
          if (Win != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Win);
          }
          if (SymbolId != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(SymbolId);
          }
          if (Finished != false) {
            output.WriteRawTag(40);
            output.WriteBool(Finished);
          }
          if (Multiplier != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Multiplier);
          }
          if (Started != false) {
            output.WriteRawTag(56);
            output.WriteBool(Started);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Selected != false) {
            size += 1 + 1;
          }
          if (Win != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Win);
          }
          if (SymbolId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
          }
          if (Finished != false) {
            size += 1 + 1;
          }
          if (Multiplier != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Multiplier);
          }
          if (Started != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Selected = input.ReadBool();
                break;
              }
              case 24: {
                Win = input.ReadUInt64();
                break;
              }
              case 32: {
                SymbolId = input.ReadUInt32();
                break;
              }
              case 40: {
                Finished = input.ReadBool();
                break;
              }
              case 48: {
                Multiplier = input.ReadUInt32();
                break;
              }
              case 56: {
                Started = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///================= GoldMine ================
  /// </summary>
  public sealed class GoldMineGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<GoldMineGameResultExtraInfo> _parser = new pb::MessageParser<GoldMineGameResultExtraInfo>(() => new GoldMineGameResultExtraInfo());
    public static pb::MessageParser<GoldMineGameResultExtraInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.GoldMineGameResultExtraInfo.Types.Adventure adventure_;
    /// <summary>
    ///地图数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.GoldMineGameResultExtraInfo.Types.Adventure Adventure {
      get { return adventure_; }
      set {
        adventure_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.GoldMineGameResultExtraInfo.Types.Collection collection_;
    /// <summary>
    /// 字母收集
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.GoldMineGameResultExtraInfo.Types.Collection Collection {
      get { return collection_; }
      set {
        collection_ = value;
      }
    }

    private uint luckCount_;
    /// <summary>
    /// freeSpin 马蹄铁数量
    /// </summary>
    public uint LuckCount {
      get { return luckCount_; }
      set {
        luckCount_ = value;
      }
    }

    private uint luckCountOld_;
    /// <summary>
    /// freeSpin 马蹄铁上次数量
    /// </summary>
    public uint LuckCountOld {
      get { return luckCountOld_; }
      set {
        luckCountOld_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (adventure_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Adventure);
      }
      if (collection_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Collection);
      }
      if (LuckCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LuckCount);
      }
      if (LuckCountOld != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LuckCountOld);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (adventure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Adventure);
      }
      if (collection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collection);
      }
      if (LuckCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LuckCount);
      }
      if (LuckCountOld != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LuckCountOld);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (adventure_ == null) {
              adventure_ = new global::DragonU3DSDK.Network.API.ILProtocol.GoldMineGameResultExtraInfo.Types.Adventure();
            }
            input.ReadMessage(adventure_);
            break;
          }
          case 18: {
            if (collection_ == null) {
              collection_ = new global::DragonU3DSDK.Network.API.ILProtocol.GoldMineGameResultExtraInfo.Types.Collection();
            }
            input.ReadMessage(collection_);
            break;
          }
          case 24: {
            LuckCount = input.ReadUInt32();
            break;
          }
          case 32: {
            LuckCountOld = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GoldMineGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class Adventure : pb::IMessage {
        private static readonly pb::MessageParser<Adventure> _parser = new pb::MessageParser<Adventure>(() => new Adventure());
        public static pb::MessageParser<Adventure> Parser { get { return _parser; } }

        private uint stepOld_;
        /// <summary>
        /// 上次地图地点
        /// </summary>
        public uint StepOld {
          get { return stepOld_; }
          set {
            stepOld_ = value;
          }
        }

        private uint numberRolled_;
        /// <summary>
        /// 骰子结果
        /// </summary>
        public uint NumberRolled {
          get { return numberRolled_; }
          set {
            numberRolled_ = value;
          }
        }

        private uint step_;
        /// <summary>
        /// 本次地图地点
        /// </summary>
        public uint Step {
          get { return step_; }
          set {
            step_ = value;
          }
        }

        private bool rolled_;
        /// <summary>
        /// 骰子已用
        /// </summary>
        public bool Rolled {
          get { return rolled_; }
          set {
            rolled_ = value;
          }
        }

        private bool stepDone_;
        /// <summary>
        /// 本次走图结算完毕
        /// </summary>
        public bool StepDone {
          get { return stepDone_; }
          set {
            stepDone_ = value;
          }
        }

        private ulong stepWin_;
        /// <summary>
        /// 本次走图目的地总赢钱奖励，注意不是win rate
        /// </summary>
        public ulong StepWin {
          get { return stepWin_; }
          set {
            stepWin_ = value;
          }
        }

        private uint stepPlus_;
        /// <summary>
        /// 本次走图目的地次数奖励
        /// </summary>
        public uint StepPlus {
          get { return stepPlus_; }
          set {
            stepPlus_ = value;
          }
        }

        private ulong jackpotWin_;
        /// <summary>
        /// jackpot赢钱
        /// </summary>
        public ulong JackpotWin {
          get { return jackpotWin_; }
          set {
            jackpotWin_ = value;
          }
        }

        private ulong totalWin_;
        /// <summary>
        /// 总赢钱
        /// </summary>
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        private bool isOver_;
        /// <summary>
        /// 地图玩法结束
        /// </summary>
        public bool IsOver {
          get { return isOver_; }
          set {
            isOver_ = value;
          }
        }

        private ulong panelWin_;
        /// <summary>
        /// 初始panel赢钱
        /// </summary>
        public ulong PanelWin {
          get { return panelWin_; }
          set {
            panelWin_ = value;
          }
        }

        private ulong letterWin_;
        /// <summary>
        /// 初始字母赢钱
        /// </summary>
        public ulong LetterWin {
          get { return letterWin_; }
          set {
            letterWin_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
            = pb::FieldCodec.ForMessage(106, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        /// <summary>
        /// 触发此状态时的panels
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
          get { return triggeringPanels_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (StepOld != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(StepOld);
          }
          if (NumberRolled != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(NumberRolled);
          }
          if (Step != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Step);
          }
          if (Rolled != false) {
            output.WriteRawTag(32);
            output.WriteBool(Rolled);
          }
          if (StepDone != false) {
            output.WriteRawTag(40);
            output.WriteBool(StepDone);
          }
          if (StepWin != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(StepWin);
          }
          if (JackpotWin != 0UL) {
            output.WriteRawTag(56);
            output.WriteUInt64(JackpotWin);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(64);
            output.WriteUInt64(TotalWin);
          }
          if (IsOver != false) {
            output.WriteRawTag(72);
            output.WriteBool(IsOver);
          }
          if (StepPlus != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(StepPlus);
          }
          if (PanelWin != 0UL) {
            output.WriteRawTag(88);
            output.WriteUInt64(PanelWin);
          }
          if (LetterWin != 0UL) {
            output.WriteRawTag(96);
            output.WriteUInt64(LetterWin);
          }
          triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (StepOld != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StepOld);
          }
          if (NumberRolled != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumberRolled);
          }
          if (Step != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Step);
          }
          if (Rolled != false) {
            size += 1 + 1;
          }
          if (StepDone != false) {
            size += 1 + 1;
          }
          if (StepWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StepWin);
          }
          if (StepPlus != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StepPlus);
          }
          if (JackpotWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotWin);
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          if (IsOver != false) {
            size += 1 + 1;
          }
          if (PanelWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PanelWin);
          }
          if (LetterWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LetterWin);
          }
          size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                StepOld = input.ReadUInt32();
                break;
              }
              case 16: {
                NumberRolled = input.ReadUInt32();
                break;
              }
              case 24: {
                Step = input.ReadUInt32();
                break;
              }
              case 32: {
                Rolled = input.ReadBool();
                break;
              }
              case 40: {
                StepDone = input.ReadBool();
                break;
              }
              case 48: {
                StepWin = input.ReadUInt64();
                break;
              }
              case 56: {
                JackpotWin = input.ReadUInt64();
                break;
              }
              case 64: {
                TotalWin = input.ReadUInt64();
                break;
              }
              case 72: {
                IsOver = input.ReadBool();
                break;
              }
              case 80: {
                StepPlus = input.ReadUInt32();
                break;
              }
              case 88: {
                PanelWin = input.ReadUInt64();
                break;
              }
              case 96: {
                LetterWin = input.ReadUInt64();
                break;
              }
              case 106: {
                triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class Collection : pb::IMessage {
        private static readonly pb::MessageParser<Collection> _parser = new pb::MessageParser<Collection>(() => new Collection());
        public static pb::MessageParser<Collection> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<uint> _repeated_last_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> last_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 上一轮
        /// </summary>
        public pbc::RepeatedField<uint> Last {
          get { return last_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_add_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> add_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 增量
        /// </summary>
        public pbc::RepeatedField<uint> Add {
          get { return add_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_now_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> now_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 本轮
        /// </summary>
        public pbc::RepeatedField<uint> Now {
          get { return now_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          last_.WriteTo(output, _repeated_last_codec);
          add_.WriteTo(output, _repeated_add_codec);
          now_.WriteTo(output, _repeated_now_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += last_.CalculateSize(_repeated_last_codec);
          size += add_.CalculateSize(_repeated_add_codec);
          size += now_.CalculateSize(_repeated_now_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 8: {
                last_.AddEntriesFrom(input, _repeated_last_codec);
                break;
              }
              case 18:
              case 16: {
                add_.AddEntriesFrom(input, _repeated_add_codec);
                break;
              }
              case 26:
              case 24: {
                now_.AddEntriesFrom(input, _repeated_now_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///================= GoldMine2 ================
  /// </summary>
  public sealed class GoldMine2GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<GoldMine2GameResultExtraInfo> _parser = new pb::MessageParser<GoldMine2GameResultExtraInfo>(() => new GoldMine2GameResultExtraInfo());
    public static pb::MessageParser<GoldMine2GameResultExtraInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.GoldMine2GameResultExtraInfo.Types.Adventure adventure_;
    /// <summary>
    ///地图数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.GoldMine2GameResultExtraInfo.Types.Adventure Adventure {
      get { return adventure_; }
      set {
        adventure_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.GoldMine2GameResultExtraInfo.Types.Collection collection_;
    /// <summary>
    /// 字母收集
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.GoldMine2GameResultExtraInfo.Types.Collection Collection {
      get { return collection_; }
      set {
        collection_ = value;
      }
    }

    private uint luckCount_;
    /// <summary>
    /// freeSpin 马蹄铁数量
    /// </summary>
    public uint LuckCount {
      get { return luckCount_; }
      set {
        luckCount_ = value;
      }
    }

    private uint luckCountOld_;
    /// <summary>
    /// freeSpin 马蹄铁上次数量
    /// </summary>
    public uint LuckCountOld {
      get { return luckCountOld_; }
      set {
        luckCountOld_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (adventure_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Adventure);
      }
      if (collection_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Collection);
      }
      if (LuckCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LuckCount);
      }
      if (LuckCountOld != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LuckCountOld);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (adventure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Adventure);
      }
      if (collection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collection);
      }
      if (LuckCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LuckCount);
      }
      if (LuckCountOld != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LuckCountOld);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (adventure_ == null) {
              adventure_ = new global::DragonU3DSDK.Network.API.ILProtocol.GoldMine2GameResultExtraInfo.Types.Adventure();
            }
            input.ReadMessage(adventure_);
            break;
          }
          case 18: {
            if (collection_ == null) {
              collection_ = new global::DragonU3DSDK.Network.API.ILProtocol.GoldMine2GameResultExtraInfo.Types.Collection();
            }
            input.ReadMessage(collection_);
            break;
          }
          case 24: {
            LuckCount = input.ReadUInt32();
            break;
          }
          case 32: {
            LuckCountOld = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GoldMine2GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class Adventure : pb::IMessage {
        private static readonly pb::MessageParser<Adventure> _parser = new pb::MessageParser<Adventure>(() => new Adventure());
        public static pb::MessageParser<Adventure> Parser { get { return _parser; } }

        private uint stepOld_;
        /// <summary>
        /// 上次地图地点
        /// </summary>
        public uint StepOld {
          get { return stepOld_; }
          set {
            stepOld_ = value;
          }
        }

        private uint numberRolled_;
        /// <summary>
        /// 骰子结果
        /// </summary>
        public uint NumberRolled {
          get { return numberRolled_; }
          set {
            numberRolled_ = value;
          }
        }

        private uint step_;
        /// <summary>
        /// 本次地图地点
        /// </summary>
        public uint Step {
          get { return step_; }
          set {
            step_ = value;
          }
        }

        private bool rolled_;
        /// <summary>
        /// 骰子已用
        /// </summary>
        public bool Rolled {
          get { return rolled_; }
          set {
            rolled_ = value;
          }
        }

        private bool stepDone_;
        /// <summary>
        /// 本次走图结算完毕
        /// </summary>
        public bool StepDone {
          get { return stepDone_; }
          set {
            stepDone_ = value;
          }
        }

        private ulong stepWin_;
        /// <summary>
        /// 本次走图目的地总赢钱奖励，注意不是win rate
        /// </summary>
        public ulong StepWin {
          get { return stepWin_; }
          set {
            stepWin_ = value;
          }
        }

        private uint stepPlus_;
        /// <summary>
        /// 本次走图目的地次数奖励
        /// </summary>
        public uint StepPlus {
          get { return stepPlus_; }
          set {
            stepPlus_ = value;
          }
        }

        private ulong jackpotWin_;
        /// <summary>
        /// jackpot赢钱
        /// </summary>
        public ulong JackpotWin {
          get { return jackpotWin_; }
          set {
            jackpotWin_ = value;
          }
        }

        private ulong totalWin_;
        /// <summary>
        /// 总赢钱
        /// </summary>
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        private bool isOver_;
        /// <summary>
        /// 地图玩法结束
        /// </summary>
        public bool IsOver {
          get { return isOver_; }
          set {
            isOver_ = value;
          }
        }

        private ulong panelWin_;
        /// <summary>
        /// 初始panel赢钱
        /// </summary>
        public ulong PanelWin {
          get { return panelWin_; }
          set {
            panelWin_ = value;
          }
        }

        private ulong letterWin_;
        /// <summary>
        /// 初始字母赢钱
        /// </summary>
        public ulong LetterWin {
          get { return letterWin_; }
          set {
            letterWin_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
            = pb::FieldCodec.ForMessage(106, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        /// <summary>
        /// 触发此状态时的panels
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
          get { return triggeringPanels_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (StepOld != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(StepOld);
          }
          if (NumberRolled != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(NumberRolled);
          }
          if (Step != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Step);
          }
          if (Rolled != false) {
            output.WriteRawTag(32);
            output.WriteBool(Rolled);
          }
          if (StepDone != false) {
            output.WriteRawTag(40);
            output.WriteBool(StepDone);
          }
          if (StepWin != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(StepWin);
          }
          if (JackpotWin != 0UL) {
            output.WriteRawTag(56);
            output.WriteUInt64(JackpotWin);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(64);
            output.WriteUInt64(TotalWin);
          }
          if (IsOver != false) {
            output.WriteRawTag(72);
            output.WriteBool(IsOver);
          }
          if (StepPlus != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(StepPlus);
          }
          if (PanelWin != 0UL) {
            output.WriteRawTag(88);
            output.WriteUInt64(PanelWin);
          }
          if (LetterWin != 0UL) {
            output.WriteRawTag(96);
            output.WriteUInt64(LetterWin);
          }
          triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (StepOld != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StepOld);
          }
          if (NumberRolled != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumberRolled);
          }
          if (Step != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Step);
          }
          if (Rolled != false) {
            size += 1 + 1;
          }
          if (StepDone != false) {
            size += 1 + 1;
          }
          if (StepWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StepWin);
          }
          if (StepPlus != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StepPlus);
          }
          if (JackpotWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotWin);
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          if (IsOver != false) {
            size += 1 + 1;
          }
          if (PanelWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PanelWin);
          }
          if (LetterWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LetterWin);
          }
          size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                StepOld = input.ReadUInt32();
                break;
              }
              case 16: {
                NumberRolled = input.ReadUInt32();
                break;
              }
              case 24: {
                Step = input.ReadUInt32();
                break;
              }
              case 32: {
                Rolled = input.ReadBool();
                break;
              }
              case 40: {
                StepDone = input.ReadBool();
                break;
              }
              case 48: {
                StepWin = input.ReadUInt64();
                break;
              }
              case 56: {
                JackpotWin = input.ReadUInt64();
                break;
              }
              case 64: {
                TotalWin = input.ReadUInt64();
                break;
              }
              case 72: {
                IsOver = input.ReadBool();
                break;
              }
              case 80: {
                StepPlus = input.ReadUInt32();
                break;
              }
              case 88: {
                PanelWin = input.ReadUInt64();
                break;
              }
              case 96: {
                LetterWin = input.ReadUInt64();
                break;
              }
              case 106: {
                triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class Collection : pb::IMessage {
        private static readonly pb::MessageParser<Collection> _parser = new pb::MessageParser<Collection>(() => new Collection());
        public static pb::MessageParser<Collection> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<uint> _repeated_last_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> last_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 上一轮
        /// </summary>
        public pbc::RepeatedField<uint> Last {
          get { return last_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_add_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> add_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 增量
        /// </summary>
        public pbc::RepeatedField<uint> Add {
          get { return add_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_now_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> now_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 本轮
        /// </summary>
        public pbc::RepeatedField<uint> Now {
          get { return now_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          last_.WriteTo(output, _repeated_last_codec);
          add_.WriteTo(output, _repeated_add_codec);
          now_.WriteTo(output, _repeated_now_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += last_.CalculateSize(_repeated_last_codec);
          size += add_.CalculateSize(_repeated_add_codec);
          size += now_.CalculateSize(_repeated_now_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 8: {
                last_.AddEntriesFrom(input, _repeated_last_codec);
                break;
              }
              case 18:
              case 16: {
                add_.AddEntriesFrom(input, _repeated_add_codec);
                break;
              }
              case 26:
              case 24: {
                now_.AddEntriesFrom(input, _repeated_now_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///================= LockItLinkDiamondMine ================
  /// </summary>
  public sealed class LockItLinkDiamondGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<LockItLinkDiamondGameResultExtraInfo> _parser = new pb::MessageParser<LockItLinkDiamondGameResultExtraInfo>(() => new LockItLinkDiamondGameResultExtraInfo());
    public static pb::MessageParser<LockItLinkDiamondGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pbc::MapField<uint, int>.Codec _map_dragReelPositionMap_codec
        = new pbc::MapField<uint, int>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForInt32(16), 10);
    private readonly pbc::MapField<uint, int> dragReelPositionMap_ = new pbc::MapField<uint, int>();
    /// <summary>
    /// key: col 0-4, value: 上下偏移; drag wild
    /// </summary>
    public pbc::MapField<uint, int> DragReelPositionMap {
      get { return dragReelPositionMap_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkData linkData_;
    /// <summary>
    /// link data
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkData LinkData {
      get { return linkData_; }
      set {
        linkData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dragReelPositionMap_.WriteTo(output, _map_dragReelPositionMap_codec);
      if (linkData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LinkData);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += dragReelPositionMap_.CalculateSize(_map_dragReelPositionMap_codec);
      if (linkData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dragReelPositionMap_.AddEntriesFrom(input, _map_dragReelPositionMap_codec);
            break;
          }
          case 18: {
            if (linkData_ == null) {
              linkData_ = new global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkData();
            }
            input.ReadMessage(linkData_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LockItLinkDiamondGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class LinkRegion : pb::IMessage {
        private static readonly pb::MessageParser<LinkRegion> _parser = new pb::MessageParser<LinkRegion>(() => new LinkRegion());
        public static pb::MessageParser<LinkRegion> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<uint> _repeated_connectedPositionIds_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> connectedPositionIds_ = new pbc::RepeatedField<uint>();
        public pbc::RepeatedField<uint> ConnectedPositionIds {
          get { return connectedPositionIds_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          connectedPositionIds_.WriteTo(output, _repeated_connectedPositionIds_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += connectedPositionIds_.CalculateSize(_repeated_connectedPositionIds_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 8: {
                connectedPositionIds_.AddEntriesFrom(input, _repeated_connectedPositionIds_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class LinkJackpot : pb::IMessage {
        private static readonly pb::MessageParser<LinkJackpot> _parser = new pb::MessageParser<LinkJackpot>(() => new LinkJackpot());
        public static pb::MessageParser<LinkJackpot> Parser { get { return _parser; } }

        private uint jackpotId_;
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private ulong jackpotPay_;
        public ulong JackpotPay {
          get { return jackpotPay_; }
          set {
            jackpotPay_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (JackpotId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(JackpotId);
          }
          if (JackpotPay != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(JackpotPay);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (JackpotPay != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 16: {
                JackpotPay = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class LinkItem : pb::IMessage {
        private static readonly pb::MessageParser<LinkItem> _parser = new pb::MessageParser<LinkItem>(() => new LinkItem());
        public static pb::MessageParser<LinkItem> Parser { get { return _parser; } }

        private uint positionId_;
        /// <summary>
        /// 位置
        /// </summary>
        public uint PositionId {
          get { return positionId_; }
          set {
            positionId_ = value;
          }
        }

        private uint symbolId_;
        /// <summary>
        /// 现实图标
        /// </summary>
        public uint SymbolId {
          get { return symbolId_; }
          set {
            symbolId_ = value;
          }
        }

        private ulong winRate_;
        /// <summary>
        /// 赢钱倍率
        /// </summary>
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (PositionId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PositionId);
          }
          if (SymbolId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(SymbolId);
          }
          if (WinRate != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(WinRate);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (PositionId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
          }
          if (SymbolId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
          }
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PositionId = input.ReadUInt32();
                break;
              }
              case 16: {
                SymbolId = input.ReadUInt32();
                break;
              }
              case 24: {
                WinRate = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class LinkData : pb::IMessage {
        private static readonly pb::MessageParser<LinkData> _parser = new pb::MessageParser<LinkData>(() => new LinkData());
        public static pb::MessageParser<LinkData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkItem> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkItem> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkItem>();
        /// <summary>
        /// 0 - 14
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkItem> Items {
          get { return items_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkRegion> _repeated_regions_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkRegion.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkRegion> regions_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkRegion>();
        /// <summary>
        /// 联通域
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkRegion> Regions {
          get { return regions_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkJackpot> _repeated_jackpots_codec
            = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkJackpot.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkJackpot> jackpots_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkJackpot>();
        /// <summary>
        /// 初始jackpots
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LockItLinkDiamondGameResultExtraInfo.Types.LinkJackpot> Jackpots {
          get { return jackpots_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          regions_.WriteTo(output, _repeated_regions_codec);
          jackpots_.WriteTo(output, _repeated_jackpots_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          size += regions_.CalculateSize(_repeated_regions_codec);
          size += jackpots_.CalculateSize(_repeated_jackpots_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 18: {
                regions_.AddEntriesFrom(input, _repeated_regions_codec);
                break;
              }
              case 26: {
                jackpots_.AddEntriesFrom(input, _repeated_jackpots_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///================= PharaohTreasure ================
  /// </summary>
  public sealed class PharaohTreasureGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<PharaohTreasureGameResultExtraInfo> _parser = new pb::MessageParser<PharaohTreasureGameResultExtraInfo>(() => new PharaohTreasureGameResultExtraInfo());
    public static pb::MessageParser<PharaohTreasureGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasureGameResultExtraInfo.Types.JackpotWord> _repeated_jackpotWords_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasureGameResultExtraInfo.Types.JackpotWord.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasureGameResultExtraInfo.Types.JackpotWord> jackpotWords_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasureGameResultExtraInfo.Types.JackpotWord>();
    /// <summary>
    /// jackpot word情况: GRAND, MAJOR, MINOR, MINI
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasureGameResultExtraInfo.Types.JackpotWord> JackpotWords {
      get { return jackpotWords_; }
    }

    private static readonly pb::FieldCodec<bool> _repeated_freeGameType_codec
        = pb::FieldCodec.ForBool(18);
    private readonly pbc::RepeatedField<bool> freeGameType_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// 当前freeSpin游戏的类型， 按照绿红紫顺序。 如果当前是绿紫feature，free_game_type为[true, false, true]
    /// </summary>
    public pbc::RepeatedField<bool> FreeGameType {
      get { return freeGameType_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasureGameResultExtraInfo.Types.FeatureState> _repeated_featureStates_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasureGameResultExtraInfo.Types.FeatureState.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasureGameResultExtraInfo.Types.FeatureState> featureStates_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasureGameResultExtraInfo.Types.FeatureState>();
    /// <summary>
    /// 当前三个魔法罐子的激活状态， 按照绿红紫顺序。
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasureGameResultExtraInfo.Types.FeatureState> FeatureStates {
      get { return featureStates_; }
    }

    private static readonly pbc::MapField<uint, int>.Codec _map_greenReelPositionMap_codec
        = new pbc::MapField<uint, int>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForInt32(16), 34);
    private readonly pbc::MapField<uint, int> greenReelPositionMap_ = new pbc::MapField<uint, int>();
    /// <summary>
    /// 当前绿色feature拉wild信息 key: col 0-4, value: 上下偏移; drag wild
    /// </summary>
    public pbc::MapField<uint, int> GreenReelPositionMap {
      get { return greenReelPositionMap_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      jackpotWords_.WriteTo(output, _repeated_jackpotWords_codec);
      freeGameType_.WriteTo(output, _repeated_freeGameType_codec);
      featureStates_.WriteTo(output, _repeated_featureStates_codec);
      greenReelPositionMap_.WriteTo(output, _map_greenReelPositionMap_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += jackpotWords_.CalculateSize(_repeated_jackpotWords_codec);
      size += freeGameType_.CalculateSize(_repeated_freeGameType_codec);
      size += featureStates_.CalculateSize(_repeated_featureStates_codec);
      size += greenReelPositionMap_.CalculateSize(_map_greenReelPositionMap_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            jackpotWords_.AddEntriesFrom(input, _repeated_jackpotWords_codec);
            break;
          }
          case 18:
          case 16: {
            freeGameType_.AddEntriesFrom(input, _repeated_freeGameType_codec);
            break;
          }
          case 26: {
            featureStates_.AddEntriesFrom(input, _repeated_featureStates_codec);
            break;
          }
          case 34: {
            greenReelPositionMap_.AddEntriesFrom(input, _map_greenReelPositionMap_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PharaohTreasureGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class JackpotWord : pb::IMessage {
        private static readonly pb::MessageParser<JackpotWord> _parser = new pb::MessageParser<JackpotWord>(() => new JackpotWord());
        public static pb::MessageParser<JackpotWord> Parser { get { return _parser; } }

        private uint jackpotId_;
        /// <summary>
        /// jackpotId
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private static readonly pb::FieldCodec<bool> _repeated_state_codec
            = pb::FieldCodec.ForBool(18);
        private readonly pbc::RepeatedField<bool> state_ = new pbc::RepeatedField<bool>();
        /// <summary>
        /// 最新字母收集情况, 例: 如果GRAND收集了G,A,D, state为[true, false, true, false, true]
        /// </summary>
        public pbc::RepeatedField<bool> State {
          get { return state_; }
        }

        private uint count_;
        /// <summary>
        /// 这一次spin中奖本单词的次数，多数情况是0或1，少数情况大于1（这一次spin让mini收集了2次!）。
        /// </summary>
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (JackpotId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(JackpotId);
          }
          state_.WriteTo(output, _repeated_state_codec);
          if (Count != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Count);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          size += state_.CalculateSize(_repeated_state_codec);
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 18:
              case 16: {
                state_.AddEntriesFrom(input, _repeated_state_codec);
                break;
              }
              case 24: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class FeatureState : pb::IMessage {
        private static readonly pb::MessageParser<FeatureState> _parser = new pb::MessageParser<FeatureState>(() => new FeatureState());
        public static pb::MessageParser<FeatureState> Parser { get { return _parser; } }

        private bool activated_;
        /// <summary>
        /// 激活
        /// </summary>
        public bool Activated {
          get { return activated_; }
          set {
            activated_ = value;
          }
        }

        private bool exaggerated_;
        /// <summary>
        /// 变大
        /// </summary>
        public bool Exaggerated {
          get { return exaggerated_; }
          set {
            exaggerated_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Activated != false) {
            output.WriteRawTag(8);
            output.WriteBool(Activated);
          }
          if (Exaggerated != false) {
            output.WriteRawTag(16);
            output.WriteBool(Exaggerated);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Activated != false) {
            size += 1 + 1;
          }
          if (Exaggerated != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Activated = input.ReadBool();
                break;
              }
              case 16: {
                Exaggerated = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///======================== MoneyLink ===========================
  /// </summary>
  public sealed class MoneyLinkGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<MoneyLinkGameResultExtraInfo> _parser = new pb::MessageParser<MoneyLinkGameResultExtraInfo>(() => new MoneyLinkGameResultExtraInfo());
    public static pb::MessageParser<MoneyLinkGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<uint> _repeated_doorPositionIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> doorPositionIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// sticky doors
    /// </summary>
    public pbc::RepeatedField<uint> DoorPositionIds {
      get { return doorPositionIds_; }
    }

    private static readonly pb::FieldCodec<uint> _repeated_lastDoorPositionIds_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> lastDoorPositionIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// last sticky doors
    /// </summary>
    public pbc::RepeatedField<uint> LastDoorPositionIds {
      get { return lastDoorPositionIds_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MoneyLinkGameResultExtraInfo.Types.LinkData linkData_;
    /// <summary>
    /// link数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MoneyLinkGameResultExtraInfo.Types.LinkData LinkData {
      get { return linkData_; }
      set {
        linkData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      doorPositionIds_.WriteTo(output, _repeated_doorPositionIds_codec);
      if (linkData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LinkData);
      }
      lastDoorPositionIds_.WriteTo(output, _repeated_lastDoorPositionIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += doorPositionIds_.CalculateSize(_repeated_doorPositionIds_codec);
      size += lastDoorPositionIds_.CalculateSize(_repeated_lastDoorPositionIds_codec);
      if (linkData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            doorPositionIds_.AddEntriesFrom(input, _repeated_doorPositionIds_codec);
            break;
          }
          case 18: {
            if (linkData_ == null) {
              linkData_ = new global::DragonU3DSDK.Network.API.ILProtocol.MoneyLinkGameResultExtraInfo.Types.LinkData();
            }
            input.ReadMessage(linkData_);
            break;
          }
          case 26:
          case 24: {
            lastDoorPositionIds_.AddEntriesFrom(input, _repeated_lastDoorPositionIds_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MoneyLinkGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class LinkData : pb::IMessage {
        private static readonly pb::MessageParser<LinkData> _parser = new pb::MessageParser<LinkData>(() => new LinkData());
        public static pb::MessageParser<LinkData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.MoneyLinkGameResultExtraInfo.Types.LinkData.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.MoneyLinkGameResultExtraInfo.Types.LinkData.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MoneyLinkGameResultExtraInfo.Types.LinkData.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MoneyLinkGameResultExtraInfo.Types.LinkData.Types.Item>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MoneyLinkGameResultExtraInfo.Types.LinkData.Types.Item> Items {
          get { return items_; }
        }

        private uint fullWinRate_;
        /// <summary>
        /// grandJackpot winRate, 没中是0
        /// </summary>
        public uint FullWinRate {
          get { return fullWinRate_; }
          set {
            fullWinRate_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          if (FullWinRate != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(FullWinRate);
          }
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          if (FullWinRate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FullWinRate);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 16: {
                FullWinRate = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LinkData message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private uint positionId_;
            /// <summary>
            /// 位置
            /// </summary>
            public uint PositionId {
              get { return positionId_; }
              set {
                positionId_ = value;
              }
            }

            private uint symbolId_;
            /// <summary>
            /// 现实图标
            /// </summary>
            public uint SymbolId {
              get { return symbolId_; }
              set {
                symbolId_ = value;
              }
            }

            private ulong winRate_;
            /// <summary>
            /// 赢钱倍率
            /// </summary>
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            private uint jackpotId_;
            /// <summary>
            /// jackpotId
            /// </summary>
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private ulong jackpotPay_;
            /// <summary>
            /// jackpot倍率
            /// </summary>
            public ulong JackpotPay {
              get { return jackpotPay_; }
              set {
                jackpotPay_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (PositionId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PositionId);
              }
              if (SymbolId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(SymbolId);
              }
              if (WinRate != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(WinRate);
              }
              if (JackpotId != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(JackpotId);
              }
              if (JackpotPay != 0UL) {
                output.WriteRawTag(40);
                output.WriteUInt64(JackpotPay);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (PositionId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
              }
              if (SymbolId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
              }
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              if (JackpotPay != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    PositionId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    SymbolId = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                  case 32: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    JackpotPay = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///*======================== LionGold ============================*/
  /// </summary>
  public sealed class LionGoldGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<LionGoldGameResultExtraInfo> _parser = new pb::MessageParser<LionGoldGameResultExtraInfo>(() => new LionGoldGameResultExtraInfo());
    public static pb::MessageParser<LionGoldGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData>.Codec _map_lockStateMap_codec
        = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData>.Codec(pb::FieldCodec.ForUInt64(8), pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Parser), 10);
    private readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData> lockStateMap_ = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData>();
    /// <summary>
    /// stick wild的位置表， key是bet
    /// </summary>
    public pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData> LockStateMap {
      get { return lockStateMap_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LinkData linkData_;
    public global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LinkData LinkData {
      get { return linkData_; }
      set {
        linkData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      lockStateMap_.WriteTo(output, _map_lockStateMap_codec);
      if (linkData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LinkData);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += lockStateMap_.CalculateSize(_map_lockStateMap_codec);
      if (linkData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            lockStateMap_.AddEntriesFrom(input, _map_lockStateMap_codec);
            break;
          }
          case 18: {
            if (linkData_ == null) {
              linkData_ = new global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LinkData();
            }
            input.ReadMessage(linkData_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LionGoldGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class LockData : pb::IMessage {
        private static readonly pb::MessageParser<LockData> _parser = new pb::MessageParser<LockData>(() => new LockData());
        public static pb::MessageParser<LockData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item>();
        /// <summary>
        /// 框的位置
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item> Items {
          get { return items_; }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.ItemDiff startDiff_;
        /// <summary>
        /// 开始触发的框
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.ItemDiff StartDiff {
          get { return startDiff_; }
          set {
            startDiff_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.ItemDiff panelDiff_;
        /// <summary>
        /// panel龙头触发的框
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.ItemDiff PanelDiff {
          get { return panelDiff_; }
          set {
            panelDiff_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.ItemDiff> _repeated_featureDiffs_codec
            = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.ItemDiff.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.ItemDiff> featureDiffs_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.ItemDiff>();
        /// <summary>
        /// feature促发的龙头
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.ItemDiff> FeatureDiffs {
          get { return featureDiffs_; }
        }

        private bool isOver_;
        /// <summary>
        /// 此次返回之后，item数据作废，在下一把重新开始
        /// </summary>
        public bool IsOver {
          get { return isOver_; }
          set {
            isOver_ = value;
          }
        }

        private bool isTrigger_;
        /// <summary>
        /// 此次是龙头结算
        /// </summary>
        public bool IsTrigger {
          get { return isTrigger_; }
          set {
            isTrigger_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item> _repeated_triggeringItems_codec
            = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item> triggeringItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item>();
        /// <summary>
        /// 龙头结算事先变成的wild的items
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item> TriggeringItems {
          get { return triggeringItems_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          if (startDiff_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(StartDiff);
          }
          if (panelDiff_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(PanelDiff);
          }
          featureDiffs_.WriteTo(output, _repeated_featureDiffs_codec);
          if (IsOver != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsOver);
          }
          if (IsTrigger != false) {
            output.WriteRawTag(48);
            output.WriteBool(IsTrigger);
          }
          triggeringItems_.WriteTo(output, _repeated_triggeringItems_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          if (startDiff_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartDiff);
          }
          if (panelDiff_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PanelDiff);
          }
          size += featureDiffs_.CalculateSize(_repeated_featureDiffs_codec);
          if (IsOver != false) {
            size += 1 + 1;
          }
          if (IsTrigger != false) {
            size += 1 + 1;
          }
          size += triggeringItems_.CalculateSize(_repeated_triggeringItems_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 18: {
                if (startDiff_ == null) {
                  startDiff_ = new global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.ItemDiff();
                }
                input.ReadMessage(startDiff_);
                break;
              }
              case 26: {
                if (panelDiff_ == null) {
                  panelDiff_ = new global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.ItemDiff();
                }
                input.ReadMessage(panelDiff_);
                break;
              }
              case 34: {
                featureDiffs_.AddEntriesFrom(input, _repeated_featureDiffs_codec);
                break;
              }
              case 40: {
                IsOver = input.ReadBool();
                break;
              }
              case 48: {
                IsTrigger = input.ReadBool();
                break;
              }
              case 58: {
                triggeringItems_.AddEntriesFrom(input, _repeated_triggeringItems_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LockData message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private uint x_;
            /// <summary>
            /// 位置x
            /// </summary>
            public uint X {
              get { return x_; }
              set {
                x_ = value;
              }
            }

            private uint y_;
            /// <summary>
            /// 位置y
            /// </summary>
            public uint Y {
              get { return y_; }
              set {
                y_ = value;
              }
            }

            private uint colour_;
            /// <summary>
            /// 颜色， 0无，1红色，2绿色
            /// </summary>
            public uint Colour {
              get { return colour_; }
              set {
                colour_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (X != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(X);
              }
              if (Y != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Y);
              }
              if (Colour != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(Colour);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (X != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
              }
              if (Y != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
              }
              if (Colour != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Colour);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    X = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Y = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    Colour = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

          public sealed class ItemDiff : pb::IMessage {
            private static readonly pb::MessageParser<ItemDiff> _parser = new pb::MessageParser<ItemDiff>(() => new ItemDiff());
            public static pb::MessageParser<ItemDiff> Parser { get { return _parser; } }

            private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item> _repeated_items_codec
                = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item.Parser);
            private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item>();
            public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LockData.Types.Item> Items {
              get { return items_; }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              items_.WriteTo(output, _repeated_items_codec);
            }

            public int CalculateSize() {
              int size = 0;
              size += items_.CalculateSize(_repeated_items_codec);
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 10: {
                    items_.AddEntriesFrom(input, _repeated_items_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed class LinkData : pb::IMessage {
        private static readonly pb::MessageParser<LinkData> _parser = new pb::MessageParser<LinkData>(() => new LinkData());
        public static pb::MessageParser<LinkData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LinkData.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LinkData.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LinkData.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LinkData.Types.Item>();
        /// <summary>
        /// link数据
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LinkData.Types.Item> Items {
          get { return items_; }
        }

        private ulong grandJackpot_;
        /// <summary>
        /// grandJackpot的win rate，没中是0
        /// </summary>
        public ulong GrandJackpot {
          get { return grandJackpot_; }
          set {
            grandJackpot_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LinkData.Types.Item> _repeated_dragonTriggeringItems_codec
            = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LinkData.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LinkData.Types.Item> dragonTriggeringItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LinkData.Types.Item>();
        /// <summary>
        /// 来自龙头结算中变绿的items
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LionGoldGameResultExtraInfo.Types.LinkData.Types.Item> DragonTriggeringItems {
          get { return dragonTriggeringItems_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          if (GrandJackpot != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(GrandJackpot);
          }
          dragonTriggeringItems_.WriteTo(output, _repeated_dragonTriggeringItems_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          if (GrandJackpot != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GrandJackpot);
          }
          size += dragonTriggeringItems_.CalculateSize(_repeated_dragonTriggeringItems_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 16: {
                GrandJackpot = input.ReadUInt64();
                break;
              }
              case 26: {
                dragonTriggeringItems_.AddEntriesFrom(input, _repeated_dragonTriggeringItems_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LinkData message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private uint positionId_;
            /// <summary>
            /// 位置
            /// </summary>
            public uint PositionId {
              get { return positionId_; }
              set {
                positionId_ = value;
              }
            }

            private uint symbolId_;
            /// <summary>
            /// 现实图标
            /// </summary>
            public uint SymbolId {
              get { return symbolId_; }
              set {
                symbolId_ = value;
              }
            }

            private ulong winRate_;
            /// <summary>
            /// 赢钱倍率
            /// </summary>
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            private uint jackpotId_;
            /// <summary>
            /// jackpotId
            /// </summary>
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private ulong jackpotPay_;
            /// <summary>
            /// jackpot倍率
            /// </summary>
            public ulong JackpotPay {
              get { return jackpotPay_; }
              set {
                jackpotPay_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (PositionId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PositionId);
              }
              if (SymbolId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(SymbolId);
              }
              if (WinRate != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(WinRate);
              }
              if (JackpotId != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(JackpotId);
              }
              if (JackpotPay != 0UL) {
                output.WriteRawTag(40);
                output.WriteUInt64(JackpotPay);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (PositionId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
              }
              if (SymbolId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
              }
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              if (JackpotPay != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    PositionId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    SymbolId = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                  case 32: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    JackpotPay = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///*======================== RisingFortune ============================*/
  /// </summary>
  public sealed class RisingFortuneGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<RisingFortuneGameResultExtraInfo> _parser = new pb::MessageParser<RisingFortuneGameResultExtraInfo>(() => new RisingFortuneGameResultExtraInfo());
    public static pb::MessageParser<RisingFortuneGameResultExtraInfo> Parser { get { return _parser; } }

    private uint pickJackpotId_;
    /// <summary>
    /// uint64 bet = 1; // 进入feature的bet，可能前段用不到
    /// </summary>
    public uint PickJackpotId {
      get { return pickJackpotId_; }
      set {
        pickJackpotId_ = value;
      }
    }

    private bool picked_;
    /// <summary>
    /// pick玩法开始， picked = false说明当前有pick玩法
    /// </summary>
    public bool Picked {
      get { return picked_; }
      set {
        picked_ = value;
      }
    }

    private bool chosen_;
    /// <summary>
    /// 2选1， bonus请求如果json，param字段都没填就是 选link，否则选freeSpin
    /// </summary>
    public bool Chosen {
      get { return chosen_; }
      set {
        chosen_ = value;
      }
    }

    private ulong freeGameWinRate_;
    /// <summary>
    ///uint64 choose_pre_win = 6; // 进入2选1的panelWin， 可能前端用不到
    /// </summary>
    public ulong FreeGameWinRate {
      get { return freeGameWinRate_; }
      set {
        freeGameWinRate_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.RisingFortuneGameResultExtraInfo.Types.LinkData linkData_;
    /// <summary>
    /// link数据源
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.RisingFortuneGameResultExtraInfo.Types.LinkData LinkData {
      get { return linkData_; }
      set {
        linkData_ = value;
      }
    }

    private uint greenMultiplier_;
    /// <summary>
    /// link中绿色的翻倍
    /// </summary>
    public uint GreenMultiplier {
      get { return greenMultiplier_; }
      set {
        greenMultiplier_ = value;
      }
    }

    private ulong freeGameCoinTotalWinRate_;
    /// <summary>
    /// freeGame的金币积累
    /// </summary>
    public ulong FreeGameCoinTotalWinRate {
      get { return freeGameCoinTotalWinRate_; }
      set {
        freeGameCoinTotalWinRate_ = value;
      }
    }

    private bool exaggerated_;
    /// <summary>
    /// 碗变不变大
    /// </summary>
    public bool Exaggerated {
      get { return exaggerated_; }
      set {
        exaggerated_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PickJackpotId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PickJackpotId);
      }
      if (Picked != false) {
        output.WriteRawTag(24);
        output.WriteBool(Picked);
      }
      if (Chosen != false) {
        output.WriteRawTag(40);
        output.WriteBool(Chosen);
      }
      if (FreeGameWinRate != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(FreeGameWinRate);
      }
      if (linkData_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(LinkData);
      }
      if (GreenMultiplier != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(GreenMultiplier);
      }
      if (FreeGameCoinTotalWinRate != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(FreeGameCoinTotalWinRate);
      }
      if (Exaggerated != false) {
        output.WriteRawTag(96);
        output.WriteBool(Exaggerated);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PickJackpotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PickJackpotId);
      }
      if (Picked != false) {
        size += 1 + 1;
      }
      if (Chosen != false) {
        size += 1 + 1;
      }
      if (FreeGameWinRate != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FreeGameWinRate);
      }
      if (linkData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkData);
      }
      if (GreenMultiplier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GreenMultiplier);
      }
      if (FreeGameCoinTotalWinRate != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FreeGameCoinTotalWinRate);
      }
      if (Exaggerated != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            PickJackpotId = input.ReadUInt32();
            break;
          }
          case 24: {
            Picked = input.ReadBool();
            break;
          }
          case 40: {
            Chosen = input.ReadBool();
            break;
          }
          case 56: {
            FreeGameWinRate = input.ReadUInt64();
            break;
          }
          case 74: {
            if (linkData_ == null) {
              linkData_ = new global::DragonU3DSDK.Network.API.ILProtocol.RisingFortuneGameResultExtraInfo.Types.LinkData();
            }
            input.ReadMessage(linkData_);
            break;
          }
          case 80: {
            GreenMultiplier = input.ReadUInt32();
            break;
          }
          case 88: {
            FreeGameCoinTotalWinRate = input.ReadUInt64();
            break;
          }
          case 96: {
            Exaggerated = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RisingFortuneGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class LinkData : pb::IMessage {
        private static readonly pb::MessageParser<LinkData> _parser = new pb::MessageParser<LinkData>(() => new LinkData());
        public static pb::MessageParser<LinkData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.RisingFortuneGameResultExtraInfo.Types.LinkData.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.RisingFortuneGameResultExtraInfo.Types.LinkData.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.RisingFortuneGameResultExtraInfo.Types.LinkData.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.RisingFortuneGameResultExtraInfo.Types.LinkData.Types.Item>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.RisingFortuneGameResultExtraInfo.Types.LinkData.Types.Item> Items {
          get { return items_; }
        }

        private ulong fullWinRate_;
        public ulong FullWinRate {
          get { return fullWinRate_; }
          set {
            fullWinRate_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          if (FullWinRate != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(FullWinRate);
          }
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          if (FullWinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FullWinRate);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 16: {
                FullWinRate = input.ReadUInt64();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LinkData message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private uint positionId_;
            /// <summary>
            /// 位置
            /// </summary>
            public uint PositionId {
              get { return positionId_; }
              set {
                positionId_ = value;
              }
            }

            private uint symbolId_;
            /// <summary>
            /// 现实图标
            /// </summary>
            public uint SymbolId {
              get { return symbolId_; }
              set {
                symbolId_ = value;
              }
            }

            private ulong winRate_;
            /// <summary>
            /// 赢钱倍率
            /// </summary>
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (PositionId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PositionId);
              }
              if (SymbolId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(SymbolId);
              }
              if (WinRate != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(WinRate);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (PositionId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
              }
              if (SymbolId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
              }
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    PositionId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    SymbolId = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///*======================== FireLinkByTheBay ============================*/
  /// </summary>
  public sealed class FireLinkByTheBayGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<FireLinkByTheBayGameResultExtraInfo> _parser = new pb::MessageParser<FireLinkByTheBayGameResultExtraInfo>(() => new FireLinkByTheBayGameResultExtraInfo());
    public static pb::MessageParser<FireLinkByTheBayGameResultExtraInfo> Parser { get { return _parser; } }

    private uint pepperCount_;
    /// <summary>
    /// 辣椒数量； 看情况需不需要添加old_pepper_count
    /// </summary>
    public uint PepperCount {
      get { return pepperCount_; }
      set {
        pepperCount_ = value;
      }
    }

    private uint linkHeight_;
    /// <summary>
    ///link玩法解锁那高度 普通一开始是4，最高8。每一级提升需要的辣椒数分别是 8, 12, 16, 20; 看情况需不需要添加old_link_height；
    /// </summary>
    public uint LinkHeight {
      get { return linkHeight_; }
      set {
        linkHeight_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBayGameResultExtraInfo.Types.LinkData linkData_;
    /// <summary>
    /// link数据，positionId从0到39
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBayGameResultExtraInfo.Types.LinkData LinkData {
      get { return linkData_; }
      set {
        linkData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PepperCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PepperCount);
      }
      if (LinkHeight != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LinkHeight);
      }
      if (linkData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LinkData);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PepperCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PepperCount);
      }
      if (LinkHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LinkHeight);
      }
      if (linkData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PepperCount = input.ReadUInt32();
            break;
          }
          case 16: {
            LinkHeight = input.ReadUInt32();
            break;
          }
          case 26: {
            if (linkData_ == null) {
              linkData_ = new global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBayGameResultExtraInfo.Types.LinkData();
            }
            input.ReadMessage(linkData_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FireLinkByTheBayGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class LinkData : pb::IMessage {
        private static readonly pb::MessageParser<LinkData> _parser = new pb::MessageParser<LinkData>(() => new LinkData());
        public static pb::MessageParser<LinkData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBayGameResultExtraInfo.Types.LinkData.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBayGameResultExtraInfo.Types.LinkData.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBayGameResultExtraInfo.Types.LinkData.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBayGameResultExtraInfo.Types.LinkData.Types.Item>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBayGameResultExtraInfo.Types.LinkData.Types.Item> Items {
          get { return items_; }
        }

        private static readonly pbc::MapField<uint, uint>.Codec _map_reelMapping_codec
            = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 18);
        private readonly pbc::MapField<uint, uint> reelMapping_ = new pbc::MapField<uint, uint>();
        /// <summary>
        /// linkReels轴映射
        /// </summary>
        public pbc::MapField<uint, uint> ReelMapping {
          get { return reelMapping_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          reelMapping_.WriteTo(output, _map_reelMapping_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          size += reelMapping_.CalculateSize(_map_reelMapping_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 18: {
                reelMapping_.AddEntriesFrom(input, _map_reelMapping_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LinkData message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private uint positionId_;
            /// <summary>
            /// 位置
            /// </summary>
            public uint PositionId {
              get { return positionId_; }
              set {
                positionId_ = value;
              }
            }

            private uint symbolId_;
            /// <summary>
            /// 现实图标
            /// </summary>
            public uint SymbolId {
              get { return symbolId_; }
              set {
                symbolId_ = value;
              }
            }

            private ulong winRate_;
            /// <summary>
            /// 赢钱倍率
            /// </summary>
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            private uint jackpotId_;
            /// <summary>
            /// jackpot id
            /// </summary>
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private ulong jackpotPay_;
            /// <summary>
            /// jackpot pay
            /// </summary>
            public ulong JackpotPay {
              get { return jackpotPay_; }
              set {
                jackpotPay_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (PositionId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PositionId);
              }
              if (SymbolId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(SymbolId);
              }
              if (WinRate != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(WinRate);
              }
              if (JackpotId != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(JackpotId);
              }
              if (JackpotPay != 0UL) {
                output.WriteRawTag(40);
                output.WriteUInt64(JackpotPay);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (PositionId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
              }
              if (SymbolId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
              }
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              if (JackpotPay != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    PositionId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    SymbolId = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                  case 32: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    JackpotPay = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///*=========================== CrazyTrain ===============================*/
  /// </summary>
  public sealed class CrazyTrainGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<CrazyTrainGameResultExtraInfo> _parser = new pb::MessageParser<CrazyTrainGameResultExtraInfo>(() => new CrazyTrainGameResultExtraInfo());
    public static pb::MessageParser<CrazyTrainGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<uint> _repeated_freeSpinCounts_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> freeSpinCounts_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 每列火车的freeSpinCount
    /// </summary>
    public pbc::RepeatedField<uint> FreeSpinCounts {
      get { return freeSpinCounts_; }
    }

    private static readonly pb::FieldCodec<uint> _repeated_goldenPositionIds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> goldenPositionIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 金色火车(stickyWild)的位置，stickyWild
    /// </summary>
    public pbc::RepeatedField<uint> GoldenPositionIds {
      get { return goldenPositionIds_; }
    }

    private ulong bet_;
    /// <summary>
    /// 进入bonus的bet
    /// </summary>
    public ulong Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    private ulong panelWin_;
    /// <summary>
    /// 进入bonus的panel_win;
    /// </summary>
    public ulong PanelWin {
      get { return panelWin_; }
      set {
        panelWin_ = value;
      }
    }

    private bool chosen_;
    /// <summary>
    /// bonus选择完了吗
    /// </summary>
    public bool Chosen {
      get { return chosen_; }
      set {
        chosen_ = value;
      }
    }

    private ulong mapBase_;
    /// <summary>
    /// bonus基础赢钱
    /// </summary>
    public ulong MapBase {
      get { return mapBase_; }
      set {
        mapBase_ = value;
      }
    }

    private bool chosenAgain_;
    /// <summary>
    /// bonus再次确认
    /// </summary>
    public bool ChosenAgain {
      get { return chosenAgain_; }
      set {
        chosenAgain_ = value;
      }
    }

    private uint mapMultiplier_;
    /// <summary>
    /// bonus倍率
    /// </summary>
    public uint MapMultiplier {
      get { return mapMultiplier_; }
      set {
        mapMultiplier_ = value;
      }
    }

    private uint mapStep_;
    /// <summary>
    /// 进度槽step
    /// </summary>
    public uint MapStep {
      get { return mapStep_; }
      set {
        mapStep_ = value;
      }
    }

    private uint mapStepTotal_;
    /// <summary>
    /// 进度槽总step
    /// </summary>
    public uint MapStepTotal {
      get { return mapStepTotal_; }
      set {
        mapStepTotal_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      freeSpinCounts_.WriteTo(output, _repeated_freeSpinCounts_codec);
      goldenPositionIds_.WriteTo(output, _repeated_goldenPositionIds_codec);
      if (Bet != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Bet);
      }
      if (PanelWin != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(PanelWin);
      }
      if (Chosen != false) {
        output.WriteRawTag(40);
        output.WriteBool(Chosen);
      }
      if (MapBase != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(MapBase);
      }
      if (ChosenAgain != false) {
        output.WriteRawTag(56);
        output.WriteBool(ChosenAgain);
      }
      if (MapMultiplier != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(MapMultiplier);
      }
      if (MapStep != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MapStep);
      }
      if (MapStepTotal != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MapStepTotal);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += freeSpinCounts_.CalculateSize(_repeated_freeSpinCounts_codec);
      size += goldenPositionIds_.CalculateSize(_repeated_goldenPositionIds_codec);
      if (Bet != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
      }
      if (PanelWin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PanelWin);
      }
      if (Chosen != false) {
        size += 1 + 1;
      }
      if (MapBase != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MapBase);
      }
      if (ChosenAgain != false) {
        size += 1 + 1;
      }
      if (MapMultiplier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapMultiplier);
      }
      if (MapStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapStep);
      }
      if (MapStepTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapStepTotal);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            freeSpinCounts_.AddEntriesFrom(input, _repeated_freeSpinCounts_codec);
            break;
          }
          case 18:
          case 16: {
            goldenPositionIds_.AddEntriesFrom(input, _repeated_goldenPositionIds_codec);
            break;
          }
          case 24: {
            Bet = input.ReadUInt64();
            break;
          }
          case 32: {
            PanelWin = input.ReadUInt64();
            break;
          }
          case 40: {
            Chosen = input.ReadBool();
            break;
          }
          case 48: {
            MapBase = input.ReadUInt64();
            break;
          }
          case 56: {
            ChosenAgain = input.ReadBool();
            break;
          }
          case 72: {
            MapMultiplier = input.ReadUInt32();
            break;
          }
          case 80: {
            MapStep = input.ReadUInt32();
            break;
          }
          case 88: {
            MapStepTotal = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*=========================== LittleImp ===============================*/
  /// </summary>
  public sealed class LittleImpGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<LittleImpGameResultExtraInfo> _parser = new pb::MessageParser<LittleImpGameResultExtraInfo>(() => new LittleImpGameResultExtraInfo());
    public static pb::MessageParser<LittleImpGameResultExtraInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.LittleImpGameResultExtraInfo.Types.BonusGame bonusGame_;
    /// <summary>
    /// bonus数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.LittleImpGameResultExtraInfo.Types.BonusGame BonusGame {
      get { return bonusGame_; }
      set {
        bonusGame_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.LittleImpGameResultExtraInfo.Types.FreeGame freeGame_;
    /// <summary>
    /// freeSpin数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.LittleImpGameResultExtraInfo.Types.FreeGame FreeGame {
      get { return freeGame_; }
      set {
        freeGame_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bonusGame_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BonusGame);
      }
      if (freeGame_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FreeGame);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bonusGame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BonusGame);
      }
      if (freeGame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreeGame);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bonusGame_ == null) {
              bonusGame_ = new global::DragonU3DSDK.Network.API.ILProtocol.LittleImpGameResultExtraInfo.Types.BonusGame();
            }
            input.ReadMessage(bonusGame_);
            break;
          }
          case 18: {
            if (freeGame_ == null) {
              freeGame_ = new global::DragonU3DSDK.Network.API.ILProtocol.LittleImpGameResultExtraInfo.Types.FreeGame();
            }
            input.ReadMessage(freeGame_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LittleImpGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class BonusGame : pb::IMessage {
        private static readonly pb::MessageParser<BonusGame> _parser = new pb::MessageParser<BonusGame>(() => new BonusGame());
        public static pb::MessageParser<BonusGame> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        /// <summary>
        /// 触发panels
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
          get { return triggeringPanels_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_miniPanels_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> miniPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        /// <summary>
        /// 小slot
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> MiniPanels {
          get { return miniPanels_; }
        }

        private uint miniProgress_;
        /// <summary>
        /// bonus进度  mini_progress >= mini_panels.length时 bonus完毕
        /// </summary>
        public uint MiniProgress {
          get { return miniProgress_; }
          set {
            miniProgress_ = value;
          }
        }

        private static readonly pb::FieldCodec<uint> _repeated_miniGameIds_codec
            = pb::FieldCodec.ForUInt32(34);
        private readonly pbc::RepeatedField<uint> miniGameIds_ = new pbc::RepeatedField<uint>();
        /// <summary>
        ///小slot编号， x2,x3,x5三种mini slot的id分别是1 2 3
        /// </summary>
        public pbc::RepeatedField<uint> MiniGameIds {
          get { return miniGameIds_; }
        }

        private ulong bet_;
        /// <summary>
        /// 进入bonus的bet
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private ulong preWin_;
        /// <summary>
        /// 进入bonus的panel win
        /// </summary>
        public ulong PreWin {
          get { return preWin_; }
          set {
            preWin_ = value;
          }
        }

        private ulong totalWin_;
        /// <summary>
        /// bonus总赢钱
        /// </summary>
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
          miniPanels_.WriteTo(output, _repeated_miniPanels_codec);
          if (MiniProgress != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(MiniProgress);
          }
          miniGameIds_.WriteTo(output, _repeated_miniGameIds_codec);
          if (Bet != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Bet);
          }
          if (PreWin != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(PreWin);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(56);
            output.WriteUInt64(TotalWin);
          }
        }

        public int CalculateSize() {
          int size = 0;
          size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
          size += miniPanels_.CalculateSize(_repeated_miniPanels_codec);
          if (MiniProgress != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MiniProgress);
          }
          size += miniGameIds_.CalculateSize(_repeated_miniGameIds_codec);
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (PreWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PreWin);
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
                break;
              }
              case 18: {
                miniPanels_.AddEntriesFrom(input, _repeated_miniPanels_codec);
                break;
              }
              case 24: {
                MiniProgress = input.ReadUInt32();
                break;
              }
              case 34:
              case 32: {
                miniGameIds_.AddEntriesFrom(input, _repeated_miniGameIds_codec);
                break;
              }
              case 40: {
                Bet = input.ReadUInt64();
                break;
              }
              case 48: {
                PreWin = input.ReadUInt64();
                break;
              }
              case 56: {
                TotalWin = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class FreeGame : pb::IMessage {
        private static readonly pb::MessageParser<FreeGame> _parser = new pb::MessageParser<FreeGame>(() => new FreeGame());
        public static pb::MessageParser<FreeGame> Parser { get { return _parser; } }

        private uint startingPanelCount_;
        /// <summary>
        /// 开启freeGame时的起始panel数
        /// </summary>
        public uint StartingPanelCount {
          get { return startingPanelCount_; }
          set {
            startingPanelCount_ = value;
          }
        }

        private uint currentPanelCount_;
        /// <summary>
        /// 当前panel数
        /// </summary>
        public uint CurrentPanelCount {
          get { return currentPanelCount_; }
          set {
            currentPanelCount_ = value;
          }
        }

        private uint lastBombCount_;
        /// <summary>
        /// 上一次spin炸弹数量
        /// </summary>
        public uint LastBombCount {
          get { return lastBombCount_; }
          set {
            lastBombCount_ = value;
          }
        }

        private uint bombCount_;
        /// <summary>
        /// 当前炸弹数量
        /// </summary>
        public uint BombCount {
          get { return bombCount_; }
          set {
            bombCount_ = value;
          }
        }

        private uint bombLeftNextLevel_;
        /// <summary>
        /// 到下一级还缺少的炸弹数量
        /// </summary>
        public uint BombLeftNextLevel {
          get { return bombLeftNextLevel_; }
          set {
            bombLeftNextLevel_ = value;
          }
        }

        private uint level_;
        /// <summary>
        /// freeGame等级。 5, 10是superFree, avgBet 20是megaFree, avgBet，到20级settle后会变成0级
        /// </summary>
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (StartingPanelCount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(StartingPanelCount);
          }
          if (CurrentPanelCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(CurrentPanelCount);
          }
          if (LastBombCount != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(LastBombCount);
          }
          if (BombCount != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(BombCount);
          }
          if (BombLeftNextLevel != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(BombLeftNextLevel);
          }
          if (Level != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Level);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (StartingPanelCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartingPanelCount);
          }
          if (CurrentPanelCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentPanelCount);
          }
          if (LastBombCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastBombCount);
          }
          if (BombCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BombCount);
          }
          if (BombLeftNextLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BombLeftNextLevel);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                StartingPanelCount = input.ReadUInt32();
                break;
              }
              case 16: {
                CurrentPanelCount = input.ReadUInt32();
                break;
              }
              case 24: {
                LastBombCount = input.ReadUInt32();
                break;
              }
              case 32: {
                BombCount = input.ReadUInt32();
                break;
              }
              case 40: {
                BombLeftNextLevel = input.ReadUInt32();
                break;
              }
              case 48: {
                Level = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*=========================== LittleImp2 ===============================*/
  /// </summary>
  public sealed class LittleImp2GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<LittleImp2GameResultExtraInfo> _parser = new pb::MessageParser<LittleImp2GameResultExtraInfo>(() => new LittleImp2GameResultExtraInfo());
    public static pb::MessageParser<LittleImp2GameResultExtraInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.LittleImp2GameResultExtraInfo.Types.BonusGame bonusGame_;
    /// <summary>
    /// bonus数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.LittleImp2GameResultExtraInfo.Types.BonusGame BonusGame {
      get { return bonusGame_; }
      set {
        bonusGame_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.LittleImp2GameResultExtraInfo.Types.FreeGame freeGame_;
    /// <summary>
    /// freeSpin数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.LittleImp2GameResultExtraInfo.Types.FreeGame FreeGame {
      get { return freeGame_; }
      set {
        freeGame_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (bonusGame_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BonusGame);
      }
      if (freeGame_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FreeGame);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (bonusGame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BonusGame);
      }
      if (freeGame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreeGame);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bonusGame_ == null) {
              bonusGame_ = new global::DragonU3DSDK.Network.API.ILProtocol.LittleImp2GameResultExtraInfo.Types.BonusGame();
            }
            input.ReadMessage(bonusGame_);
            break;
          }
          case 18: {
            if (freeGame_ == null) {
              freeGame_ = new global::DragonU3DSDK.Network.API.ILProtocol.LittleImp2GameResultExtraInfo.Types.FreeGame();
            }
            input.ReadMessage(freeGame_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LittleImp2GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class BonusGame : pb::IMessage {
        private static readonly pb::MessageParser<BonusGame> _parser = new pb::MessageParser<BonusGame>(() => new BonusGame());
        public static pb::MessageParser<BonusGame> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        /// <summary>
        /// 触发panels
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
          get { return triggeringPanels_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_miniPanels_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> miniPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        /// <summary>
        /// 小slot
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> MiniPanels {
          get { return miniPanels_; }
        }

        private uint miniProgress_;
        /// <summary>
        /// bonus进度  mini_progress >= mini_panels.length时 bonus完毕
        /// </summary>
        public uint MiniProgress {
          get { return miniProgress_; }
          set {
            miniProgress_ = value;
          }
        }

        private static readonly pb::FieldCodec<uint> _repeated_miniGameIds_codec
            = pb::FieldCodec.ForUInt32(34);
        private readonly pbc::RepeatedField<uint> miniGameIds_ = new pbc::RepeatedField<uint>();
        /// <summary>
        ///小slot编号， x2,x3,x5三种mini slot的id分别是1 2 3
        /// </summary>
        public pbc::RepeatedField<uint> MiniGameIds {
          get { return miniGameIds_; }
        }

        private ulong bet_;
        /// <summary>
        /// 进入bonus的bet
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private ulong preWin_;
        /// <summary>
        /// 进入bonus的panel win
        /// </summary>
        public ulong PreWin {
          get { return preWin_; }
          set {
            preWin_ = value;
          }
        }

        private ulong totalWin_;
        /// <summary>
        /// bonus总赢钱
        /// </summary>
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
          miniPanels_.WriteTo(output, _repeated_miniPanels_codec);
          if (MiniProgress != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(MiniProgress);
          }
          miniGameIds_.WriteTo(output, _repeated_miniGameIds_codec);
          if (Bet != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Bet);
          }
          if (PreWin != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(PreWin);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(56);
            output.WriteUInt64(TotalWin);
          }
        }

        public int CalculateSize() {
          int size = 0;
          size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
          size += miniPanels_.CalculateSize(_repeated_miniPanels_codec);
          if (MiniProgress != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MiniProgress);
          }
          size += miniGameIds_.CalculateSize(_repeated_miniGameIds_codec);
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (PreWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PreWin);
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
                break;
              }
              case 18: {
                miniPanels_.AddEntriesFrom(input, _repeated_miniPanels_codec);
                break;
              }
              case 24: {
                MiniProgress = input.ReadUInt32();
                break;
              }
              case 34:
              case 32: {
                miniGameIds_.AddEntriesFrom(input, _repeated_miniGameIds_codec);
                break;
              }
              case 40: {
                Bet = input.ReadUInt64();
                break;
              }
              case 48: {
                PreWin = input.ReadUInt64();
                break;
              }
              case 56: {
                TotalWin = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class FreeGame : pb::IMessage {
        private static readonly pb::MessageParser<FreeGame> _parser = new pb::MessageParser<FreeGame>(() => new FreeGame());
        public static pb::MessageParser<FreeGame> Parser { get { return _parser; } }

        private uint startingPanelCount_;
        /// <summary>
        /// 开启freeGame时的起始panel数
        /// </summary>
        public uint StartingPanelCount {
          get { return startingPanelCount_; }
          set {
            startingPanelCount_ = value;
          }
        }

        private uint currentPanelCount_;
        /// <summary>
        /// 当前panel数
        /// </summary>
        public uint CurrentPanelCount {
          get { return currentPanelCount_; }
          set {
            currentPanelCount_ = value;
          }
        }

        private uint lastBombCount_;
        /// <summary>
        /// 上一次spin炸弹数量
        /// </summary>
        public uint LastBombCount {
          get { return lastBombCount_; }
          set {
            lastBombCount_ = value;
          }
        }

        private uint bombCount_;
        /// <summary>
        /// 当前炸弹数量
        /// </summary>
        public uint BombCount {
          get { return bombCount_; }
          set {
            bombCount_ = value;
          }
        }

        private uint bombToNextLevel_;
        /// <summary>
        /// 到下一级所需要的炸弹数量
        /// </summary>
        public uint BombToNextLevel {
          get { return bombToNextLevel_; }
          set {
            bombToNextLevel_ = value;
          }
        }

        private uint level_;
        /// <summary>
        /// freeGame等级。 5, 10是superFree, avgBet 20是megaFree, avgBet，到20级settle后会变成0级
        /// </summary>
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        private uint nextPanelCount_;
        /// <summary>
        /// 下一个等级的面板数量
        /// </summary>
        public uint NextPanelCount {
          get { return nextPanelCount_; }
          set {
            nextPanelCount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (StartingPanelCount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(StartingPanelCount);
          }
          if (CurrentPanelCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(CurrentPanelCount);
          }
          if (LastBombCount != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(LastBombCount);
          }
          if (BombCount != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(BombCount);
          }
          if (BombToNextLevel != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(BombToNextLevel);
          }
          if (Level != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Level);
          }
          if (NextPanelCount != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(NextPanelCount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (StartingPanelCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartingPanelCount);
          }
          if (CurrentPanelCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentPanelCount);
          }
          if (LastBombCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastBombCount);
          }
          if (BombCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BombCount);
          }
          if (BombToNextLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BombToNextLevel);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (NextPanelCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextPanelCount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                StartingPanelCount = input.ReadUInt32();
                break;
              }
              case 16: {
                CurrentPanelCount = input.ReadUInt32();
                break;
              }
              case 24: {
                LastBombCount = input.ReadUInt32();
                break;
              }
              case 32: {
                BombCount = input.ReadUInt32();
                break;
              }
              case 40: {
                BombToNextLevel = input.ReadUInt32();
                break;
              }
              case 48: {
                Level = input.ReadUInt32();
                break;
              }
              case 56: {
                NextPanelCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*=========================== GorillaEatBanana ===============================*/
  /// </summary>
  public sealed class GorillaEatBananaGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<GorillaEatBananaGameResultExtraInfo> _parser = new pb::MessageParser<GorillaEatBananaGameResultExtraInfo>(() => new GorillaEatBananaGameResultExtraInfo());
    public static pb::MessageParser<GorillaEatBananaGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.GorillaEatBananaGameResultExtraInfo.Types.Banana> _repeated_bananas_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.GorillaEatBananaGameResultExtraInfo.Types.Banana.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GorillaEatBananaGameResultExtraInfo.Types.Banana> bananas_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GorillaEatBananaGameResultExtraInfo.Types.Banana>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GorillaEatBananaGameResultExtraInfo.Types.Banana> Bananas {
      get { return bananas_; }
    }

    private static readonly pb::FieldCodec<uint> _repeated_lastEatenPositionIds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> lastEatenPositionIds_ = new pbc::RepeatedField<uint>();
    public pbc::RepeatedField<uint> LastEatenPositionIds {
      get { return lastEatenPositionIds_; }
    }

    private uint level_;
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bananas_.WriteTo(output, _repeated_bananas_codec);
      lastEatenPositionIds_.WriteTo(output, _repeated_lastEatenPositionIds_codec);
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += bananas_.CalculateSize(_repeated_bananas_codec);
      size += lastEatenPositionIds_.CalculateSize(_repeated_lastEatenPositionIds_codec);
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bananas_.AddEntriesFrom(input, _repeated_bananas_codec);
            break;
          }
          case 18:
          case 16: {
            lastEatenPositionIds_.AddEntriesFrom(input, _repeated_lastEatenPositionIds_codec);
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GorillaEatBananaGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class Banana : pb::IMessage {
        private static readonly pb::MessageParser<Banana> _parser = new pb::MessageParser<Banana>(() => new Banana());
        public static pb::MessageParser<Banana> Parser { get { return _parser; } }

        private uint positionId_;
        public uint PositionId {
          get { return positionId_; }
          set {
            positionId_ = value;
          }
        }

        private ulong winRate_;
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        private uint jackpotId_;
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private ulong jackpotPay_;
        public ulong JackpotPay {
          get { return jackpotPay_; }
          set {
            jackpotPay_ = value;
          }
        }

        private bool isCoin_;
        public bool IsCoin {
          get { return isCoin_; }
          set {
            isCoin_ = value;
          }
        }

        private bool eaten_;
        public bool Eaten {
          get { return eaten_; }
          set {
            eaten_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (PositionId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PositionId);
          }
          if (WinRate != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(WinRate);
          }
          if (JackpotId != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(JackpotId);
          }
          if (JackpotPay != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(JackpotPay);
          }
          if (IsCoin != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsCoin);
          }
          if (Eaten != false) {
            output.WriteRawTag(48);
            output.WriteBool(Eaten);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (PositionId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
          }
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (JackpotPay != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
          }
          if (IsCoin != false) {
            size += 1 + 1;
          }
          if (Eaten != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PositionId = input.ReadUInt32();
                break;
              }
              case 16: {
                WinRate = input.ReadUInt64();
                break;
              }
              case 24: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 32: {
                JackpotPay = input.ReadUInt64();
                break;
              }
              case 40: {
                IsCoin = input.ReadBool();
                break;
              }
              case 48: {
                Eaten = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*=========================== Aztec ===============================*/
  /// 注意这个机器左右都能算赢钱线；
  /// 从base进入转盘的时候；scatter的winLine freeSpinCount是0但是bonusGameId>0
  /// free里面reTrigger的scatter的winLine freeSpinCount>0
  /// </summary>
  public sealed class AztecGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<AztecGameResultExtraInfo> _parser = new pb::MessageParser<AztecGameResultExtraInfo>(() => new AztecGameResultExtraInfo());
    public static pb::MessageParser<AztecGameResultExtraInfo> Parser { get { return _parser; } }

    private ulong bet_;
    /// <summary>
    /// 进入bonus时的bet
    /// </summary>
    public ulong Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    private bool isChosen_;
    /// <summary>
    /// 进入bonus后，是否选完白天黑夜
    /// </summary>
    public bool IsChosen {
      get { return isChosen_; }
      set {
        isChosen_ = value;
      }
    }

    private bool isNight_;
    /// <summary>
    /// 是不是黑夜
    /// </summary>
    public bool IsNight {
      get { return isNight_; }
      set {
        isNight_ = value;
      }
    }

    private uint normalWheelIndex_;
    /// <summary>
    /// 普通转盘停留index
    /// </summary>
    public uint NormalWheelIndex {
      get { return normalWheelIndex_; }
      set {
        normalWheelIndex_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.AztecGameResultExtraInfo.Types.Wheel> _repeated_normalWheel_codec
        = pb::FieldCodec.ForMessage(42, global::DragonU3DSDK.Network.API.ILProtocol.AztecGameResultExtraInfo.Types.Wheel.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AztecGameResultExtraInfo.Types.Wheel> normalWheel_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AztecGameResultExtraInfo.Types.Wheel>();
    /// <summary>
    /// 普通转盘信息
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AztecGameResultExtraInfo.Types.Wheel> NormalWheel {
      get { return normalWheel_; }
    }

    private uint bonusWheelIndex_;
    /// <summary>
    /// bonus转盘停留index
    /// </summary>
    public uint BonusWheelIndex {
      get { return bonusWheelIndex_; }
      set {
        bonusWheelIndex_ = value;
      }
    }

    private static readonly pb::FieldCodec<uint> _repeated_bonusWheel_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> bonusWheel_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// bonus转盘信息，倍率
    /// </summary>
    public pbc::RepeatedField<uint> BonusWheel {
      get { return bonusWheel_; }
    }

    private bool isBonusWheel_;
    /// <summary>
    /// 当前是否是bonus转盘
    /// </summary>
    public bool IsBonusWheel {
      get { return isBonusWheel_; }
      set {
        isBonusWheel_ = value;
      }
    }

    private bool isPlaying_;
    /// <summary>
    /// 是否进入bonus
    /// </summary>
    public bool IsPlaying {
      get { return isPlaying_; }
      set {
        isPlaying_ = value;
      }
    }

    private bool isOver_;
    /// <summary>
    /// bonus是否可以结算；调用settle api
    /// </summary>
    public bool IsOver {
      get { return isOver_; }
      set {
        isOver_ = value;
      }
    }

    private ulong totalWin_;
    /// <summary>
    /// bonus总赢钱，包括进来时候的panel线奖
    /// </summary>
    public ulong TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
        = pb::FieldCodec.ForMessage(98, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
    /// <summary>
    /// 触发bonus时的panels
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
      get { return triggeringPanels_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Bet != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Bet);
      }
      if (IsChosen != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsChosen);
      }
      if (IsNight != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsNight);
      }
      if (NormalWheelIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NormalWheelIndex);
      }
      normalWheel_.WriteTo(output, _repeated_normalWheel_codec);
      if (BonusWheelIndex != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(BonusWheelIndex);
      }
      bonusWheel_.WriteTo(output, _repeated_bonusWheel_codec);
      if (IsBonusWheel != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsBonusWheel);
      }
      if (IsPlaying != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsPlaying);
      }
      if (IsOver != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsOver);
      }
      if (TotalWin != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(TotalWin);
      }
      triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Bet != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
      }
      if (IsChosen != false) {
        size += 1 + 1;
      }
      if (IsNight != false) {
        size += 1 + 1;
      }
      if (NormalWheelIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NormalWheelIndex);
      }
      size += normalWheel_.CalculateSize(_repeated_normalWheel_codec);
      if (BonusWheelIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BonusWheelIndex);
      }
      size += bonusWheel_.CalculateSize(_repeated_bonusWheel_codec);
      if (IsBonusWheel != false) {
        size += 1 + 1;
      }
      if (IsPlaying != false) {
        size += 1 + 1;
      }
      if (IsOver != false) {
        size += 1 + 1;
      }
      if (TotalWin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
      }
      size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Bet = input.ReadUInt64();
            break;
          }
          case 16: {
            IsChosen = input.ReadBool();
            break;
          }
          case 24: {
            IsNight = input.ReadBool();
            break;
          }
          case 32: {
            NormalWheelIndex = input.ReadUInt32();
            break;
          }
          case 42: {
            normalWheel_.AddEntriesFrom(input, _repeated_normalWheel_codec);
            break;
          }
          case 48: {
            BonusWheelIndex = input.ReadUInt32();
            break;
          }
          case 58:
          case 56: {
            bonusWheel_.AddEntriesFrom(input, _repeated_bonusWheel_codec);
            break;
          }
          case 64: {
            IsBonusWheel = input.ReadBool();
            break;
          }
          case 72: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 80: {
            IsOver = input.ReadBool();
            break;
          }
          case 88: {
            TotalWin = input.ReadUInt64();
            break;
          }
          case 98: {
            triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AztecGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class Wheel : pb::IMessage {
        private static readonly pb::MessageParser<Wheel> _parser = new pb::MessageParser<Wheel>(() => new Wheel());
        public static pb::MessageParser<Wheel> Parser { get { return _parser; } }

        private bool toBonusWheel_;
        /// <summary>
        /// 去bonus转盘
        /// </summary>
        public bool ToBonusWheel {
          get { return toBonusWheel_; }
          set {
            toBonusWheel_ = value;
          }
        }

        private uint rapidCount_;
        /// <summary>
        /// rapid数量
        /// </summary>
        public uint RapidCount {
          get { return rapidCount_; }
          set {
            rapidCount_ = value;
          }
        }

        private uint freeSpinCount_;
        /// <summary>
        /// freeSpin数
        /// </summary>
        public uint FreeSpinCount {
          get { return freeSpinCount_; }
          set {
            freeSpinCount_ = value;
          }
        }

        private bool isOver_;
        /// <summary>
        /// 直接结束
        /// </summary>
        public bool IsOver {
          get { return isOver_; }
          set {
            isOver_ = value;
          }
        }

        private ulong winRate_;
        /// <summary>
        /// win rate奖励； 当rapid = 3 4
        /// </summary>
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        private uint jackpotId_;
        /// <summary>
        /// jackpotId; 当rapid = 5 6 7 8 9
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private ulong jackpotPay_;
        /// <summary>
        /// jackpot_pay; 当rapid = 5 6 7 8 9, 选中才有值，没中是0
        /// </summary>
        public ulong JackpotPay {
          get { return jackpotPay_; }
          set {
            jackpotPay_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (ToBonusWheel != false) {
            output.WriteRawTag(8);
            output.WriteBool(ToBonusWheel);
          }
          if (RapidCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(RapidCount);
          }
          if (FreeSpinCount != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(FreeSpinCount);
          }
          if (IsOver != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsOver);
          }
          if (WinRate != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(WinRate);
          }
          if (JackpotId != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(JackpotId);
          }
          if (JackpotPay != 0UL) {
            output.WriteRawTag(56);
            output.WriteUInt64(JackpotPay);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (ToBonusWheel != false) {
            size += 1 + 1;
          }
          if (RapidCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RapidCount);
          }
          if (FreeSpinCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeSpinCount);
          }
          if (IsOver != false) {
            size += 1 + 1;
          }
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (JackpotPay != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                ToBonusWheel = input.ReadBool();
                break;
              }
              case 16: {
                RapidCount = input.ReadUInt32();
                break;
              }
              case 24: {
                FreeSpinCount = input.ReadUInt32();
                break;
              }
              case 32: {
                IsOver = input.ReadBool();
                break;
              }
              case 40: {
                WinRate = input.ReadUInt64();
                break;
              }
              case 48: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 56: {
                JackpotPay = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*=========================== Rhino ===============================*/
  /// </summary>
  public sealed class RhinoGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<RhinoGameResultExtraInfo> _parser = new pb::MessageParser<RhinoGameResultExtraInfo>(() => new RhinoGameResultExtraInfo());
    public static pb::MessageParser<RhinoGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskData>.Codec _map_diskDataMap_codec
        = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskData>.Codec(pb::FieldCodec.ForUInt64(8), pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskData.Parser), 10);
    private readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskData> diskDataMap_ = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskData>();
    /// <summary>
    /// 每个bet一个数据
    /// </summary>
    public pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskData> DiskDataMap {
      get { return diskDataMap_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      diskDataMap_.WriteTo(output, _map_diskDataMap_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += diskDataMap_.CalculateSize(_map_diskDataMap_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            diskDataMap_.AddEntriesFrom(input, _map_diskDataMap_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RhinoGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class DiskItem : pb::IMessage {
        private static readonly pb::MessageParser<DiskItem> _parser = new pb::MessageParser<DiskItem>(() => new DiskItem());
        public static pb::MessageParser<DiskItem> Parser { get { return _parser; } }

        private ulong winRate_;
        /// <summary>
        /// 非jackpot,非freeSpin的item
        /// </summary>
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        private uint jackpotId_;
        /// <summary>
        /// jackpotId
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private ulong jackpotPay_;
        /// <summary>
        /// jackpotPay 中了的时候才是最新值;否则是旧值或0
        /// </summary>
        public ulong JackpotPay {
          get { return jackpotPay_; }
          set {
            jackpotPay_ = value;
          }
        }

        private bool isFreeSpin_;
        /// <summary>
        /// 是否是freeSpin的item
        /// </summary>
        public bool IsFreeSpin {
          get { return isFreeSpin_; }
          set {
            isFreeSpin_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (WinRate != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(WinRate);
          }
          if (JackpotId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(JackpotId);
          }
          if (JackpotPay != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(JackpotPay);
          }
          if (IsFreeSpin != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsFreeSpin);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (JackpotPay != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
          }
          if (IsFreeSpin != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                WinRate = input.ReadUInt64();
                break;
              }
              case 16: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 24: {
                JackpotPay = input.ReadUInt64();
                break;
              }
              case 32: {
                IsFreeSpin = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed class DiskData : pb::IMessage {
        private static readonly pb::MessageParser<DiskData> _parser = new pb::MessageParser<DiskData>(() => new DiskData());
        public static pb::MessageParser<DiskData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskItem> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskItem> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskItem>();
        /// <summary>
        /// items.length = 6
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskItem> Items {
          get { return items_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskItem> _repeated_freeItems_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskItem> freeItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskItem>();
        /// <summary>
        /// items.length = 6
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.RhinoGameResultExtraInfo.Types.DiskItem> FreeItems {
          get { return freeItems_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          freeItems_.WriteTo(output, _repeated_freeItems_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          size += freeItems_.CalculateSize(_repeated_freeItems_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 18: {
                freeItems_.AddEntriesFrom(input, _repeated_freeItems_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*=========================== Zeus ==================================*/
  /// </summary>
  public sealed class ZeusGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<ZeusGameResultExtraInfo> _parser = new pb::MessageParser<ZeusGameResultExtraInfo>(() => new ZeusGameResultExtraInfo());
    public static pb::MessageParser<ZeusGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ZeusGameResultExtraInfo.Types.Position> _repeated_stickyZeusPositions_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.ZeusGameResultExtraInfo.Types.Position.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ZeusGameResultExtraInfo.Types.Position> stickyZeusPositions_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ZeusGameResultExtraInfo.Types.Position>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ZeusGameResultExtraInfo.Types.Position> StickyZeusPositions {
      get { return stickyZeusPositions_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ZeusGameResultExtraInfo.Types.Position> _repeated_stickyWildPositions_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.ZeusGameResultExtraInfo.Types.Position.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ZeusGameResultExtraInfo.Types.Position> stickyWildPositions_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ZeusGameResultExtraInfo.Types.Position>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ZeusGameResultExtraInfo.Types.Position> StickyWildPositions {
      get { return stickyWildPositions_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Column> _repeated_wildReels_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.Column.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Column> wildReels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Column>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Column> WildReels {
      get { return wildReels_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_finalPanels_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> finalPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> FinalPanels {
      get { return finalPanels_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      stickyZeusPositions_.WriteTo(output, _repeated_stickyZeusPositions_codec);
      stickyWildPositions_.WriteTo(output, _repeated_stickyWildPositions_codec);
      wildReels_.WriteTo(output, _repeated_wildReels_codec);
      finalPanels_.WriteTo(output, _repeated_finalPanels_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += stickyZeusPositions_.CalculateSize(_repeated_stickyZeusPositions_codec);
      size += stickyWildPositions_.CalculateSize(_repeated_stickyWildPositions_codec);
      size += wildReels_.CalculateSize(_repeated_wildReels_codec);
      size += finalPanels_.CalculateSize(_repeated_finalPanels_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            stickyZeusPositions_.AddEntriesFrom(input, _repeated_stickyZeusPositions_codec);
            break;
          }
          case 18: {
            stickyWildPositions_.AddEntriesFrom(input, _repeated_stickyWildPositions_codec);
            break;
          }
          case 26: {
            wildReels_.AddEntriesFrom(input, _repeated_wildReels_codec);
            break;
          }
          case 34: {
            finalPanels_.AddEntriesFrom(input, _repeated_finalPanels_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ZeusGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class Position : pb::IMessage {
        private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
        public static pb::MessageParser<Position> Parser { get { return _parser; } }

        private uint x_;
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*=========================== DragonRising ==================================*/
  /// </summary>
  public sealed class DragonRisingGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<DragonRisingGameResultExtraInfo> _parser = new pb::MessageParser<DragonRisingGameResultExtraInfo>(() => new DragonRisingGameResultExtraInfo());
    public static pb::MessageParser<DragonRisingGameResultExtraInfo> Parser { get { return _parser; } }

    private uint level_;
    /// <summary>
    /// free 相关
    /// </summary>
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private bool isMega_;
    /// <summary>
    /// 4, 8级 是mage
    /// </summary>
    public bool IsMega {
      get { return isMega_; }
      set {
        isMega_ = value;
      }
    }

    private bool isSuper_;
    /// <summary>
    /// 16级 是super
    /// </summary>
    public bool IsSuper {
      get { return isSuper_; }
      set {
        isSuper_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.Position> _repeated_randomWilds_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.Position.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.Position> randomWilds_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.Position>();
    /// <summary>
    /// mega的随机wild
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.Position> RandomWilds {
      get { return randomWilds_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.Position> _repeated_stickyWilds_codec
        = pb::FieldCodec.ForMessage(42, global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.Position.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.Position> stickyWilds_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.Position>();
    /// <summary>
    /// super的sticky wild
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.Position> StickyWilds {
      get { return stickyWilds_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.LinkData linkDataLeft_;
    /// <summary>
    /// link数据，左列， positionId 从上到下 0到2
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.LinkData LinkDataLeft {
      get { return linkDataLeft_; }
      set {
        linkDataLeft_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.LinkData linkDataRight_;
    /// <summary>
    /// link数据，右列, positionId 从上到下 0到2
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.LinkData LinkDataRight {
      get { return linkDataRight_; }
      set {
        linkDataRight_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.LinkData linkDataCenter_;
    /// <summary>
    /// link数据，中间, positionId 3列 7行， 从上到下 0到6， 从左到右 0到6 7到13 14到20
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.LinkData LinkDataCenter {
      get { return linkDataCenter_; }
      set {
        linkDataCenter_ = value;
      }
    }

    private uint rowsMoreOld_;
    /// <summary>
    /// 上一轮的 右边加楼层buff
    /// </summary>
    public uint RowsMoreOld {
      get { return rowsMoreOld_; }
      set {
        rowsMoreOld_ = value;
      }
    }

    private uint allWinMultiplierOld_;
    /// <summary>
    /// 上一轮的 左边加倍数buff
    /// </summary>
    public uint AllWinMultiplierOld {
      get { return allWinMultiplierOld_; }
      set {
        allWinMultiplierOld_ = value;
      }
    }

    private uint rowsMore_;
    /// <summary>
    /// 右边加楼层buff
    /// </summary>
    public uint RowsMore {
      get { return rowsMore_; }
      set {
        rowsMore_ = value;
      }
    }

    private uint allWinMultiplier_;
    /// <summary>
    /// 左边加倍数buff
    /// </summary>
    public uint AllWinMultiplier {
      get { return allWinMultiplier_; }
      set {
        allWinMultiplier_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (IsMega != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsMega);
      }
      if (IsSuper != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsSuper);
      }
      randomWilds_.WriteTo(output, _repeated_randomWilds_codec);
      stickyWilds_.WriteTo(output, _repeated_stickyWilds_codec);
      if (linkDataLeft_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LinkDataLeft);
      }
      if (linkDataRight_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LinkDataRight);
      }
      if (linkDataCenter_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LinkDataCenter);
      }
      if (RowsMoreOld != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(RowsMoreOld);
      }
      if (AllWinMultiplierOld != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(AllWinMultiplierOld);
      }
      if (RowsMore != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(RowsMore);
      }
      if (AllWinMultiplier != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(AllWinMultiplier);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (IsMega != false) {
        size += 1 + 1;
      }
      if (IsSuper != false) {
        size += 1 + 1;
      }
      size += randomWilds_.CalculateSize(_repeated_randomWilds_codec);
      size += stickyWilds_.CalculateSize(_repeated_stickyWilds_codec);
      if (linkDataLeft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkDataLeft);
      }
      if (linkDataRight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkDataRight);
      }
      if (linkDataCenter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkDataCenter);
      }
      if (RowsMoreOld != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RowsMoreOld);
      }
      if (AllWinMultiplierOld != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllWinMultiplierOld);
      }
      if (RowsMore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RowsMore);
      }
      if (AllWinMultiplier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllWinMultiplier);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            IsMega = input.ReadBool();
            break;
          }
          case 24: {
            IsSuper = input.ReadBool();
            break;
          }
          case 34: {
            randomWilds_.AddEntriesFrom(input, _repeated_randomWilds_codec);
            break;
          }
          case 42: {
            stickyWilds_.AddEntriesFrom(input, _repeated_stickyWilds_codec);
            break;
          }
          case 50: {
            if (linkDataLeft_ == null) {
              linkDataLeft_ = new global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.LinkData();
            }
            input.ReadMessage(linkDataLeft_);
            break;
          }
          case 58: {
            if (linkDataRight_ == null) {
              linkDataRight_ = new global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.LinkData();
            }
            input.ReadMessage(linkDataRight_);
            break;
          }
          case 66: {
            if (linkDataCenter_ == null) {
              linkDataCenter_ = new global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.LinkData();
            }
            input.ReadMessage(linkDataCenter_);
            break;
          }
          case 72: {
            RowsMoreOld = input.ReadUInt32();
            break;
          }
          case 80: {
            AllWinMultiplierOld = input.ReadUInt32();
            break;
          }
          case 88: {
            RowsMore = input.ReadUInt32();
            break;
          }
          case 96: {
            AllWinMultiplier = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DragonRisingGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class Position : pb::IMessage {
        private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
        public static pb::MessageParser<Position> Parser { get { return _parser; } }

        private uint x_;
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// link 相关
      /// 和其他link游戏的区别是：这个游戏的linkData分 左中右三部分返回；gameResult.panels也是左中右给了3个
      /// 注意：随着右边的buff加高度，中间的linkData不会改变positionId的规则；中间未解锁高度不会转出link图标，21个位置的positionId是不会变的；
      /// 例如：右边buff数值rows_more是0时， 中间positionId为 0到2 7到9 14到16 的地方不会转出link图标
      /// 右边buff数值rows_more是1时， 中间positionId为 0到1 7到8 14到15 的地方不会转出link图标
      /// 右边buff数值rows_more是3时， 中间所有地方可能转出link图标
      /// </summary>
      public sealed class LinkData : pb::IMessage {
        private static readonly pb::MessageParser<LinkData> _parser = new pb::MessageParser<LinkData>(() => new LinkData());
        public static pb::MessageParser<LinkData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.LinkData.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.LinkData.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.LinkData.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.LinkData.Types.Item>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRisingGameResultExtraInfo.Types.LinkData.Types.Item> Items {
          get { return items_; }
        }

        private static readonly pbc::MapField<uint, uint>.Codec _map_reelMapping_codec
            = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 18);
        private readonly pbc::MapField<uint, uint> reelMapping_ = new pbc::MapField<uint, uint>();
        /// <summary>
        /// linkReels轴映射
        /// </summary>
        public pbc::MapField<uint, uint> ReelMapping {
          get { return reelMapping_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          reelMapping_.WriteTo(output, _map_reelMapping_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          size += reelMapping_.CalculateSize(_map_reelMapping_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 18: {
                reelMapping_.AddEntriesFrom(input, _map_reelMapping_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LinkData message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private uint positionId_;
            /// <summary>
            /// 位置
            /// </summary>
            public uint PositionId {
              get { return positionId_; }
              set {
                positionId_ = value;
              }
            }

            private uint symbolId_;
            /// <summary>
            /// 现实图标
            /// </summary>
            public uint SymbolId {
              get { return symbolId_; }
              set {
                symbolId_ = value;
              }
            }

            private ulong winRate_;
            /// <summary>
            /// 赢钱倍率
            /// </summary>
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            private uint jackpotId_;
            /// <summary>
            /// jackpot id
            /// </summary>
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private ulong jackpotPay_;
            /// <summary>
            /// jackpot pay
            /// </summary>
            public ulong JackpotPay {
              get { return jackpotPay_; }
              set {
                jackpotPay_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (PositionId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PositionId);
              }
              if (SymbolId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(SymbolId);
              }
              if (WinRate != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(WinRate);
              }
              if (JackpotId != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(JackpotId);
              }
              if (JackpotPay != 0UL) {
                output.WriteRawTag(40);
                output.WriteUInt64(JackpotPay);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (PositionId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
              }
              if (SymbolId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
              }
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              if (JackpotPay != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    PositionId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    SymbolId = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                  case 32: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    JackpotPay = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///*============================== LuckyRabbits ================================*/
  ///
  /// 本游戏base玩法有两条特殊赢钱线：
  /// 1 特殊wild的winLine，用winLine.bonusId=101 帮助区分；
  /// 2 scatter触发转盘的winLine, 用winLine.bonusId=2001 帮助区分；
  ///
  /// 两种特殊bonus玩法pick和wheel，最后都需要settle结算；两种玩法已经保证不会同时触发；
  /// pick玩法注意需要通过bonus api的json字段传一个数字字符串指定pick的位置；
  /// </summary>
  public sealed class LuckyRabbitsGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<LuckyRabbitsGameResultExtraInfo> _parser = new pb::MessageParser<LuckyRabbitsGameResultExtraInfo>(() => new LuckyRabbitsGameResultExtraInfo());
    public static pb::MessageParser<LuckyRabbitsGameResultExtraInfo> Parser { get { return _parser; } }

    private bool isPicking_;
    /// <summary>
    /// 当前是否在pick玩法中
    /// </summary>
    public bool IsPicking {
      get { return isPicking_; }
      set {
        isPicking_ = value;
      }
    }

    private bool isPickingOver_;
    /// <summary>
    /// 当前pick玩法是否结束，可以settle； settle之后is_picking=false
    /// </summary>
    public bool IsPickingOver {
      get { return isPickingOver_; }
      set {
        isPickingOver_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbitsGameResultExtraInfo.Types.PickItem> _repeated_pickItems_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbitsGameResultExtraInfo.Types.PickItem.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbitsGameResultExtraInfo.Types.PickItem> pickItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbitsGameResultExtraInfo.Types.PickItem>();
    /// <summary>
    /// pick的所有item，item位置来自所在数组中的下标，玩家输入决定选哪一个
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbitsGameResultExtraInfo.Types.PickItem> PickItems {
      get { return pickItems_; }
    }

    private uint pickJackpotId_;
    /// <summary>
    /// pick结果的jackpotId
    /// </summary>
    public uint PickJackpotId {
      get { return pickJackpotId_; }
      set {
        pickJackpotId_ = value;
      }
    }

    private bool isRolling_;
    /// <summary>
    /// wheel 玩法
    /// </summary>
    public bool IsRolling {
      get { return isRolling_; }
      set {
        isRolling_ = value;
      }
    }

    private bool isRollingOver_;
    /// <summary>
    /// 当前wheel玩法是否结束，可以settle； settle之后is_rolling=false
    /// </summary>
    public bool IsRollingOver {
      get { return isRollingOver_; }
      set {
        isRollingOver_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbitsGameResultExtraInfo.Types.WheelItem> _repeated_wheelItems_codec
        = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbitsGameResultExtraInfo.Types.WheelItem.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbitsGameResultExtraInfo.Types.WheelItem> wheelItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbitsGameResultExtraInfo.Types.WheelItem>();
    /// <summary>
    /// wheel的转盘item
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbitsGameResultExtraInfo.Types.WheelItem> WheelItems {
      get { return wheelItems_; }
    }

    private uint wheelEndIndex_;
    /// <summary>
    /// wheel玩法最后停留的位置，此时is_rolling_over=true
    /// </summary>
    public uint WheelEndIndex {
      get { return wheelEndIndex_; }
      set {
        wheelEndIndex_ = value;
      }
    }

    private uint wheelNudgeIndex_;
    /// <summary>
    /// wheel玩法nudge的位置，客户端展示从wheel_nudge_index nudge到 wheel_end_index；如果不nudge两者相等
    /// </summary>
    public uint WheelNudgeIndex {
      get { return wheelNudgeIndex_; }
      set {
        wheelNudgeIndex_ = value;
      }
    }

    private ulong bet_;
    /// <summary>
    /// 两种bonus玩法通用字段
    /// </summary>
    public ulong Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
        = pb::FieldCodec.ForMessage(90, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
    /// <summary>
    /// 触发bonus的panels
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
      get { return triggeringPanels_; }
    }

    private ulong totalWin_;
    /// <summary>
    /// bonus的最后赢钱
    /// </summary>
    public ulong TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    private uint prizeLevel_;
    /// <summary>
    /// 奖池等级： 0～4
    /// </summary>
    public uint PrizeLevel {
      get { return prizeLevel_; }
      set {
        prizeLevel_ = value;
      }
    }

    private ulong wheelWin_;
    /// <summary>
    /// wheel win
    /// </summary>
    public ulong WheelWin {
      get { return wheelWin_; }
      set {
        wheelWin_ = value;
      }
    }

    private ulong pickWin_;
    /// <summary>
    /// pick win
    /// </summary>
    public ulong PickWin {
      get { return pickWin_; }
      set {
        pickWin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsPicking != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsPicking);
      }
      if (IsPickingOver != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsPickingOver);
      }
      pickItems_.WriteTo(output, _repeated_pickItems_codec);
      if (PickJackpotId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PickJackpotId);
      }
      if (IsRolling != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRolling);
      }
      if (IsRollingOver != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsRollingOver);
      }
      wheelItems_.WriteTo(output, _repeated_wheelItems_codec);
      if (WheelEndIndex != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(WheelEndIndex);
      }
      if (WheelNudgeIndex != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(WheelNudgeIndex);
      }
      if (Bet != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(Bet);
      }
      triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
      if (TotalWin != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(TotalWin);
      }
      if (PrizeLevel != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(PrizeLevel);
      }
      if (WheelWin != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(WheelWin);
      }
      if (PickWin != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(PickWin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IsPicking != false) {
        size += 1 + 1;
      }
      if (IsPickingOver != false) {
        size += 1 + 1;
      }
      size += pickItems_.CalculateSize(_repeated_pickItems_codec);
      if (PickJackpotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PickJackpotId);
      }
      if (IsRolling != false) {
        size += 1 + 1;
      }
      if (IsRollingOver != false) {
        size += 1 + 1;
      }
      size += wheelItems_.CalculateSize(_repeated_wheelItems_codec);
      if (WheelEndIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WheelEndIndex);
      }
      if (WheelNudgeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WheelNudgeIndex);
      }
      if (Bet != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
      }
      size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
      if (TotalWin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
      }
      if (PrizeLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrizeLevel);
      }
      if (WheelWin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WheelWin);
      }
      if (PickWin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PickWin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsPicking = input.ReadBool();
            break;
          }
          case 16: {
            IsPickingOver = input.ReadBool();
            break;
          }
          case 26: {
            pickItems_.AddEntriesFrom(input, _repeated_pickItems_codec);
            break;
          }
          case 32: {
            PickJackpotId = input.ReadUInt32();
            break;
          }
          case 40: {
            IsRolling = input.ReadBool();
            break;
          }
          case 48: {
            IsRollingOver = input.ReadBool();
            break;
          }
          case 58: {
            wheelItems_.AddEntriesFrom(input, _repeated_wheelItems_codec);
            break;
          }
          case 64: {
            WheelEndIndex = input.ReadUInt32();
            break;
          }
          case 72: {
            WheelNudgeIndex = input.ReadUInt32();
            break;
          }
          case 80: {
            Bet = input.ReadUInt64();
            break;
          }
          case 90: {
            triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
            break;
          }
          case 96: {
            TotalWin = input.ReadUInt64();
            break;
          }
          case 104: {
            PrizeLevel = input.ReadUInt32();
            break;
          }
          case 112: {
            WheelWin = input.ReadUInt64();
            break;
          }
          case 120: {
            PickWin = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LuckyRabbitsGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class WheelItem : pb::IMessage {
        private static readonly pb::MessageParser<WheelItem> _parser = new pb::MessageParser<WheelItem>(() => new WheelItem());
        public static pb::MessageParser<WheelItem> Parser { get { return _parser; } }

        private uint jackpotId_;
        /// <summary>
        /// jackpot id
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private ulong winRate_;
        /// <summary>
        /// win rate; 前端展示的时候要乘以bet除以100
        /// </summary>
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        private uint multiplier_;
        /// <summary>
        /// 倍数边缘
        /// </summary>
        public uint Multiplier {
          get { return multiplier_; }
          set {
            multiplier_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (JackpotId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(JackpotId);
          }
          if (WinRate != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(WinRate);
          }
          if (Multiplier != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Multiplier);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          if (Multiplier != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Multiplier);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 16: {
                WinRate = input.ReadUInt64();
                break;
              }
              case 24: {
                Multiplier = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// pick 玩法
      /// </summary>
      public sealed class PickItem : pb::IMessage {
        private static readonly pb::MessageParser<PickItem> _parser = new pb::MessageParser<PickItem>(() => new PickItem());
        public static pb::MessageParser<PickItem> Parser { get { return _parser; } }

        private bool revealed_;
        /// <summary>
        /// 是否显示，被翻开
        /// </summary>
        public bool Revealed {
          get { return revealed_; }
          set {
            revealed_ = value;
          }
        }

        private bool removed_;
        /// <summary>
        /// 是否被幸运的remove卡排除，被排除的item同时revealed=true
        /// </summary>
        public bool Removed {
          get { return removed_; }
          set {
            removed_ = value;
          }
        }

        private uint jackpotId_;
        /// <summary>
        /// jackpot id
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private bool isLucky_;
        /// <summary>
        /// 是否是幸运remove卡
        /// </summary>
        public bool IsLucky {
          get { return isLucky_; }
          set {
            isLucky_ = value;
          }
        }

        private uint removedJackpotId_;
        /// <summary>
        /// remove卡移走的jackpotId
        /// </summary>
        public uint RemovedJackpotId {
          get { return removedJackpotId_; }
          set {
            removedJackpotId_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Revealed != false) {
            output.WriteRawTag(8);
            output.WriteBool(Revealed);
          }
          if (Removed != false) {
            output.WriteRawTag(16);
            output.WriteBool(Removed);
          }
          if (JackpotId != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(JackpotId);
          }
          if (IsLucky != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsLucky);
          }
          if (RemovedJackpotId != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(RemovedJackpotId);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Revealed != false) {
            size += 1 + 1;
          }
          if (Removed != false) {
            size += 1 + 1;
          }
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (IsLucky != false) {
            size += 1 + 1;
          }
          if (RemovedJackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemovedJackpotId);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Revealed = input.ReadBool();
                break;
              }
              case 16: {
                Removed = input.ReadBool();
                break;
              }
              case 24: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 32: {
                IsLucky = input.ReadBool();
                break;
              }
              case 40: {
                RemovedJackpotId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*============================== LuckyRabbits2 ================================*/
  ///
  /// 本游戏base玩法有两条特殊赢钱线：
  /// 1 特殊wild的winLine，用winLine.bonusId=101 帮助区分；
  /// 2 scatter触发转盘的winLine, 用winLine.bonusId=2001 帮助区分；
  ///
  /// 两种特殊bonus玩法pick和wheel，最后都需要settle结算；两种玩法已经保证不会同时触发；
  /// pick玩法注意需要通过bonus api的json字段传一个数字字符串指定pick的位置；
  /// </summary>
  public sealed class LuckyRabbits2GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<LuckyRabbits2GameResultExtraInfo> _parser = new pb::MessageParser<LuckyRabbits2GameResultExtraInfo>(() => new LuckyRabbits2GameResultExtraInfo());
    public static pb::MessageParser<LuckyRabbits2GameResultExtraInfo> Parser { get { return _parser; } }

    private bool isPicking_;
    /// <summary>
    /// 当前是否在pick玩法中
    /// </summary>
    public bool IsPicking {
      get { return isPicking_; }
      set {
        isPicking_ = value;
      }
    }

    private bool isPickingOver_;
    /// <summary>
    /// 当前pick玩法是否结束，可以settle； settle之后is_picking=false
    /// </summary>
    public bool IsPickingOver {
      get { return isPickingOver_; }
      set {
        isPickingOver_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbits2GameResultExtraInfo.Types.PickItem> _repeated_pickItems_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbits2GameResultExtraInfo.Types.PickItem.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbits2GameResultExtraInfo.Types.PickItem> pickItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbits2GameResultExtraInfo.Types.PickItem>();
    /// <summary>
    /// pick的所有item，item位置来自所在数组中的下标，玩家输入决定选哪一个
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbits2GameResultExtraInfo.Types.PickItem> PickItems {
      get { return pickItems_; }
    }

    private uint pickJackpotId_;
    /// <summary>
    /// pick结果的jackpotId
    /// </summary>
    public uint PickJackpotId {
      get { return pickJackpotId_; }
      set {
        pickJackpotId_ = value;
      }
    }

    private bool isRolling_;
    /// <summary>
    /// wheel 玩法
    /// </summary>
    public bool IsRolling {
      get { return isRolling_; }
      set {
        isRolling_ = value;
      }
    }

    private bool isRollingOver_;
    /// <summary>
    /// 当前wheel玩法是否结束，可以settle； settle之后is_rolling=false
    /// </summary>
    public bool IsRollingOver {
      get { return isRollingOver_; }
      set {
        isRollingOver_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbits2GameResultExtraInfo.Types.WheelItem> _repeated_wheelItems_codec
        = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbits2GameResultExtraInfo.Types.WheelItem.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbits2GameResultExtraInfo.Types.WheelItem> wheelItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbits2GameResultExtraInfo.Types.WheelItem>();
    /// <summary>
    /// wheel的转盘item
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LuckyRabbits2GameResultExtraInfo.Types.WheelItem> WheelItems {
      get { return wheelItems_; }
    }

    private uint wheelEndIndex_;
    /// <summary>
    /// wheel玩法最后停留的位置，此时is_rolling_over=true
    /// </summary>
    public uint WheelEndIndex {
      get { return wheelEndIndex_; }
      set {
        wheelEndIndex_ = value;
      }
    }

    private uint wheelNudgeIndex_;
    /// <summary>
    /// wheel玩法nudge的位置，客户端展示从wheel_nudge_index nudge到 wheel_end_index；如果不nudge两者相等
    /// </summary>
    public uint WheelNudgeIndex {
      get { return wheelNudgeIndex_; }
      set {
        wheelNudgeIndex_ = value;
      }
    }

    private ulong bet_;
    /// <summary>
    /// 两种bonus玩法通用字段
    /// </summary>
    public ulong Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
        = pb::FieldCodec.ForMessage(90, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
    /// <summary>
    /// 触发bonus的panels
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
      get { return triggeringPanels_; }
    }

    private ulong totalWin_;
    /// <summary>
    /// bonus的最后赢钱
    /// </summary>
    public ulong TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    private uint prizeLevel_;
    /// <summary>
    /// 奖池等级： 0～4
    /// </summary>
    public uint PrizeLevel {
      get { return prizeLevel_; }
      set {
        prizeLevel_ = value;
      }
    }

    private ulong wheelWin_;
    /// <summary>
    /// wheel win
    /// </summary>
    public ulong WheelWin {
      get { return wheelWin_; }
      set {
        wheelWin_ = value;
      }
    }

    private ulong pickWin_;
    /// <summary>
    /// pick win
    /// </summary>
    public ulong PickWin {
      get { return pickWin_; }
      set {
        pickWin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsPicking != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsPicking);
      }
      if (IsPickingOver != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsPickingOver);
      }
      pickItems_.WriteTo(output, _repeated_pickItems_codec);
      if (PickJackpotId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PickJackpotId);
      }
      if (IsRolling != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRolling);
      }
      if (IsRollingOver != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsRollingOver);
      }
      wheelItems_.WriteTo(output, _repeated_wheelItems_codec);
      if (WheelEndIndex != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(WheelEndIndex);
      }
      if (WheelNudgeIndex != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(WheelNudgeIndex);
      }
      if (Bet != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(Bet);
      }
      triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
      if (TotalWin != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(TotalWin);
      }
      if (PrizeLevel != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(PrizeLevel);
      }
      if (WheelWin != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(WheelWin);
      }
      if (PickWin != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(PickWin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IsPicking != false) {
        size += 1 + 1;
      }
      if (IsPickingOver != false) {
        size += 1 + 1;
      }
      size += pickItems_.CalculateSize(_repeated_pickItems_codec);
      if (PickJackpotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PickJackpotId);
      }
      if (IsRolling != false) {
        size += 1 + 1;
      }
      if (IsRollingOver != false) {
        size += 1 + 1;
      }
      size += wheelItems_.CalculateSize(_repeated_wheelItems_codec);
      if (WheelEndIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WheelEndIndex);
      }
      if (WheelNudgeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WheelNudgeIndex);
      }
      if (Bet != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
      }
      size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
      if (TotalWin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
      }
      if (PrizeLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrizeLevel);
      }
      if (WheelWin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WheelWin);
      }
      if (PickWin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PickWin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsPicking = input.ReadBool();
            break;
          }
          case 16: {
            IsPickingOver = input.ReadBool();
            break;
          }
          case 26: {
            pickItems_.AddEntriesFrom(input, _repeated_pickItems_codec);
            break;
          }
          case 32: {
            PickJackpotId = input.ReadUInt32();
            break;
          }
          case 40: {
            IsRolling = input.ReadBool();
            break;
          }
          case 48: {
            IsRollingOver = input.ReadBool();
            break;
          }
          case 58: {
            wheelItems_.AddEntriesFrom(input, _repeated_wheelItems_codec);
            break;
          }
          case 64: {
            WheelEndIndex = input.ReadUInt32();
            break;
          }
          case 72: {
            WheelNudgeIndex = input.ReadUInt32();
            break;
          }
          case 80: {
            Bet = input.ReadUInt64();
            break;
          }
          case 90: {
            triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
            break;
          }
          case 96: {
            TotalWin = input.ReadUInt64();
            break;
          }
          case 104: {
            PrizeLevel = input.ReadUInt32();
            break;
          }
          case 112: {
            WheelWin = input.ReadUInt64();
            break;
          }
          case 120: {
            PickWin = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LuckyRabbits2GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class WheelItem : pb::IMessage {
        private static readonly pb::MessageParser<WheelItem> _parser = new pb::MessageParser<WheelItem>(() => new WheelItem());
        public static pb::MessageParser<WheelItem> Parser { get { return _parser; } }

        private uint jackpotId_;
        /// <summary>
        /// jackpot id
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private ulong winRate_;
        /// <summary>
        /// win rate; 前端展示的时候要乘以bet除以100
        /// </summary>
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        private uint multiplier_;
        /// <summary>
        /// 倍数边缘
        /// </summary>
        public uint Multiplier {
          get { return multiplier_; }
          set {
            multiplier_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (JackpotId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(JackpotId);
          }
          if (WinRate != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(WinRate);
          }
          if (Multiplier != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Multiplier);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          if (Multiplier != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Multiplier);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 16: {
                WinRate = input.ReadUInt64();
                break;
              }
              case 24: {
                Multiplier = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// pick 玩法
      /// </summary>
      public sealed class PickItem : pb::IMessage {
        private static readonly pb::MessageParser<PickItem> _parser = new pb::MessageParser<PickItem>(() => new PickItem());
        public static pb::MessageParser<PickItem> Parser { get { return _parser; } }

        private bool revealed_;
        /// <summary>
        /// 是否显示，被翻开
        /// </summary>
        public bool Revealed {
          get { return revealed_; }
          set {
            revealed_ = value;
          }
        }

        private bool removed_;
        /// <summary>
        /// 是否被幸运的remove卡排除，被排除的item同时revealed=true
        /// </summary>
        public bool Removed {
          get { return removed_; }
          set {
            removed_ = value;
          }
        }

        private uint jackpotId_;
        /// <summary>
        /// jackpot id
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private bool isLucky_;
        /// <summary>
        /// 是否是幸运remove卡
        /// </summary>
        public bool IsLucky {
          get { return isLucky_; }
          set {
            isLucky_ = value;
          }
        }

        private uint removedJackpotId_;
        /// <summary>
        /// remove卡移走的jackpotId
        /// </summary>
        public uint RemovedJackpotId {
          get { return removedJackpotId_; }
          set {
            removedJackpotId_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Revealed != false) {
            output.WriteRawTag(8);
            output.WriteBool(Revealed);
          }
          if (Removed != false) {
            output.WriteRawTag(16);
            output.WriteBool(Removed);
          }
          if (JackpotId != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(JackpotId);
          }
          if (IsLucky != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsLucky);
          }
          if (RemovedJackpotId != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(RemovedJackpotId);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Revealed != false) {
            size += 1 + 1;
          }
          if (Removed != false) {
            size += 1 + 1;
          }
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (IsLucky != false) {
            size += 1 + 1;
          }
          if (RemovedJackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemovedJackpotId);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Revealed = input.ReadBool();
                break;
              }
              case 16: {
                Removed = input.ReadBool();
                break;
              }
              case 24: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 32: {
                IsLucky = input.ReadBool();
                break;
              }
              case 40: {
                RemovedJackpotId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class AmalgamationGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<AmalgamationGameResultExtraInfo> _parser = new pb::MessageParser<AmalgamationGameResultExtraInfo>(() => new AmalgamationGameResultExtraInfo());
    public static pb::MessageParser<AmalgamationGameResultExtraInfo> Parser { get { return _parser; } }

    private bool toChoose_;
    /// <summary>
    /// 是否正在bonus 2选一
    /// </summary>
    public bool ToChoose {
      get { return toChoose_; }
      set {
        toChoose_ = value;
      }
    }

    private uint freeSpinCount_;
    /// <summary>
    /// 2选一的时候 free显示几次
    /// </summary>
    public uint FreeSpinCount {
      get { return freeSpinCount_; }
      set {
        freeSpinCount_ = value;
      }
    }

    private uint reSpinCount_;
    /// <summary>
    /// 2选一的时候 link显示几次
    /// </summary>
    public uint ReSpinCount {
      get { return reSpinCount_; }
      set {
        reSpinCount_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
    /// <summary>
    /// 进入2选一时候的 触发 panels
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
      get { return triggeringPanels_; }
    }

    private static readonly pbc::MapField<uint, int>.Codec _map_dragReelPositionMap_codec
        = new pbc::MapField<uint, int>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForInt32(16), 42);
    private readonly pbc::MapField<uint, int> dragReelPositionMap_ = new pbc::MapField<uint, int>();
    /// <summary>
    /// key: col 0-4, value: 上下偏移; drag wild // 用于free玩法的drag featrue
    /// </summary>
    public pbc::MapField<uint, int> DragReelPositionMap {
      get { return dragReelPositionMap_; }
    }

    private bool linkFromChoose_;
    /// <summary>
    /// 这个link是从2选一进的，还是从base，free中进的；两种情况数值用了不同的卷轴（SelectLinkReels和NormalLinkReels）
    /// </summary>
    public bool LinkFromChoose {
      get { return linkFromChoose_; }
      set {
        linkFromChoose_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.AmalgamationGameResultExtraInfo.Types.LinkData linkData_;
    /// <summary>
    /// link数据，和以前一样的link数据，里面的symbolId要么是13要么是0
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.AmalgamationGameResultExtraInfo.Types.LinkData LinkData {
      get { return linkData_; }
      set {
        linkData_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.AmalgamationGameResultExtraInfo.Types.ShapeItem> _repeated_shapes_codec
        = pb::FieldCodec.ForMessage(66, global::DragonU3DSDK.Network.API.ILProtocol.AmalgamationGameResultExtraInfo.Types.ShapeItem.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AmalgamationGameResultExtraInfo.Types.ShapeItem> shapes_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AmalgamationGameResultExtraInfo.Types.ShapeItem>();
    /// <summary>
    /// shape数据，在link数据基础上合并成的大矩形，转之前是14到24，如果这个
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AmalgamationGameResultExtraInfo.Types.ShapeItem> Shapes {
      get { return shapes_; }
    }

    private bool linkNeedInitialized_;
    /// <summary>
    /// choose link的第一下是类似普通的spin，必转出6个猪; 卷轴名SelectInitialLinkReels
    /// </summary>
    public bool LinkNeedInitialized {
      get { return linkNeedInitialized_; }
      set {
        linkNeedInitialized_ = value;
      }
    }

    private bool isShapeSettling_;
    /// <summary>
    /// shape是否正在结算
    /// </summary>
    public bool IsShapeSettling {
      get { return isShapeSettling_; }
      set {
        isShapeSettling_ = value;
      }
    }

    private bool noReSpinNeeded_;
    /// <summary>
    /// 满贯进link标志
    /// </summary>
    public bool NoReSpinNeeded {
      get { return noReSpinNeeded_; }
      set {
        noReSpinNeeded_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ToChoose != false) {
        output.WriteRawTag(8);
        output.WriteBool(ToChoose);
      }
      if (FreeSpinCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FreeSpinCount);
      }
      if (ReSpinCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ReSpinCount);
      }
      triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
      dragReelPositionMap_.WriteTo(output, _map_dragReelPositionMap_codec);
      if (LinkFromChoose != false) {
        output.WriteRawTag(48);
        output.WriteBool(LinkFromChoose);
      }
      if (linkData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LinkData);
      }
      shapes_.WriteTo(output, _repeated_shapes_codec);
      if (LinkNeedInitialized != false) {
        output.WriteRawTag(72);
        output.WriteBool(LinkNeedInitialized);
      }
      if (IsShapeSettling != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsShapeSettling);
      }
      if (NoReSpinNeeded != false) {
        output.WriteRawTag(88);
        output.WriteBool(NoReSpinNeeded);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ToChoose != false) {
        size += 1 + 1;
      }
      if (FreeSpinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeSpinCount);
      }
      if (ReSpinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReSpinCount);
      }
      size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
      size += dragReelPositionMap_.CalculateSize(_map_dragReelPositionMap_codec);
      if (LinkFromChoose != false) {
        size += 1 + 1;
      }
      if (linkData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkData);
      }
      size += shapes_.CalculateSize(_repeated_shapes_codec);
      if (LinkNeedInitialized != false) {
        size += 1 + 1;
      }
      if (IsShapeSettling != false) {
        size += 1 + 1;
      }
      if (NoReSpinNeeded != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ToChoose = input.ReadBool();
            break;
          }
          case 16: {
            FreeSpinCount = input.ReadUInt32();
            break;
          }
          case 24: {
            ReSpinCount = input.ReadUInt32();
            break;
          }
          case 34: {
            triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
            break;
          }
          case 42: {
            dragReelPositionMap_.AddEntriesFrom(input, _map_dragReelPositionMap_codec);
            break;
          }
          case 48: {
            LinkFromChoose = input.ReadBool();
            break;
          }
          case 58: {
            if (linkData_ == null) {
              linkData_ = new global::DragonU3DSDK.Network.API.ILProtocol.AmalgamationGameResultExtraInfo.Types.LinkData();
            }
            input.ReadMessage(linkData_);
            break;
          }
          case 66: {
            shapes_.AddEntriesFrom(input, _repeated_shapes_codec);
            break;
          }
          case 72: {
            LinkNeedInitialized = input.ReadBool();
            break;
          }
          case 80: {
            IsShapeSettling = input.ReadBool();
            break;
          }
          case 88: {
            NoReSpinNeeded = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AmalgamationGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class LinkData : pb::IMessage {
        private static readonly pb::MessageParser<LinkData> _parser = new pb::MessageParser<LinkData>(() => new LinkData());
        public static pb::MessageParser<LinkData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.AmalgamationGameResultExtraInfo.Types.LinkData.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.AmalgamationGameResultExtraInfo.Types.LinkData.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AmalgamationGameResultExtraInfo.Types.LinkData.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AmalgamationGameResultExtraInfo.Types.LinkData.Types.Item>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AmalgamationGameResultExtraInfo.Types.LinkData.Types.Item> Items {
          get { return items_; }
        }

        private static readonly pbc::MapField<uint, uint>.Codec _map_reelMapping_codec
            = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 18);
        private readonly pbc::MapField<uint, uint> reelMapping_ = new pbc::MapField<uint, uint>();
        /// <summary>
        /// linkReels轴映射
        /// </summary>
        public pbc::MapField<uint, uint> ReelMapping {
          get { return reelMapping_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          reelMapping_.WriteTo(output, _map_reelMapping_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          size += reelMapping_.CalculateSize(_map_reelMapping_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 18: {
                reelMapping_.AddEntriesFrom(input, _map_reelMapping_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LinkData message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private uint positionId_;
            /// <summary>
            /// 位置
            /// </summary>
            public uint PositionId {
              get { return positionId_; }
              set {
                positionId_ = value;
              }
            }

            private uint symbolId_;
            /// <summary>
            /// 现实图标
            /// </summary>
            public uint SymbolId {
              get { return symbolId_; }
              set {
                symbolId_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (PositionId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PositionId);
              }
              if (SymbolId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(SymbolId);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (PositionId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
              }
              if (SymbolId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    PositionId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    SymbolId = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed class ShapeItem : pb::IMessage {
        private static readonly pb::MessageParser<ShapeItem> _parser = new pb::MessageParser<ShapeItem>(() => new ShapeItem());
        public static pb::MessageParser<ShapeItem> Parser { get { return _parser; } }

        private uint positionId_;
        /// <summary>
        /// 位置
        /// </summary>
        public uint PositionId {
          get { return positionId_; }
          set {
            positionId_ = value;
          }
        }

        private uint symbolId_;
        /// <summary>
        /// 现实图标
        /// </summary>
        public uint SymbolId {
          get { return symbolId_; }
          set {
            symbolId_ = value;
          }
        }

        private ulong winRate_;
        /// <summary>
        /// 赢钱倍率
        /// </summary>
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        private uint jackpotId_;
        /// <summary>
        /// jackpot id
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private ulong jackpotPay_;
        /// <summary>
        /// jackpot pay
        /// </summary>
        public ulong JackpotPay {
          get { return jackpotPay_; }
          set {
            jackpotPay_ = value;
          }
        }

        private uint width_;
        /// <summary>
        /// 宽
        /// </summary>
        public uint Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        private uint height_;
        /// <summary>
        /// 长
        /// </summary>
        public uint Height {
          get { return height_; }
          set {
            height_ = value;
          }
        }

        private bool isOver_;
        /// <summary>
        /// 这个shape转完
        /// </summary>
        public bool IsOver {
          get { return isOver_; }
          set {
            isOver_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (PositionId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PositionId);
          }
          if (SymbolId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(SymbolId);
          }
          if (WinRate != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(WinRate);
          }
          if (JackpotId != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(JackpotId);
          }
          if (JackpotPay != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(JackpotPay);
          }
          if (Width != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Width);
          }
          if (Height != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(Height);
          }
          if (IsOver != false) {
            output.WriteRawTag(64);
            output.WriteBool(IsOver);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (PositionId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
          }
          if (SymbolId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
          }
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (JackpotPay != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
          }
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
          }
          if (Height != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
          }
          if (IsOver != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PositionId = input.ReadUInt32();
                break;
              }
              case 16: {
                SymbolId = input.ReadUInt32();
                break;
              }
              case 24: {
                WinRate = input.ReadUInt64();
                break;
              }
              case 32: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 40: {
                JackpotPay = input.ReadUInt64();
                break;
              }
              case 48: {
                Width = input.ReadUInt32();
                break;
              }
              case 56: {
                Height = input.ReadUInt32();
                break;
              }
              case 64: {
                IsOver = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*============================== EyeOfMedusa ================================*/
  /// 这关有两个复杂点：
  /// 1： feature很多，主要看后面的字段描述 belle feature, bag feature, wheel, map free
  /// 2： free的总类很多，主要依靠freeSpinInfo.freeSpinId进行区分
  ///    freeSpinId == 0, 表示普通free，靠wheel转出来
  ///    freeSpinId == 1, 表示belle free，靠wheel转出来
  ///    freeSpinId == 2, 表示map中的，classic free, avgBet
  ///    freeSpinId == 3, 表示map中的，random wild类型free, avgBet
  ///    freeSpinId == 4, 表示map中的，moving wild类型free, avgBet
  ///    freeSpinId == 5, 表示map中的，sticky wild类型free, avgBet
  ///    freeSpinId == 6, 表示map中的，2-10 multiplier wild类型free, avgBet
  ///    freeSpinId == 7, 表示map中的，5-50 multiplier wild类型free, avgBet
  ///    freeSpinId == 8, 表示map中的，10-100 multiplier wild类型free, avgBet
  /// 特殊赢钱线：
  /// 1 scatter触发wheel bonusGameId = 1001
  /// 2 s1触发map，bonusGameId = 2002
  /// 3 belle feature中 gems的特殊赢钱线 bonsGameId = 3001
  /// 4 bag特殊赢钱线，bonusGameId = 4001
  /// 多状态转化同时触发情况：
  /// base可以同时触发map和wheel，此时先完成map，再进行wheel。
  /// 会在map的settle api返回: gameResult.bonusGame > 0 和 extra.wheel.started = true;
  /// </summary>
  public sealed class EyeOfMedusaGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<EyeOfMedusaGameResultExtraInfo> _parser = new pb::MessageParser<EyeOfMedusaGameResultExtraInfo>(() => new EyeOfMedusaGameResultExtraInfo());
    public static pb::MessageParser<EyeOfMedusaGameResultExtraInfo> Parser { get { return _parser; } }

    private uint level_;
    /// <summary>
    /// map related
    /// </summary>
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private uint point_;
    /// <summary>
    /// map 的累计槽进度,
    /// </summary>
    public uint Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    private uint maxPoint_;
    /// <summary>
    /// map 的累计槽最大值， 注意point累积触发map free时，point可能超过max_point
    /// </summary>
    public uint MaxPoint {
      get { return maxPoint_; }
      set {
        maxPoint_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedPositions> _repeated_mapRandomWilds_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedPositions.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedPositions> mapRandomWilds_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedPositions>();
    /// <summary>
    /// map 玩法的随机wild位置, index是0，1，2对应第几个panel
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedPositions> MapRandomWilds {
      get { return mapRandomWilds_; }
    }

    private static readonly pb::FieldCodec<uint> _repeated_mapMultipliers_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> mapMultipliers_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// map 玩法倍数
    /// </summary>
    public pbc::RepeatedField<uint> MapMultipliers {
      get { return mapMultipliers_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedPositionIds> _repeated_mapStickyWilds_codec
        = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedPositionIds.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedPositionIds> mapStickyWilds_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedPositionIds>();
    /// <summary>
    /// map 玩法的sticky wild位置, index是 0，1，2对应第几个panel
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedPositionIds> MapStickyWilds {
      get { return mapStickyWilds_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedMovingPositionIds> _repeated_mapMovingWilds_codec
        = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedMovingPositionIds.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedMovingPositionIds> mapMovingWilds_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedMovingPositionIds>();
    /// <summary>
    /// map 玩法的moving wild位置, index是0，1，2对应第几个panel
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.RepeatedMovingPositionIds> MapMovingWilds {
      get { return mapMovingWilds_; }
    }

    private bool isFeature_;
    /// <summary>
    /// belle feature related
    /// </summary>
    public bool IsFeature {
      get { return isFeature_; }
      set {
        isFeature_ = value;
      }
    }

    private static readonly pbc::MapField<uint, int>.Codec _map_dragReelPositionMap_codec
        = new pbc::MapField<uint, int>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForInt32(16), 74);
    private readonly pbc::MapField<uint, int> dragReelPositionMap_ = new pbc::MapField<uint, int>();
    /// <summary>
    /// 触发feature的时候第一列可能发生drag；这里用一个map是为了和其他任何列都能drag的游戏统一
    /// </summary>
    public pbc::MapField<uint, int> DragReelPositionMap {
      get { return dragReelPositionMap_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.PositionId> _repeated_randomPositionedGems_codec
        = pb::FieldCodec.ForMessage(82, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.PositionId.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.PositionId> randomPositionedGems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.PositionId>();
    /// <summary>
    /// 粗发feature的时候 生成的随机gems
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.PositionId> RandomPositionedGems {
      get { return randomPositionedGems_; }
    }

    private uint bagLevel_;
    /// <summary>
    /// bag feature related
    /// </summary>
    public uint BagLevel {
      get { return bagLevel_; }
      set {
        bagLevel_ = value;
      }
    }

    private static readonly pb::FieldCodec<uint> _repeated_bagLevelHistory_codec
        = pb::FieldCodec.ForUInt32(98);
    private readonly pbc::RepeatedField<uint> bagLevelHistory_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// bag_level_history类似一些游戏的old_level,old_points, 但这里数个数组，因为可能一次转出多个bag;
    /// 正常没有bag转出时它是空
    /// 例1： 如果转出1个bag，而且他中了， 转出前bag_level是1
    /// 那么返回: bag_level = 0; bag_level_history = [1]
    /// 例2： 如果转出1个bag，但他没中， 转出前bag_level是2
    /// 那么返回: bag_level = 2; bag_level_history = [2]
    /// 例3： 如果转出2个bag，转出前bag_level是1，第一个bag没中让bag_level加1，第二个bag中了
    /// 那么返回: bag_level = 0; bqg_level_history = [1, 2]
    /// 例4：如果转出4个bag，转出前bag_level是1，第一个bag没中， 第二个bag没中， 第三个bag中了， 第四个bag没中
    /// 那么返回: bag_level = 1; bag_level_history = [1, 2，2，0]
    /// </summary>
    public pbc::RepeatedField<uint> BagLevelHistory {
      get { return bagLevelHistory_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Position> _repeated_normalFreeRandomWilds_codec
        = pb::FieldCodec.ForMessage(106, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Position.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Position> normalFreeRandomWilds_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Position>();
    /// <summary>
    /// normal free related
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Position> NormalFreeRandomWilds {
      get { return normalFreeRandomWilds_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Wheel wheel_;
    /// <summary>
    /// wheel数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Wheel Wheel {
      get { return wheel_; }
      set {
        wheel_ = value;
      }
    }

    private ulong mapFreePreWin_;
    /// <summary>
    /// map free pre win
    /// </summary>
    public ulong MapFreePreWin {
      get { return mapFreePreWin_; }
      set {
        mapFreePreWin_ = value;
      }
    }

    private ulong bagWin_;
    /// <summary>
    /// bagWin
    /// </summary>
    public ulong BagWin {
      get { return bagWin_; }
      set {
        bagWin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (Point != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Point);
      }
      if (MaxPoint != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxPoint);
      }
      mapRandomWilds_.WriteTo(output, _repeated_mapRandomWilds_codec);
      mapMultipliers_.WriteTo(output, _repeated_mapMultipliers_codec);
      mapStickyWilds_.WriteTo(output, _repeated_mapStickyWilds_codec);
      mapMovingWilds_.WriteTo(output, _repeated_mapMovingWilds_codec);
      if (IsFeature != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsFeature);
      }
      dragReelPositionMap_.WriteTo(output, _map_dragReelPositionMap_codec);
      randomPositionedGems_.WriteTo(output, _repeated_randomPositionedGems_codec);
      if (BagLevel != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(BagLevel);
      }
      bagLevelHistory_.WriteTo(output, _repeated_bagLevelHistory_codec);
      normalFreeRandomWilds_.WriteTo(output, _repeated_normalFreeRandomWilds_codec);
      if (wheel_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Wheel);
      }
      if (MapFreePreWin != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(MapFreePreWin);
      }
      if (BagWin != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(BagWin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Point);
      }
      if (MaxPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPoint);
      }
      size += mapRandomWilds_.CalculateSize(_repeated_mapRandomWilds_codec);
      size += mapMultipliers_.CalculateSize(_repeated_mapMultipliers_codec);
      size += mapStickyWilds_.CalculateSize(_repeated_mapStickyWilds_codec);
      size += mapMovingWilds_.CalculateSize(_repeated_mapMovingWilds_codec);
      if (IsFeature != false) {
        size += 1 + 1;
      }
      size += dragReelPositionMap_.CalculateSize(_map_dragReelPositionMap_codec);
      size += randomPositionedGems_.CalculateSize(_repeated_randomPositionedGems_codec);
      if (BagLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BagLevel);
      }
      size += bagLevelHistory_.CalculateSize(_repeated_bagLevelHistory_codec);
      size += normalFreeRandomWilds_.CalculateSize(_repeated_normalFreeRandomWilds_codec);
      if (wheel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wheel);
      }
      if (MapFreePreWin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MapFreePreWin);
      }
      if (BagWin != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(BagWin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            Point = input.ReadUInt32();
            break;
          }
          case 24: {
            MaxPoint = input.ReadUInt32();
            break;
          }
          case 34: {
            mapRandomWilds_.AddEntriesFrom(input, _repeated_mapRandomWilds_codec);
            break;
          }
          case 42:
          case 40: {
            mapMultipliers_.AddEntriesFrom(input, _repeated_mapMultipliers_codec);
            break;
          }
          case 50: {
            mapStickyWilds_.AddEntriesFrom(input, _repeated_mapStickyWilds_codec);
            break;
          }
          case 58: {
            mapMovingWilds_.AddEntriesFrom(input, _repeated_mapMovingWilds_codec);
            break;
          }
          case 64: {
            IsFeature = input.ReadBool();
            break;
          }
          case 74: {
            dragReelPositionMap_.AddEntriesFrom(input, _map_dragReelPositionMap_codec);
            break;
          }
          case 82: {
            randomPositionedGems_.AddEntriesFrom(input, _repeated_randomPositionedGems_codec);
            break;
          }
          case 88: {
            BagLevel = input.ReadUInt32();
            break;
          }
          case 98:
          case 96: {
            bagLevelHistory_.AddEntriesFrom(input, _repeated_bagLevelHistory_codec);
            break;
          }
          case 106: {
            normalFreeRandomWilds_.AddEntriesFrom(input, _repeated_normalFreeRandomWilds_codec);
            break;
          }
          case 114: {
            if (wheel_ == null) {
              wheel_ = new global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Wheel();
            }
            input.ReadMessage(wheel_);
            break;
          }
          case 120: {
            MapFreePreWin = input.ReadUInt64();
            break;
          }
          case 128: {
            BagWin = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EyeOfMedusaGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class Position : pb::IMessage {
        private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
        public static pb::MessageParser<Position> Parser { get { return _parser; } }

        private uint x_;
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class RepeatedPositions : pb::IMessage {
        private static readonly pb::MessageParser<RepeatedPositions> _parser = new pb::MessageParser<RepeatedPositions>(() => new RepeatedPositions());
        public static pb::MessageParser<RepeatedPositions> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Position> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Position.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Position> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Position>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Position> Items {
          get { return items_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class PositionId : pb::IMessage {
        private static readonly pb::MessageParser<PositionId> _parser = new pb::MessageParser<PositionId>(() => new PositionId());
        public static pb::MessageParser<PositionId> Parser { get { return _parser; } }

        private uint x_;
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        private uint id_;
        /// <summary>
        /// symbol id
        /// </summary>
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
          if (Id != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Id);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
              case 24: {
                Id = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class RepeatedPositionIds : pb::IMessage {
        private static readonly pb::MessageParser<RepeatedPositionIds> _parser = new pb::MessageParser<RepeatedPositionIds>(() => new RepeatedPositionIds());
        public static pb::MessageParser<RepeatedPositionIds> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.PositionId> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.PositionId.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.PositionId> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.PositionId>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.PositionId> Items {
          get { return items_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class MovingPositionId : pb::IMessage {
        private static readonly pb::MessageParser<MovingPositionId> _parser = new pb::MessageParser<MovingPositionId>(() => new MovingPositionId());
        public static pb::MessageParser<MovingPositionId> Parser { get { return _parser; } }

        private bool moving_;
        /// <summary>
        /// 当前位置是否不是新转出来的(可能用词略有歧义，主要区分这一把转出来的和之前转出来的，之前转出来spin之前会moving)；新转出来的sticky moving=false
        /// </summary>
        public bool Moving {
          get { return moving_; }
          set {
            moving_ = value;
          }
        }

        private uint oldX_;
        /// <summary>
        /// 老位置， 注意有可能 老位置==新位置 and moving == true
        /// </summary>
        public uint OldX {
          get { return oldX_; }
          set {
            oldX_ = value;
          }
        }

        private uint oldY_;
        /// <summary>
        /// 老位置  当 moving == false时， 老位置 必定等于 新位置
        /// </summary>
        public uint OldY {
          get { return oldY_; }
          set {
            oldY_ = value;
          }
        }

        private uint x_;
        /// <summary>
        /// 新位置
        /// </summary>
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        /// <summary>
        /// 新位置
        /// </summary>
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        private uint id_;
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Moving != false) {
            output.WriteRawTag(8);
            output.WriteBool(Moving);
          }
          if (OldX != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(OldX);
          }
          if (OldY != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(OldY);
          }
          if (X != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Y);
          }
          if (Id != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Id);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Moving != false) {
            size += 1 + 1;
          }
          if (OldX != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldX);
          }
          if (OldY != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldY);
          }
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Moving = input.ReadBool();
                break;
              }
              case 16: {
                OldX = input.ReadUInt32();
                break;
              }
              case 24: {
                OldY = input.ReadUInt32();
                break;
              }
              case 32: {
                X = input.ReadUInt32();
                break;
              }
              case 40: {
                Y = input.ReadUInt32();
                break;
              }
              case 48: {
                Id = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class RepeatedMovingPositionIds : pb::IMessage {
        private static readonly pb::MessageParser<RepeatedMovingPositionIds> _parser = new pb::MessageParser<RepeatedMovingPositionIds>(() => new RepeatedMovingPositionIds());
        public static pb::MessageParser<RepeatedMovingPositionIds> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.MovingPositionId> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.MovingPositionId.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.MovingPositionId> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.MovingPositionId>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.MovingPositionId> Items {
          get { return items_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// wheel related
      /// </summary>
      public sealed class Wheel : pb::IMessage {
        private static readonly pb::MessageParser<Wheel> _parser = new pb::MessageParser<Wheel>(() => new Wheel());
        public static pb::MessageParser<Wheel> Parser { get { return _parser; } }

        private ulong bet_;
        /// <summary>
        /// 进入wheel的bet
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private ulong totalWin_;
        /// <summary>
        /// wheel的总赢钱；类似freeSpinInfo.freeSpinTotalWin; 包括触发的线赢甚至同时触发map时，之前map的总赢
        /// </summary>
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
            = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        /// <summary>
        /// 触发的panel
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
          get { return triggeringPanels_; }
        }

        private bool started_;
        /// <summary>
        /// 是否开始
        /// </summary>
        public bool Started {
          get { return started_; }
          set {
            started_ = value;
          }
        }

        private bool toSettle_;
        /// <summary>
        /// 是否结算完毕，用于判断是否该调用settle api
        /// </summary>
        public bool ToSettle {
          get { return toSettle_; }
          set {
            toSettle_ = value;
          }
        }

        private uint index_;
        /// <summary>
        /// wheel转出的结果的序号
        /// </summary>
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Wheel.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Wheel.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Wheel.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Wheel.Types.Item>();
        /// <summary>
        /// wheel里每一个item的信息
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusaGameResultExtraInfo.Types.Wheel.Types.Item> Items {
          get { return items_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Bet != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Bet);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(TotalWin);
          }
          triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
          if (Started != false) {
            output.WriteRawTag(32);
            output.WriteBool(Started);
          }
          if (ToSettle != false) {
            output.WriteRawTag(40);
            output.WriteBool(ToSettle);
          }
          if (Index != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Index);
          }
          items_.WriteTo(output, _repeated_items_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
          if (Started != false) {
            size += 1 + 1;
          }
          if (ToSettle != false) {
            size += 1 + 1;
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Bet = input.ReadUInt64();
                break;
              }
              case 16: {
                TotalWin = input.ReadUInt64();
                break;
              }
              case 26: {
                triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
                break;
              }
              case 32: {
                Started = input.ReadBool();
                break;
              }
              case 40: {
                ToSettle = input.ReadBool();
                break;
              }
              case 48: {
                Index = input.ReadUInt32();
                break;
              }
              case 58: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Wheel message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private uint jackpotId_;
            /// <summary>
            /// 非0表示这是jackpot
            /// </summary>
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private bool isFeatureFree_;
            /// <summary>
            /// true表示这是触发belle free
            /// </summary>
            public bool IsFeatureFree {
              get { return isFeatureFree_; }
              set {
                isFeatureFree_ = value;
              }
            }

            private bool isNormalFree_;
            /// <summary>
            /// true表示这是触发普通free
            /// </summary>
            public bool IsNormalFree {
              get { return isNormalFree_; }
              set {
                isNormalFree_ = value;
              }
            }

            private bool isBagBonus_;
            /// <summary>
            /// true表示这是触发Bag
            /// </summary>
            public bool IsBagBonus {
              get { return isBagBonus_; }
              set {
                isBagBonus_ = value;
              }
            }

            private ulong winRate_;
            /// <summary>
            /// 如果是bag，这里是bag的winRate
            /// </summary>
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            private ulong jackpotPay_;
            /// <summary>
            /// 如果是jackpot，这里是jackpot的winRate
            /// </summary>
            public ulong JackpotPay {
              get { return jackpotPay_; }
              set {
                jackpotPay_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (JackpotId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(JackpotId);
              }
              if (IsFeatureFree != false) {
                output.WriteRawTag(16);
                output.WriteBool(IsFeatureFree);
              }
              if (IsNormalFree != false) {
                output.WriteRawTag(24);
                output.WriteBool(IsNormalFree);
              }
              if (IsBagBonus != false) {
                output.WriteRawTag(32);
                output.WriteBool(IsBagBonus);
              }
              if (WinRate != 0UL) {
                output.WriteRawTag(40);
                output.WriteUInt64(WinRate);
              }
              if (JackpotPay != 0UL) {
                output.WriteRawTag(48);
                output.WriteUInt64(JackpotPay);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              if (IsFeatureFree != false) {
                size += 1 + 1;
              }
              if (IsNormalFree != false) {
                size += 1 + 1;
              }
              if (IsBagBonus != false) {
                size += 1 + 1;
              }
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              if (JackpotPay != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    IsFeatureFree = input.ReadBool();
                    break;
                  }
                  case 24: {
                    IsNormalFree = input.ReadBool();
                    break;
                  }
                  case 32: {
                    IsBagBonus = input.ReadBool();
                    break;
                  }
                  case 40: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                  case 48: {
                    JackpotPay = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// *====================================== GoldRushTrain ========================================= *//
  ///
  /// train feature主要火车数据在trains中，每次bonus_process让一个火车跑出结果； 如果有金火车，它会在trains中的最后一个
  /// 当train feature所有train.over=true后要结算，发settle_api
  /// 注意如果一个火车都没有（只有数字奖和星星），也会进入train feature bonus, 并直接发settle_api结算
  ///
  /// 如果同时触发train feature和2选1， train feature的settle api返回之后会进入2选1；
  /// 2选1的参数和11011一样，靠json字段有无，有json进入train feature
  /// 2选一的train feature进入之后会用bonus_process api来得到触发panel,再进行正常train feature；（之前王剑商量确定这么处理）
  ///
  /// 注意isTrain=true &amp;&amp; is_panel_ready=false时断线重连，返回的gameResult.panels是chooseTriggeringPanels(可以商量怎么处理)
  /// isTrain=true &amp;&amp; is_panel_ready=true时断线重连，返回的gameResult.panels是trainTriggeringPanels
  ///
  /// free中会触发进入reSpin状态（之前王剑商量确定这么处理），会reSpin一次或两次；
  ///
  /// 几种特殊赢钱线：（具体id是否超过1000可以商量）
  /// scatter触发2选一的winLine.bonusGameId = 101
  /// 触发train的winLine.bonusGameId = 201;（base中会有，2选一train feature第一下会有）
  /// </summary>
  public sealed class GoldRushTrainGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<GoldRushTrainGameResultExtraInfo> _parser = new pb::MessageParser<GoldRushTrainGameResultExtraInfo>(() => new GoldRushTrainGameResultExtraInfo());
    public static pb::MessageParser<GoldRushTrainGameResultExtraInfo> Parser { get { return _parser; } }

    private bool chosen_;
    /// <summary>
    /// choose related
    /// </summary>
    public bool Chosen {
      get { return chosen_; }
      set {
        chosen_ = value;
      }
    }

    private uint freeSpinCount_;
    /// <summary>
    /// 2选一的时候 free显示几次
    /// </summary>
    public uint FreeSpinCount {
      get { return freeSpinCount_; }
      set {
        freeSpinCount_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.StickyColumn> _repeated_stickyColumns_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.StickyColumn.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.StickyColumn> stickyColumns_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.StickyColumn>();
    /// <summary>
    /// free中触发reSpin的sticky columns
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.StickyColumn> StickyColumns {
      get { return stickyColumns_; }
    }

    private bool isTrain_;
    /// <summary>
    /// train feature related
    /// </summary>
    public bool IsTrain {
      get { return isTrain_; }
      set {
        isTrain_ = value;
      }
    }

    private bool isChosenTrain_;
    /// <summary>
    /// train feature是否是2选一触发的
    /// </summary>
    public bool IsChosenTrain {
      get { return isChosenTrain_; }
      set {
        isChosenTrain_ = value;
      }
    }

    private bool isPanelReady_;
    /// <summary>
    /// 如果是is_chosen_train==true, 它表示第一下触发panel是否已经转出来了
    /// </summary>
    public bool IsPanelReady {
      get { return isPanelReady_; }
      set {
        isPanelReady_ = value;
      }
    }

    private ulong winLinePay_;
    /// <summary>
    /// 火车赢钱线的奖励累积，是winRate； 如果有金火车加倍它会是加倍之前的值；它包换数字奖和非金火车奖
    /// </summary>
    public ulong WinLinePay {
      get { return winLinePay_; }
      set {
        winLinePay_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.Train> _repeated_trains_codec
        = pb::FieldCodec.ForMessage(66, global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.Train.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.Train> trains_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.Train>();
    /// <summary>
    /// 火车数据
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.Train> Trains {
      get { return trains_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_chooseTriggeringPanels_codec
        = pb::FieldCodec.ForMessage(74, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> chooseTriggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
    /// <summary>
    /// 2选1的触发panels
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> ChooseTriggeringPanels {
      get { return chooseTriggeringPanels_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_trainTriggeringPanels_codec
        = pb::FieldCodec.ForMessage(82, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> trainTriggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
    /// <summary>
    /// train feature bonus的触发panels
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TrainTriggeringPanels {
      get { return trainTriggeringPanels_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Chosen != false) {
        output.WriteRawTag(8);
        output.WriteBool(Chosen);
      }
      if (FreeSpinCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FreeSpinCount);
      }
      stickyColumns_.WriteTo(output, _repeated_stickyColumns_codec);
      if (IsTrain != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsTrain);
      }
      if (IsChosenTrain != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsChosenTrain);
      }
      if (IsPanelReady != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsPanelReady);
      }
      if (WinLinePay != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(WinLinePay);
      }
      trains_.WriteTo(output, _repeated_trains_codec);
      chooseTriggeringPanels_.WriteTo(output, _repeated_chooseTriggeringPanels_codec);
      trainTriggeringPanels_.WriteTo(output, _repeated_trainTriggeringPanels_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Chosen != false) {
        size += 1 + 1;
      }
      if (FreeSpinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeSpinCount);
      }
      size += stickyColumns_.CalculateSize(_repeated_stickyColumns_codec);
      if (IsTrain != false) {
        size += 1 + 1;
      }
      if (IsChosenTrain != false) {
        size += 1 + 1;
      }
      if (IsPanelReady != false) {
        size += 1 + 1;
      }
      if (WinLinePay != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinLinePay);
      }
      size += trains_.CalculateSize(_repeated_trains_codec);
      size += chooseTriggeringPanels_.CalculateSize(_repeated_chooseTriggeringPanels_codec);
      size += trainTriggeringPanels_.CalculateSize(_repeated_trainTriggeringPanels_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Chosen = input.ReadBool();
            break;
          }
          case 16: {
            FreeSpinCount = input.ReadUInt32();
            break;
          }
          case 26: {
            stickyColumns_.AddEntriesFrom(input, _repeated_stickyColumns_codec);
            break;
          }
          case 32: {
            IsTrain = input.ReadBool();
            break;
          }
          case 40: {
            IsChosenTrain = input.ReadBool();
            break;
          }
          case 48: {
            IsPanelReady = input.ReadBool();
            break;
          }
          case 56: {
            WinLinePay = input.ReadUInt64();
            break;
          }
          case 66: {
            trains_.AddEntriesFrom(input, _repeated_trains_codec);
            break;
          }
          case 74: {
            chooseTriggeringPanels_.AddEntriesFrom(input, _repeated_chooseTriggeringPanels_codec);
            break;
          }
          case 82: {
            trainTriggeringPanels_.AddEntriesFrom(input, _repeated_trainTriggeringPanels_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GoldRushTrainGameResultExtraInfo message type.</summary>
    public static class Types {
      /// <summary>
      /// free related
      /// </summary>
      public sealed class StickyColumn : pb::IMessage {
        private static readonly pb::MessageParser<StickyColumn> _parser = new pb::MessageParser<StickyColumn>(() => new StickyColumn());
        public static pb::MessageParser<StickyColumn> Parser { get { return _parser; } }

        private uint x_;
        /// <summary>
        /// x轴
        /// </summary>
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private static readonly pb::FieldCodec<uint> _repeated_symbols_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> symbols_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// symbol ids
        /// </summary>
        public pbc::RepeatedField<uint> Symbols {
          get { return symbols_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          symbols_.WriteTo(output, _repeated_symbols_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          size += symbols_.CalculateSize(_repeated_symbols_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 18:
              case 16: {
                symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class Train : pb::IMessage {
        private static readonly pb::MessageParser<Train> _parser = new pb::MessageParser<Train>(() => new Train());
        public static pb::MessageParser<Train> Parser { get { return _parser; } }

        private bool over_;
        /// <summary>
        /// train结果是否跑完
        /// </summary>
        public bool Over {
          get { return over_; }
          set {
            over_ = value;
          }
        }

        private uint id_;
        /// <summary>
        /// train的SymbolId, 靠它分辨是颜色的火车
        /// </summary>
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        private uint x_;
        /// <summary>
        /// panel上的位置x
        /// </summary>
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        /// <summary>
        /// panel上的位置y
        /// </summary>
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.Train.Types.Result> _repeated_results_codec
            = pb::FieldCodec.ForMessage(42, global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.Train.Types.Result.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.Train.Types.Result> results_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.Train.Types.Result>();
        /// <summary>
        /// 火车箱结果
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GoldRushTrainGameResultExtraInfo.Types.Train.Types.Result> Results {
          get { return results_; }
        }

        private ulong totalWinRate_;
        /// <summary>
        /// 火车总winRate
        /// </summary>
        public ulong TotalWinRate {
          get { return totalWinRate_; }
          set {
            totalWinRate_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Over != false) {
            output.WriteRawTag(8);
            output.WriteBool(Over);
          }
          if (Id != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Id);
          }
          if (X != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Y);
          }
          results_.WriteTo(output, _repeated_results_codec);
          if (TotalWinRate != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(TotalWinRate);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Over != false) {
            size += 1 + 1;
          }
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          size += results_.CalculateSize(_repeated_results_codec);
          if (TotalWinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWinRate);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Over = input.ReadBool();
                break;
              }
              case 16: {
                Id = input.ReadUInt32();
                break;
              }
              case 24: {
                X = input.ReadUInt32();
                break;
              }
              case 32: {
                Y = input.ReadUInt32();
                break;
              }
              case 42: {
                results_.AddEntriesFrom(input, _repeated_results_codec);
                break;
              }
              case 48: {
                TotalWinRate = input.ReadUInt64();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Train message type.</summary>
        public static class Types {
          public sealed class Result : pb::IMessage {
            private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
            public static pb::MessageParser<Result> Parser { get { return _parser; } }

            private ulong winRate_;
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            private uint jackpotId_;
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private ulong jackpotPay_;
            public ulong JackpotPay {
              get { return jackpotPay_; }
              set {
                jackpotPay_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (WinRate != 0UL) {
                output.WriteRawTag(8);
                output.WriteUInt64(WinRate);
              }
              if (JackpotId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(JackpotId);
              }
              if (JackpotPay != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(JackpotPay);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              if (JackpotPay != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                  case 16: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    JackpotPay = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///
  ///注意事项:
  ///1 这个游戏的link不是通过单轴生成的，前端之前可能认为所有link玩法都是单轴转出来的,这一次是3*5转出来的
  ///2 link数据会变化；比如从带jackpot的辣椒id变成单红的辣椒id
  ///3 map玩法要积累26次才生效, bonus api根据当前游戏状态发选择位置参数
  ///4 可能出现同时触发map和link，先玩map，再玩link
  ///5 特殊赢钱线,如果base一次产生的辣椒大于6个但没有触发link，会有一条bonusGameId=101的额外赢钱线
  ///
  ///其他的看下面各字段解释就懂了
  /// </summary>
  public sealed class ChilliFrenzyGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<ChilliFrenzyGameResultExtraInfo> _parser = new pb::MessageParser<ChilliFrenzyGameResultExtraInfo>(() => new ChilliFrenzyGameResultExtraInfo());
    public static pb::MessageParser<ChilliFrenzyGameResultExtraInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.MapBonus mapBonus_;
    /// <summary>
    /// map数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.MapBonus MapBonus {
      get { return mapBonus_; }
      set {
        mapBonus_ = value;
      }
    }

    private bool linkTriggeredBy6PepperAndGreen_;
    /// <summary>
    /// link 进入两种方式中的一种
    /// </summary>
    public bool LinkTriggeredBy6PepperAndGreen {
      get { return linkTriggeredBy6PepperAndGreen_; }
      set {
        linkTriggeredBy6PepperAndGreen_ = value;
      }
    }

    private bool linkTriggeredBy3YellowPepper_;
    /// <summary>
    ///  link 进入两种方式中的一种， 如果 link_triggered_by6_pepper_and_green也是true， 说明是先进了小link又进大link
    /// </summary>
    public bool LinkTriggeredBy3YellowPepper {
      get { return linkTriggeredBy3YellowPepper_; }
      set {
        linkTriggeredBy3YellowPepper_ = value;
      }
    }

    private uint linkActivePanelCount_;
    /// <summary>
    /// link中，当前解锁的panel数， link_triggered_by6_pepper_and_green时为1；
    /// </summary>
    public uint LinkActivePanelCount {
      get { return linkActivePanelCount_; }
      set {
        linkActivePanelCount_ = value;
      }
    }

    private uint linkPepperCount_;
    /// <summary>
    /// 辣椒数
    /// </summary>
    public uint LinkPepperCount {
      get { return linkPepperCount_; }
      set {
        linkPepperCount_ = value;
      }
    }

    private ulong linkPepperWinRate_;
    /// <summary>
    /// 辣酱奖励winRate
    /// </summary>
    public ulong LinkPepperWinRate {
      get { return linkPepperWinRate_; }
      set {
        linkPepperWinRate_ = value;
      }
    }

    private uint linkPepperJackpotId_;
    /// <summary>
    /// 辣酱奖励如果是最高档这里就不等于0
    /// </summary>
    public uint LinkPepperJackpotId {
      get { return linkPepperJackpotId_; }
      set {
        linkPepperJackpotId_ = value;
      }
    }

    private ulong linkPepperJackpotPay_;
    /// <summary>
    /// 辣酱奖励是最高档时的winRate
    /// </summary>
    public ulong LinkPepperJackpotPay {
      get { return linkPepperJackpotPay_; }
      set {
        linkPepperJackpotPay_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.LinkData> _repeated_linkDataList_codec
        = pb::FieldCodec.ForMessage(74, global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.LinkData.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.LinkData> linkDataList_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.LinkData>();
    /// <summary>
    /// 这回的linkData共有4个放在数组里，两种玩法共用第一个
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.LinkData> LinkDataList {
      get { return linkDataList_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.JackpotTitle> _repeated_jackpotTitleList_codec
        = pb::FieldCodec.ForMessage(82, global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.JackpotTitle.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.JackpotTitle> jackpotTitleList_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.JackpotTitle>();
    /// <summary>
    /// 上面辣椒jackpot的状态
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.JackpotTitle> JackpotTitleList {
      get { return jackpotTitleList_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mapBonus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapBonus);
      }
      if (LinkTriggeredBy6PepperAndGreen != false) {
        output.WriteRawTag(16);
        output.WriteBool(LinkTriggeredBy6PepperAndGreen);
      }
      if (LinkTriggeredBy3YellowPepper != false) {
        output.WriteRawTag(24);
        output.WriteBool(LinkTriggeredBy3YellowPepper);
      }
      if (LinkActivePanelCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LinkActivePanelCount);
      }
      if (LinkPepperCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LinkPepperCount);
      }
      if (LinkPepperWinRate != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(LinkPepperWinRate);
      }
      if (LinkPepperJackpotId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LinkPepperJackpotId);
      }
      if (LinkPepperJackpotPay != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(LinkPepperJackpotPay);
      }
      linkDataList_.WriteTo(output, _repeated_linkDataList_codec);
      jackpotTitleList_.WriteTo(output, _repeated_jackpotTitleList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (mapBonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapBonus);
      }
      if (LinkTriggeredBy6PepperAndGreen != false) {
        size += 1 + 1;
      }
      if (LinkTriggeredBy3YellowPepper != false) {
        size += 1 + 1;
      }
      if (LinkActivePanelCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LinkActivePanelCount);
      }
      if (LinkPepperCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LinkPepperCount);
      }
      if (LinkPepperWinRate != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LinkPepperWinRate);
      }
      if (LinkPepperJackpotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LinkPepperJackpotId);
      }
      if (LinkPepperJackpotPay != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LinkPepperJackpotPay);
      }
      size += linkDataList_.CalculateSize(_repeated_linkDataList_codec);
      size += jackpotTitleList_.CalculateSize(_repeated_jackpotTitleList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mapBonus_ == null) {
              mapBonus_ = new global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.MapBonus();
            }
            input.ReadMessage(mapBonus_);
            break;
          }
          case 16: {
            LinkTriggeredBy6PepperAndGreen = input.ReadBool();
            break;
          }
          case 24: {
            LinkTriggeredBy3YellowPepper = input.ReadBool();
            break;
          }
          case 32: {
            LinkActivePanelCount = input.ReadUInt32();
            break;
          }
          case 40: {
            LinkPepperCount = input.ReadUInt32();
            break;
          }
          case 48: {
            LinkPepperWinRate = input.ReadUInt64();
            break;
          }
          case 56: {
            LinkPepperJackpotId = input.ReadUInt32();
            break;
          }
          case 64: {
            LinkPepperJackpotPay = input.ReadUInt64();
            break;
          }
          case 74: {
            linkDataList_.AddEntriesFrom(input, _repeated_linkDataList_codec);
            break;
          }
          case 82: {
            jackpotTitleList_.AddEntriesFrom(input, _repeated_jackpotTitleList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChilliFrenzyGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class MapBonus : pb::IMessage {
        private static readonly pb::MessageParser<MapBonus> _parser = new pb::MessageParser<MapBonus>(() => new MapBonus());
        public static pb::MessageParser<MapBonus> Parser { get { return _parser; } }

        private uint mapCount_;
        /// <summary>
        /// 收集
        /// </summary>
        public uint MapCount {
          get { return mapCount_; }
          set {
            mapCount_ = value;
          }
        }

        private uint level_;
        /// <summary>
        /// map等级 26级进入map玩法
        /// </summary>
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.MapBonus.Types.Multiplier> _repeated_multipliers_codec
            = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.MapBonus.Types.Multiplier.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.MapBonus.Types.Multiplier> multipliers_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.MapBonus.Types.Multiplier>();
        /// <summary>
        /// 分值数据
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.MapBonus.Types.Multiplier> Multipliers {
          get { return multipliers_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.MapBonus.Types.Letter> _repeated_letters_codec
            = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.MapBonus.Types.Letter.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.MapBonus.Types.Letter> letters_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.MapBonus.Types.Letter>();
        /// <summary>
        /// 字母数据
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.MapBonus.Types.Letter> Letters {
          get { return letters_; }
        }

        private uint holdenLetter_;
        /// <summary>
        /// 一上来就被选中的那个字母
        /// </summary>
        public uint HoldenLetter {
          get { return holdenLetter_; }
          set {
            holdenLetter_ = value;
          }
        }

        private uint currentLetter_;
        /// <summary>
        /// 当前被开奖的字母
        /// </summary>
        public uint CurrentLetter {
          get { return currentLetter_; }
          set {
            currentLetter_ = value;
          }
        }

        private uint currentMultiplier_;
        /// <summary>
        /// 当前被开奖的字母的分值
        /// </summary>
        public uint CurrentMultiplier {
          get { return currentMultiplier_; }
          set {
            currentMultiplier_ = value;
          }
        }

        private uint fakeMultiplier_;
        /// <summary>
        /// 当前被开奖的字母的假分值； 如果没有这把不忽悠则等于0
        /// </summary>
        public uint FakeMultiplier {
          get { return fakeMultiplier_; }
          set {
            fakeMultiplier_ = value;
          }
        }

        private uint round_;
        /// <summary>
        /// 第几轮； 0-6；第0轮只选holden_letter;1-5轮正常加offer；最后一轮6进入final2选一
        /// </summary>
        public uint Round {
          get { return round_; }
          set {
            round_ = value;
          }
        }

        private uint numOfLetterToSelect_;
        /// <summary>
        /// 1-5轮一开始要选几个字母
        /// </summary>
        public uint NumOfLetterToSelect {
          get { return numOfLetterToSelect_; }
          set {
            numOfLetterToSelect_ = value;
          }
        }

        private bool isSelect_;
        /// <summary>
        /// 当前轮是否刚进入select状态
        /// </summary>
        public bool IsSelect {
          get { return isSelect_; }
          set {
            isSelect_ = value;
          }
        }

        private bool isOffer_;
        /// <summary>
        /// 当前轮是否进入offer状态
        /// </summary>
        public bool IsOffer {
          get { return isOffer_; }
          set {
            isOffer_ = value;
          }
        }

        private static readonly pb::FieldCodec<uint> _repeated_offers_codec
            = pb::FieldCodec.ForUInt32(106);
        private readonly pbc::RepeatedField<uint> offers_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 历史所有offer，最后一个就是当前轮的offer
        /// </summary>
        public pbc::RepeatedField<uint> Offers {
          get { return offers_; }
        }

        private bool isFinal_;
        /// <summary>
        /// 是否是final轮，也可用round==6判断
        /// </summary>
        public bool IsFinal {
          get { return isFinal_; }
          set {
            isFinal_ = value;
          }
        }

        private uint finalMultiplier_;
        /// <summary>
        /// 最终结果的分值，来自offer的时候从了 或者 final二选一
        /// </summary>
        public uint FinalMultiplier {
          get { return finalMultiplier_; }
          set {
            finalMultiplier_ = value;
          }
        }

        private ulong startPrize_;
        /// <summary>
        /// 开始奖金， start_prize*final_multiplier等于totalWin
        /// </summary>
        public ulong StartPrize {
          get { return startPrize_; }
          set {
            startPrize_ = value;
          }
        }

        private ulong bet_;
        /// <summary>
        /// bonus玩法通用数据
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private ulong preWin_;
        public ulong PreWin {
          get { return preWin_; }
          set {
            preWin_ = value;
          }
        }

        private ulong totalWin_;
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
            = pb::FieldCodec.ForMessage(162, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
          get { return triggeringPanels_; }
        }

        private bool isStarted_;
        public bool IsStarted {
          get { return isStarted_; }
          set {
            isStarted_ = value;
          }
        }

        private bool toSettle_;
        public bool ToSettle {
          get { return toSettle_; }
          set {
            toSettle_ = value;
          }
        }

        private uint mapMaxCount_;
        /// <summary>
        /// 收集max
        /// </summary>
        public uint MapMaxCount {
          get { return mapMaxCount_; }
          set {
            mapMaxCount_ = value;
          }
        }

        private bool levelUp_;
        /// <summary>
        /// 此把map升级
        /// </summary>
        public bool LevelUp {
          get { return levelUp_; }
          set {
            levelUp_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (MapCount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(MapCount);
          }
          if (Level != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Level);
          }
          multipliers_.WriteTo(output, _repeated_multipliers_codec);
          letters_.WriteTo(output, _repeated_letters_codec);
          if (HoldenLetter != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(HoldenLetter);
          }
          if (CurrentLetter != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(CurrentLetter);
          }
          if (CurrentMultiplier != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(CurrentMultiplier);
          }
          if (FakeMultiplier != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(FakeMultiplier);
          }
          if (Round != 0) {
            output.WriteRawTag(72);
            output.WriteUInt32(Round);
          }
          if (NumOfLetterToSelect != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(NumOfLetterToSelect);
          }
          if (IsSelect != false) {
            output.WriteRawTag(88);
            output.WriteBool(IsSelect);
          }
          if (IsOffer != false) {
            output.WriteRawTag(96);
            output.WriteBool(IsOffer);
          }
          offers_.WriteTo(output, _repeated_offers_codec);
          if (IsFinal != false) {
            output.WriteRawTag(112);
            output.WriteBool(IsFinal);
          }
          if (FinalMultiplier != 0) {
            output.WriteRawTag(120);
            output.WriteUInt32(FinalMultiplier);
          }
          if (StartPrize != 0UL) {
            output.WriteRawTag(128, 1);
            output.WriteUInt64(StartPrize);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(136, 1);
            output.WriteUInt64(Bet);
          }
          if (PreWin != 0UL) {
            output.WriteRawTag(144, 1);
            output.WriteUInt64(PreWin);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(152, 1);
            output.WriteUInt64(TotalWin);
          }
          triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
          if (IsStarted != false) {
            output.WriteRawTag(168, 1);
            output.WriteBool(IsStarted);
          }
          if (ToSettle != false) {
            output.WriteRawTag(176, 1);
            output.WriteBool(ToSettle);
          }
          if (MapMaxCount != 0) {
            output.WriteRawTag(184, 1);
            output.WriteUInt32(MapMaxCount);
          }
          if (LevelUp != false) {
            output.WriteRawTag(192, 1);
            output.WriteBool(LevelUp);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (MapCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapCount);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          size += multipliers_.CalculateSize(_repeated_multipliers_codec);
          size += letters_.CalculateSize(_repeated_letters_codec);
          if (HoldenLetter != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HoldenLetter);
          }
          if (CurrentLetter != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentLetter);
          }
          if (CurrentMultiplier != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentMultiplier);
          }
          if (FakeMultiplier != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FakeMultiplier);
          }
          if (Round != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Round);
          }
          if (NumOfLetterToSelect != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOfLetterToSelect);
          }
          if (IsSelect != false) {
            size += 1 + 1;
          }
          if (IsOffer != false) {
            size += 1 + 1;
          }
          size += offers_.CalculateSize(_repeated_offers_codec);
          if (IsFinal != false) {
            size += 1 + 1;
          }
          if (FinalMultiplier != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinalMultiplier);
          }
          if (StartPrize != 0UL) {
            size += 2 + pb::CodedOutputStream.ComputeUInt64Size(StartPrize);
          }
          if (Bet != 0UL) {
            size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (PreWin != 0UL) {
            size += 2 + pb::CodedOutputStream.ComputeUInt64Size(PreWin);
          }
          if (TotalWin != 0UL) {
            size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
          if (IsStarted != false) {
            size += 2 + 1;
          }
          if (ToSettle != false) {
            size += 2 + 1;
          }
          if (MapMaxCount != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MapMaxCount);
          }
          if (LevelUp != false) {
            size += 2 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                MapCount = input.ReadUInt32();
                break;
              }
              case 16: {
                Level = input.ReadUInt32();
                break;
              }
              case 26: {
                multipliers_.AddEntriesFrom(input, _repeated_multipliers_codec);
                break;
              }
              case 34: {
                letters_.AddEntriesFrom(input, _repeated_letters_codec);
                break;
              }
              case 40: {
                HoldenLetter = input.ReadUInt32();
                break;
              }
              case 48: {
                CurrentLetter = input.ReadUInt32();
                break;
              }
              case 56: {
                CurrentMultiplier = input.ReadUInt32();
                break;
              }
              case 64: {
                FakeMultiplier = input.ReadUInt32();
                break;
              }
              case 72: {
                Round = input.ReadUInt32();
                break;
              }
              case 80: {
                NumOfLetterToSelect = input.ReadUInt32();
                break;
              }
              case 88: {
                IsSelect = input.ReadBool();
                break;
              }
              case 96: {
                IsOffer = input.ReadBool();
                break;
              }
              case 106:
              case 104: {
                offers_.AddEntriesFrom(input, _repeated_offers_codec);
                break;
              }
              case 112: {
                IsFinal = input.ReadBool();
                break;
              }
              case 120: {
                FinalMultiplier = input.ReadUInt32();
                break;
              }
              case 128: {
                StartPrize = input.ReadUInt64();
                break;
              }
              case 136: {
                Bet = input.ReadUInt64();
                break;
              }
              case 144: {
                PreWin = input.ReadUInt64();
                break;
              }
              case 152: {
                TotalWin = input.ReadUInt64();
                break;
              }
              case 162: {
                triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
                break;
              }
              case 168: {
                IsStarted = input.ReadBool();
                break;
              }
              case 176: {
                ToSettle = input.ReadBool();
                break;
              }
              case 184: {
                MapMaxCount = input.ReadUInt32();
                break;
              }
              case 192: {
                LevelUp = input.ReadBool();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the MapBonus message type.</summary>
        public static class Types {
          public sealed class Multiplier : pb::IMessage {
            private static readonly pb::MessageParser<Multiplier> _parser = new pb::MessageParser<Multiplier>(() => new Multiplier());
            public static pb::MessageParser<Multiplier> Parser { get { return _parser; } }

            private uint multiplier_;
            /// <summary>
            /// 分值
            /// </summary>
            public uint Multiplier_ {
              get { return multiplier_; }
              set {
                multiplier_ = value;
              }
            }

            private bool removed_;
            /// <summary>
            /// 状态，是否移除
            /// </summary>
            public bool Removed {
              get { return removed_; }
              set {
                removed_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (Multiplier_ != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Multiplier_);
              }
              if (Removed != false) {
                output.WriteRawTag(16);
                output.WriteBool(Removed);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (Multiplier_ != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Multiplier_);
              }
              if (Removed != false) {
                size += 1 + 1;
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Multiplier_ = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Removed = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

          public sealed class Letter : pb::IMessage {
            private static readonly pb::MessageParser<Letter> _parser = new pb::MessageParser<Letter>(() => new Letter());
            public static pb::MessageParser<Letter> Parser { get { return _parser; } }

            private uint index_;
            /// <summary>
            /// 字母 0-25
            /// </summary>
            public uint Index {
              get { return index_; }
              set {
                index_ = value;
              }
            }

            private bool chosen_;
            /// <summary>
            /// 状态，是否被选中
            /// </summary>
            public bool Chosen {
              get { return chosen_; }
              set {
                chosen_ = value;
              }
            }

            private bool removed_;
            /// <summary>
            /// 状态， 是否被移除
            /// </summary>
            public bool Removed {
              get { return removed_; }
              set {
                removed_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (Index != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Index);
              }
              if (Chosen != false) {
                output.WriteRawTag(16);
                output.WriteBool(Chosen);
              }
              if (Removed != false) {
                output.WriteRawTag(24);
                output.WriteBool(Removed);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (Index != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
              }
              if (Chosen != false) {
                size += 1 + 1;
              }
              if (Removed != false) {
                size += 1 + 1;
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Index = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Chosen = input.ReadBool();
                    break;
                  }
                  case 24: {
                    Removed = input.ReadBool();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed class LinkData : pb::IMessage {
        private static readonly pb::MessageParser<LinkData> _parser = new pb::MessageParser<LinkData>(() => new LinkData());
        public static pb::MessageParser<LinkData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.LinkData.Types.LinkItem> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.LinkData.Types.LinkItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.LinkData.Types.LinkItem> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.LinkData.Types.LinkItem>();
        /// <summary>
        /// 0 - 14
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChilliFrenzyGameResultExtraInfo.Types.LinkData.Types.LinkItem> Items {
          get { return items_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LinkData message type.</summary>
        public static class Types {
          public sealed class LinkItem : pb::IMessage {
            private static readonly pb::MessageParser<LinkItem> _parser = new pb::MessageParser<LinkItem>(() => new LinkItem());
            public static pb::MessageParser<LinkItem> Parser { get { return _parser; } }

            private uint positionId_;
            /// <summary>
            /// 位置
            /// </summary>
            public uint PositionId {
              get { return positionId_; }
              set {
                positionId_ = value;
              }
            }

            private uint symbolId_;
            /// <summary>
            /// 显示图标
            /// </summary>
            public uint SymbolId {
              get { return symbolId_; }
              set {
                symbolId_ = value;
              }
            }

            private uint jackpotId_;
            /// <summary>
            /// jackpot id
            /// </summary>
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (PositionId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PositionId);
              }
              if (SymbolId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(SymbolId);
              }
              if (JackpotId != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(JackpotId);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (PositionId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
              }
              if (SymbolId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
              }
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    PositionId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    SymbolId = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed class JackpotTitle : pb::IMessage {
        private static readonly pb::MessageParser<JackpotTitle> _parser = new pb::MessageParser<JackpotTitle>(() => new JackpotTitle());
        public static pb::MessageParser<JackpotTitle> Parser { get { return _parser; } }

        private uint jackpotId_;
        /// <summary>
        /// 这个title表示的类型；id对应Jackpots表
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private uint oldNum_;
        /// <summary>
        /// 上一轮辣椒数量
        /// </summary>
        public uint OldNum {
          get { return oldNum_; }
          set {
            oldNum_ = value;
          }
        }

        private uint num_;
        /// <summary>
        /// 当前辣椒数; 注意我这里大于等于3的时候没有回0，如果num=n说明本轮已经中了（n/3）个这种jackpot。
        /// </summary>
        public uint Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        private static readonly pb::FieldCodec<ulong> _repeated_payList_codec
            = pb::FieldCodec.ForUInt64(34);
        private readonly pbc::RepeatedField<ulong> payList_ = new pbc::RepeatedField<ulong>();
        /// <summary>
        /// 当num=3*n,n为整数时， 前端动画逻辑要先显示3个然后消成0个
        /// </summary>
        public pbc::RepeatedField<ulong> PayList {
          get { return payList_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (JackpotId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(JackpotId);
          }
          if (OldNum != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(OldNum);
          }
          if (Num != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Num);
          }
          payList_.WriteTo(output, _repeated_payList_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (OldNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldNum);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
          }
          size += payList_.CalculateSize(_repeated_payList_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 16: {
                OldNum = input.ReadUInt32();
                break;
              }
              case 24: {
                Num = input.ReadUInt32();
                break;
              }
              case 34:
              case 32: {
                payList_.AddEntriesFrom(input, _repeated_payList_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///
  ///特殊赢钱线：
  ///1 base下ReSpin满列会返回赢钱线，bonusID=101
  ///2 base收集的特殊赢钱线，bonusId=201, extra中有positioned_credits，看这个特殊赢钱线还有没必要
  ///
  ///商店系统：
  ///商店购买要调用新的special api，参数类似bonus_process api, 告诉要购买的位置
  ///注意商店一个Tab9个物品买完后，触发最后一次最终奖励也要调用special api
  ///
  ///不同freeSpinId意义：
  ///0 普通free
  ///1 shopNormalFree
  ///2 shopSuperFree
  ///3 shopFinalSuper1
  ///4 shopFinalSuper2
  ///5 shopFinalSuper3
  ///6 shopFinalSuper4
  /// </summary>
  public sealed class ChameleonGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<ChameleonGameResultExtraInfo> _parser = new pb::MessageParser<ChameleonGameResultExtraInfo>(() => new ChameleonGameResultExtraInfo());
    public static pb::MessageParser<ChameleonGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.NormalData>.Codec _map_normalDataMap_codec
        = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.NormalData>.Codec(pb::FieldCodec.ForUInt64(8), pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.NormalData.Parser), 10);
    private readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.NormalData> normalDataMap_ = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.NormalData>();
    /// <summary>
    /// base状态下reSpin-link Sticky信息; 是个map,key是bet，每个不同的bet存一份数据
    /// </summary>
    public pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.NormalData> NormalDataMap {
      get { return normalDataMap_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.PositionedCredit> _repeated_positionedCredits_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.PositionedCredit.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.PositionedCredit> positionedCredits_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.PositionedCredit>();
    /// <summary>
    /// base状态本次spin的金币获取信息
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.PositionedCredit> PositionedCredits {
      get { return positionedCredits_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.FreeData freeData_;
    /// <summary>
    /// free的状态下reSpin-link Sticky信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.FreeData FreeData {
      get { return freeData_; }
      set {
        freeData_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Shop shop_;
    /// <summary>
    /// 商店信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Shop Shop {
      get { return shop_; }
      set {
        shop_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.AvgBet avgBet_;
    /// <summary>
    /// average bet统计，策划需求终身制，不会重置， total_bet/spin_count，用于计算各种shop玩法的bet
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.AvgBet AvgBet {
      get { return avgBet_; }
      set {
        avgBet_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      normalDataMap_.WriteTo(output, _map_normalDataMap_codec);
      positionedCredits_.WriteTo(output, _repeated_positionedCredits_codec);
      if (freeData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FreeData);
      }
      if (shop_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Shop);
      }
      if (avgBet_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AvgBet);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += normalDataMap_.CalculateSize(_map_normalDataMap_codec);
      size += positionedCredits_.CalculateSize(_repeated_positionedCredits_codec);
      if (freeData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreeData);
      }
      if (shop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shop);
      }
      if (avgBet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvgBet);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            normalDataMap_.AddEntriesFrom(input, _map_normalDataMap_codec);
            break;
          }
          case 18: {
            positionedCredits_.AddEntriesFrom(input, _repeated_positionedCredits_codec);
            break;
          }
          case 26: {
            if (freeData_ == null) {
              freeData_ = new global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.FreeData();
            }
            input.ReadMessage(freeData_);
            break;
          }
          case 34: {
            if (shop_ == null) {
              shop_ = new global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Shop();
            }
            input.ReadMessage(shop_);
            break;
          }
          case 42: {
            if (avgBet_ == null) {
              avgBet_ = new global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.AvgBet();
            }
            input.ReadMessage(avgBet_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChameleonGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class StickyItem : pb::IMessage {
        private static readonly pb::MessageParser<StickyItem> _parser = new pb::MessageParser<StickyItem>(() => new StickyItem());
        public static pb::MessageParser<StickyItem> Parser { get { return _parser; } }

        private uint x_;
        /// <summary>
        /// 位置x
        /// </summary>
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        /// <summary>
        /// 位置y
        /// </summary>
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        private uint id_;
        /// <summary>
        /// symbol id
        /// </summary>
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        private ulong winRate_;
        /// <summary>
        /// winRate奖励
        /// </summary>
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        private uint jackpotId_;
        /// <summary>
        /// jackpot id 不是jackpot取0
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private ulong jackpotPay_;
        /// <summary>
        /// jackpot 奖励的winRate
        /// </summary>
        public ulong JackpotPay {
          get { return jackpotPay_; }
          set {
            jackpotPay_ = value;
          }
        }

        private uint multiplier_;
        /// <summary>
        /// 转盘倍数，正常是1
        /// </summary>
        public uint Multiplier {
          get { return multiplier_; }
          set {
            multiplier_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
          if (Id != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Id);
          }
          if (WinRate != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(WinRate);
          }
          if (JackpotId != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(JackpotId);
          }
          if (JackpotPay != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(JackpotPay);
          }
          if (Multiplier != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(Multiplier);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (JackpotPay != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
          }
          if (Multiplier != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Multiplier);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
              case 24: {
                Id = input.ReadUInt32();
                break;
              }
              case 32: {
                WinRate = input.ReadUInt64();
                break;
              }
              case 40: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 48: {
                JackpotPay = input.ReadUInt64();
                break;
              }
              case 56: {
                Multiplier = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class Position : pb::IMessage {
        private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
        public static pb::MessageParser<Position> Parser { get { return _parser; } }

        private uint x_;
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class NormalData : pb::IMessage {
        private static readonly pb::MessageParser<NormalData> _parser = new pb::MessageParser<NormalData>(() => new NormalData());
        public static pb::MessageParser<NormalData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.StickyItem> _repeated_stickyItems_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.StickyItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.StickyItem> stickyItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.StickyItem>();
        /// <summary>
        /// 每个sticky item信息
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.StickyItem> StickyItems {
          get { return stickyItems_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Position> _repeated_stickyAnticipation_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Position.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Position> stickyAnticipation_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Position>();
        /// <summary>
        /// 差一个sticky item的时候会出anti
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Position> StickyAnticipation {
          get { return stickyAnticipation_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_stickyColumnReSpinCounts_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> stickyColumnReSpinCounts_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 每一列的reSpin的数字
        /// </summary>
        public pbc::RepeatedField<uint> StickyColumnReSpinCounts {
          get { return stickyColumnReSpinCounts_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_panels_codec
            = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> panels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        /// <summary>
        /// panel
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> Panels {
          get { return panels_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_fullIndexes_codec
            = pb::FieldCodec.ForUInt32(42);
        private readonly pbc::RepeatedField<uint> fullIndexes_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 因为满变成0的列
        /// </summary>
        public pbc::RepeatedField<uint> FullIndexes {
          get { return fullIndexes_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_failedIndexes_codec
            = pb::FieldCodec.ForUInt32(50);
        private readonly pbc::RepeatedField<uint> failedIndexes_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 自然减到0的列
        /// </summary>
        public pbc::RepeatedField<uint> FailedIndexes {
          get { return failedIndexes_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          stickyItems_.WriteTo(output, _repeated_stickyItems_codec);
          stickyAnticipation_.WriteTo(output, _repeated_stickyAnticipation_codec);
          stickyColumnReSpinCounts_.WriteTo(output, _repeated_stickyColumnReSpinCounts_codec);
          panels_.WriteTo(output, _repeated_panels_codec);
          fullIndexes_.WriteTo(output, _repeated_fullIndexes_codec);
          failedIndexes_.WriteTo(output, _repeated_failedIndexes_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += stickyItems_.CalculateSize(_repeated_stickyItems_codec);
          size += stickyAnticipation_.CalculateSize(_repeated_stickyAnticipation_codec);
          size += stickyColumnReSpinCounts_.CalculateSize(_repeated_stickyColumnReSpinCounts_codec);
          size += panels_.CalculateSize(_repeated_panels_codec);
          size += fullIndexes_.CalculateSize(_repeated_fullIndexes_codec);
          size += failedIndexes_.CalculateSize(_repeated_failedIndexes_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                stickyItems_.AddEntriesFrom(input, _repeated_stickyItems_codec);
                break;
              }
              case 18: {
                stickyAnticipation_.AddEntriesFrom(input, _repeated_stickyAnticipation_codec);
                break;
              }
              case 26:
              case 24: {
                stickyColumnReSpinCounts_.AddEntriesFrom(input, _repeated_stickyColumnReSpinCounts_codec);
                break;
              }
              case 34: {
                panels_.AddEntriesFrom(input, _repeated_panels_codec);
                break;
              }
              case 42:
              case 40: {
                fullIndexes_.AddEntriesFrom(input, _repeated_fullIndexes_codec);
                break;
              }
              case 50:
              case 48: {
                failedIndexes_.AddEntriesFrom(input, _repeated_failedIndexes_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class PositionedCredit : pb::IMessage {
        private static readonly pb::MessageParser<PositionedCredit> _parser = new pb::MessageParser<PositionedCredit>(() => new PositionedCredit());
        public static pb::MessageParser<PositionedCredit> Parser { get { return _parser; } }

        private uint x_;
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        private ulong credit_;
        /// <summary>
        /// 这个位置的金币数
        /// </summary>
        public ulong Credit {
          get { return credit_; }
          set {
            credit_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
          if (Credit != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Credit);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          if (Credit != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Credit);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
              case 24: {
                Credit = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class FreeData : pb::IMessage {
        private static readonly pb::MessageParser<FreeData> _parser = new pb::MessageParser<FreeData>(() => new FreeData());
        public static pb::MessageParser<FreeData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.StickyItem> _repeated_stickyItems_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.StickyItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.StickyItem> stickyItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.StickyItem>();
        /// <summary>
        /// 每个sticky item信息
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.StickyItem> StickyItems {
          get { return stickyItems_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Position> _repeated_stickyAnticipation_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Position.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Position> stickyAnticipation_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Position>();
        /// <summary>
        /// 差一个sticky item的时候会出anti
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Position> StickyAnticipation {
          get { return stickyAnticipation_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_multipliers_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> multipliers_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 列满之后，这一列的wheel转盘结果
        /// </summary>
        public pbc::RepeatedField<uint> Multipliers {
          get { return multipliers_; }
        }

        private bool isSuper_;
        /// <summary>
        /// 这个free是否是super free，super free的转盘multiplier会乘以2
        /// </summary>
        public bool IsSuper {
          get { return isSuper_; }
          set {
            isSuper_ = value;
          }
        }

        private static readonly pb::FieldCodec<uint> _repeated_newFullIndexes_codec
            = pb::FieldCodec.ForUInt32(42);
        private readonly pbc::RepeatedField<uint> newFullIndexes_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 刚满的列
        /// </summary>
        public pbc::RepeatedField<uint> NewFullIndexes {
          get { return newFullIndexes_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          stickyItems_.WriteTo(output, _repeated_stickyItems_codec);
          stickyAnticipation_.WriteTo(output, _repeated_stickyAnticipation_codec);
          multipliers_.WriteTo(output, _repeated_multipliers_codec);
          if (IsSuper != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsSuper);
          }
          newFullIndexes_.WriteTo(output, _repeated_newFullIndexes_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += stickyItems_.CalculateSize(_repeated_stickyItems_codec);
          size += stickyAnticipation_.CalculateSize(_repeated_stickyAnticipation_codec);
          size += multipliers_.CalculateSize(_repeated_multipliers_codec);
          if (IsSuper != false) {
            size += 1 + 1;
          }
          size += newFullIndexes_.CalculateSize(_repeated_newFullIndexes_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                stickyItems_.AddEntriesFrom(input, _repeated_stickyItems_codec);
                break;
              }
              case 18: {
                stickyAnticipation_.AddEntriesFrom(input, _repeated_stickyAnticipation_codec);
                break;
              }
              case 26:
              case 24: {
                multipliers_.AddEntriesFrom(input, _repeated_multipliers_codec);
                break;
              }
              case 32: {
                IsSuper = input.ReadBool();
                break;
              }
              case 42:
              case 40: {
                newFullIndexes_.AddEntriesFrom(input, _repeated_newFullIndexes_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class Shop : pb::IMessage {
        private static readonly pb::MessageParser<Shop> _parser = new pb::MessageParser<Shop>(() => new Shop());
        public static pb::MessageParser<Shop> Parser { get { return _parser; } }

        private ulong credits_;
        /// <summary>
        /// 累积分数
        /// </summary>
        public ulong Credits {
          get { return credits_; }
          set {
            credits_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Shop.Types.ShopTable> _repeated_tables_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Shop.Types.ShopTable.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Shop.Types.ShopTable> tables_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Shop.Types.ShopTable>();
        /// <summary>
        /// shop每一个tab的信息
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Shop.Types.ShopTable> Tables {
          get { return tables_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Credits != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Credits);
          }
          tables_.WriteTo(output, _repeated_tables_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Credits != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Credits);
          }
          size += tables_.CalculateSize(_repeated_tables_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Credits = input.ReadUInt64();
                break;
              }
              case 18: {
                tables_.AddEntriesFrom(input, _repeated_tables_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Shop message type.</summary>
        public static class Types {
          public sealed class ShopTable : pb::IMessage {
            private static readonly pb::MessageParser<ShopTable> _parser = new pb::MessageParser<ShopTable>(() => new ShopTable());
            public static pb::MessageParser<ShopTable> Parser { get { return _parser; } }

            private bool available_;
            /// <summary>
            /// 这一tab是否解锁
            /// </summary>
            public bool Available {
              get { return available_; }
              set {
                available_ = value;
              }
            }

            private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Shop.Types.ShopTable.Types.ShopItem> _repeated_items_codec
                = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Shop.Types.ShopTable.Types.ShopItem.Parser);
            private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Shop.Types.ShopTable.Types.ShopItem> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Shop.Types.ShopTable.Types.ShopItem>();
            /// <summary>
            /// 这一tab的所有购买项
            /// </summary>
            public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ChameleonGameResultExtraInfo.Types.Shop.Types.ShopTable.Types.ShopItem> Items {
              get { return items_; }
            }

            private bool superTriggered_;
            /// <summary>
            /// 这一tab的最终奖励是否领取
            /// </summary>
            public bool SuperTriggered {
              get { return superTriggered_; }
              set {
                superTriggered_ = value;
              }
            }

            private bool superReady_;
            /// <summary>
            /// 这一tab的最终奖励是否准备好1
            /// </summary>
            public bool SuperReady {
              get { return superReady_; }
              set {
                superReady_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (Available != false) {
                output.WriteRawTag(8);
                output.WriteBool(Available);
              }
              items_.WriteTo(output, _repeated_items_codec);
              if (SuperTriggered != false) {
                output.WriteRawTag(24);
                output.WriteBool(SuperTriggered);
              }
              if (SuperReady != false) {
                output.WriteRawTag(32);
                output.WriteBool(SuperReady);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (Available != false) {
                size += 1 + 1;
              }
              size += items_.CalculateSize(_repeated_items_codec);
              if (SuperTriggered != false) {
                size += 1 + 1;
              }
              if (SuperReady != false) {
                size += 1 + 1;
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Available = input.ReadBool();
                    break;
                  }
                  case 18: {
                    items_.AddEntriesFrom(input, _repeated_items_codec);
                    break;
                  }
                  case 24: {
                    SuperTriggered = input.ReadBool();
                    break;
                  }
                  case 32: {
                    SuperReady = input.ReadBool();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the ShopTable message type.</summary>
            public static class Types {
              public sealed class ShopItem : pb::IMessage {
                private static readonly pb::MessageParser<ShopItem> _parser = new pb::MessageParser<ShopItem>(() => new ShopItem());
                public static pb::MessageParser<ShopItem> Parser { get { return _parser; } }

                private bool open_;
                /// <summary>
                /// 是否已经购买
                /// </summary>
                public bool Open {
                  get { return open_; }
                  set {
                    open_ = value;
                  }
                }

                private ulong price_;
                /// <summary>
                /// 消耗多少credit购买
                /// </summary>
                public ulong Price {
                  get { return price_; }
                  set {
                    price_ = value;
                  }
                }

                private ulong winRate_;
                /// <summary>
                /// 奖励的winRate
                /// </summary>
                public ulong WinRate {
                  get { return winRate_; }
                  set {
                    winRate_ = value;
                  }
                }

                private bool isFree_;
                /// <summary>
                /// 奖励的是否是free
                /// </summary>
                public bool IsFree {
                  get { return isFree_; }
                  set {
                    isFree_ = value;
                  }
                }

                private bool isSuper_;
                /// <summary>
                /// 奖励的free是不是super free
                /// </summary>
                public bool IsSuper {
                  get { return isSuper_; }
                  set {
                    isSuper_ = value;
                  }
                }

                private ulong totalWin_;
                /// <summary>
                /// 实际领了多少钱
                /// </summary>
                public ulong TotalWin {
                  get { return totalWin_; }
                  set {
                    totalWin_ = value;
                  }
                }

                public void WriteTo(pb::CodedOutputStream output) {
                  if (Open != false) {
                    output.WriteRawTag(8);
                    output.WriteBool(Open);
                  }
                  if (Price != 0UL) {
                    output.WriteRawTag(16);
                    output.WriteUInt64(Price);
                  }
                  if (WinRate != 0UL) {
                    output.WriteRawTag(24);
                    output.WriteUInt64(WinRate);
                  }
                  if (IsFree != false) {
                    output.WriteRawTag(32);
                    output.WriteBool(IsFree);
                  }
                  if (IsSuper != false) {
                    output.WriteRawTag(40);
                    output.WriteBool(IsSuper);
                  }
                  if (TotalWin != 0UL) {
                    output.WriteRawTag(48);
                    output.WriteUInt64(TotalWin);
                  }
                }

                public int CalculateSize() {
                  int size = 0;
                  if (Open != false) {
                    size += 1 + 1;
                  }
                  if (Price != 0UL) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Price);
                  }
                  if (WinRate != 0UL) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
                  }
                  if (IsFree != false) {
                    size += 1 + 1;
                  }
                  if (IsSuper != false) {
                    size += 1 + 1;
                  }
                  if (TotalWin != 0UL) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
                  }
                  return size;
                }

                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        input.SkipLastField();
                        break;
                      case 8: {
                        Open = input.ReadBool();
                        break;
                      }
                      case 16: {
                        Price = input.ReadUInt64();
                        break;
                      }
                      case 24: {
                        WinRate = input.ReadUInt64();
                        break;
                      }
                      case 32: {
                        IsFree = input.ReadBool();
                        break;
                      }
                      case 40: {
                        IsSuper = input.ReadBool();
                        break;
                      }
                      case 48: {
                        TotalWin = input.ReadUInt64();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed class AvgBet : pb::IMessage {
        private static readonly pb::MessageParser<AvgBet> _parser = new pb::MessageParser<AvgBet>(() => new AvgBet());
        public static pb::MessageParser<AvgBet> Parser { get { return _parser; } }

        private ulong spinCount_;
        public ulong SpinCount {
          get { return spinCount_; }
          set {
            spinCount_ = value;
          }
        }

        private ulong totalBet_;
        public ulong TotalBet {
          get { return totalBet_; }
          set {
            totalBet_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (SpinCount != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(SpinCount);
          }
          if (TotalBet != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(TotalBet);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (SpinCount != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SpinCount);
          }
          if (TotalBet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalBet);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                SpinCount = input.ReadUInt64();
                break;
              }
              case 16: {
                TotalBet = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///
  ///这一关的reSpin有多个panel，有可能一个panel结束了另一个还能完，所以两个panel的逻辑要分开，reSpinInfo中存的是两个panel merge考虑后的数据
  ///
  ///特殊赢钱线：
  ///1 base中触发reSpin会有bonusId=1001的赢钱线
  ///2 map开锁时base中会有收集的赢钱线bonusId=1002
  ///
  ///卷轴对应说明：
  ///reels是base
  ///reels1 reels2 reels3 reels12 reels13 reels23 reels123 对应各种触发的reSpin
  ///MapFree1Reels MapFree2Reels MapFree3Reels MapFree4Reels MapFree5Reels 对应各大节点map玩法
  /// </summary>
  public sealed class PigGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<PigGameResultExtraInfo> _parser = new pb::MessageParser<PigGameResultExtraInfo>(() => new PigGameResultExtraInfo());
    public static pb::MessageParser<PigGameResultExtraInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.MapBonus mapBonus_;
    /// <summary>
    /// map bonus数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.MapBonus MapBonus {
      get { return mapBonus_; }
      set {
        mapBonus_ = value;
      }
    }

    private static readonly pb::FieldCodec<bool> _repeated_reSpinType_codec
        = pb::FieldCodec.ForBool(26);
    private readonly pbc::RepeatedField<bool> reSpinType_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// reSpin的类型 0，1，2位置对应从左到右三种颜色
    /// </summary>
    public pbc::RepeatedField<bool> ReSpinType {
      get { return reSpinType_; }
    }

    private uint reSpinPanelCount_;
    /// <summary>
    /// reSpin中 panel数量， 1或2
    /// </summary>
    public uint ReSpinPanelCount {
      get { return reSpinPanelCount_; }
      set {
        reSpinPanelCount_ = value;
      }
    }

    private static readonly pb::FieldCodec<uint> _repeated_reSpinCounts_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> reSpinCounts_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// reSpin中 每个panel的剩余reSpin次数
    /// </summary>
    public pbc::RepeatedField<uint> ReSpinCounts {
      get { return reSpinCounts_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.PositionedWinRates> _repeated_reSpinRandomBoostWinRateList_codec
        = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.PositionedWinRates.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.PositionedWinRates> reSpinRandomBoostWinRateList_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.PositionedWinRates>();
    /// <summary>
    /// reSpin中某个feature会使每一次spin在每个panel的宝石随机位置加winRate
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.PositionedWinRates> ReSpinRandomBoostWinRateList {
      get { return reSpinRandomBoostWinRateList_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.LinkData> _repeated_linkDataList_codec
        = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.LinkData.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.LinkData> linkDataList_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.LinkData>();
    /// <summary>
    /// 多个panel的link_data
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.LinkData> LinkDataList {
      get { return linkDataList_; }
    }

    private static readonly pb::FieldCodec<uint> _repeated_reSpinTypeShowLevel_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> reSpinTypeShowLevel_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 0,1,2,3
    /// </summary>
    public pbc::RepeatedField<uint> ReSpinTypeShowLevel {
      get { return reSpinTypeShowLevel_; }
    }

    private bool linkCalculated_;
    /// <summary>
    /// link
    /// </summary>
    public bool LinkCalculated {
      get { return linkCalculated_; }
      set {
        linkCalculated_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mapBonus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapBonus);
      }
      reSpinType_.WriteTo(output, _repeated_reSpinType_codec);
      if (ReSpinPanelCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ReSpinPanelCount);
      }
      reSpinCounts_.WriteTo(output, _repeated_reSpinCounts_codec);
      reSpinRandomBoostWinRateList_.WriteTo(output, _repeated_reSpinRandomBoostWinRateList_codec);
      linkDataList_.WriteTo(output, _repeated_linkDataList_codec);
      reSpinTypeShowLevel_.WriteTo(output, _repeated_reSpinTypeShowLevel_codec);
      if (LinkCalculated != false) {
        output.WriteRawTag(72);
        output.WriteBool(LinkCalculated);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mapBonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapBonus);
      }
      size += reSpinType_.CalculateSize(_repeated_reSpinType_codec);
      if (ReSpinPanelCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReSpinPanelCount);
      }
      size += reSpinCounts_.CalculateSize(_repeated_reSpinCounts_codec);
      size += reSpinRandomBoostWinRateList_.CalculateSize(_repeated_reSpinRandomBoostWinRateList_codec);
      size += linkDataList_.CalculateSize(_repeated_linkDataList_codec);
      size += reSpinTypeShowLevel_.CalculateSize(_repeated_reSpinTypeShowLevel_codec);
      if (LinkCalculated != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mapBonus_ == null) {
              mapBonus_ = new global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.MapBonus();
            }
            input.ReadMessage(mapBonus_);
            break;
          }
          case 26:
          case 24: {
            reSpinType_.AddEntriesFrom(input, _repeated_reSpinType_codec);
            break;
          }
          case 32: {
            ReSpinPanelCount = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            reSpinCounts_.AddEntriesFrom(input, _repeated_reSpinCounts_codec);
            break;
          }
          case 50: {
            reSpinRandomBoostWinRateList_.AddEntriesFrom(input, _repeated_reSpinRandomBoostWinRateList_codec);
            break;
          }
          case 58: {
            linkDataList_.AddEntriesFrom(input, _repeated_linkDataList_codec);
            break;
          }
          case 66:
          case 64: {
            reSpinTypeShowLevel_.AddEntriesFrom(input, _repeated_reSpinTypeShowLevel_codec);
            break;
          }
          case 72: {
            LinkCalculated = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PigGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class MapBonus : pb::IMessage {
        private static readonly pb::MessageParser<MapBonus> _parser = new pb::MessageParser<MapBonus>(() => new MapBonus());
        public static pb::MessageParser<MapBonus> Parser { get { return _parser; } }

        private uint level_;
        /// <summary>
        /// 等级
        /// </summary>
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        private uint count_;
        /// <summary>
        /// 当前等级进度累积
        /// </summary>
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        private uint maxCount_;
        /// <summary>
        /// 当前等级进度最大值
        /// </summary>
        public uint MaxCount {
          get { return maxCount_; }
          set {
            maxCount_ = value;
          }
        }

        private static readonly pb::FieldCodec<ulong> _repeated_totalWinHistory_codec
            = pb::FieldCodec.ForUInt64(34);
        private readonly pbc::RepeatedField<ulong> totalWinHistory_ = new pbc::RepeatedField<ulong>();
        /// <summary>
        /// 每级获奖历史 注意freeGame节点这里是也记录了, 0级total_win_history[0]的纪录永远是0
        /// </summary>
        public pbc::RepeatedField<ulong> TotalWinHistory {
          get { return totalWinHistory_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_multipliers_codec
            = pb::FieldCodec.ForUInt32(42);
        private readonly pbc::RepeatedField<uint> multipliers_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// mapFree中3个panel的multiplier数值
        /// </summary>
        public pbc::RepeatedField<uint> Multipliers {
          get { return multipliers_; }
        }

        private ulong bet_;
        /// <summary>
        /// bonus玩法通用数据
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private ulong preWin_;
        public ulong PreWin {
          get { return preWin_; }
          set {
            preWin_ = value;
          }
        }

        private ulong totalWin_;
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
            = pb::FieldCodec.ForMessage(74, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
          get { return triggeringPanels_; }
        }

        private bool isStarted_;
        public bool IsStarted {
          get { return isStarted_; }
          set {
            isStarted_ = value;
          }
        }

        private bool toSettle_;
        public bool ToSettle {
          get { return toSettle_; }
          set {
            toSettle_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Level != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Level);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
          if (MaxCount != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(MaxCount);
          }
          totalWinHistory_.WriteTo(output, _repeated_totalWinHistory_codec);
          multipliers_.WriteTo(output, _repeated_multipliers_codec);
          if (Bet != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(Bet);
          }
          if (PreWin != 0UL) {
            output.WriteRawTag(56);
            output.WriteUInt64(PreWin);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(64);
            output.WriteUInt64(TotalWin);
          }
          triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
          if (IsStarted != false) {
            output.WriteRawTag(80);
            output.WriteBool(IsStarted);
          }
          if (ToSettle != false) {
            output.WriteRawTag(88);
            output.WriteBool(ToSettle);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          if (MaxCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxCount);
          }
          size += totalWinHistory_.CalculateSize(_repeated_totalWinHistory_codec);
          size += multipliers_.CalculateSize(_repeated_multipliers_codec);
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (PreWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PreWin);
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
          if (IsStarted != false) {
            size += 1 + 1;
          }
          if (ToSettle != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Level = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
              case 24: {
                MaxCount = input.ReadUInt32();
                break;
              }
              case 34:
              case 32: {
                totalWinHistory_.AddEntriesFrom(input, _repeated_totalWinHistory_codec);
                break;
              }
              case 42:
              case 40: {
                multipliers_.AddEntriesFrom(input, _repeated_multipliers_codec);
                break;
              }
              case 48: {
                Bet = input.ReadUInt64();
                break;
              }
              case 56: {
                PreWin = input.ReadUInt64();
                break;
              }
              case 64: {
                TotalWin = input.ReadUInt64();
                break;
              }
              case 74: {
                triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
                break;
              }
              case 80: {
                IsStarted = input.ReadBool();
                break;
              }
              case 88: {
                ToSettle = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed class PositionedWinRates : pb::IMessage {
        private static readonly pb::MessageParser<PositionedWinRates> _parser = new pb::MessageParser<PositionedWinRates>(() => new PositionedWinRates());
        public static pb::MessageParser<PositionedWinRates> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.PositionedWinRates.Types.PositionedWinRate> _repeated_list_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.PositionedWinRates.Types.PositionedWinRate.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.PositionedWinRates.Types.PositionedWinRate> list_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.PositionedWinRates.Types.PositionedWinRate>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.PositionedWinRates.Types.PositionedWinRate> List {
          get { return list_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          list_.WriteTo(output, _repeated_list_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += list_.CalculateSize(_repeated_list_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                list_.AddEntriesFrom(input, _repeated_list_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the PositionedWinRates message type.</summary>
        public static class Types {
          public sealed class PositionedWinRate : pb::IMessage {
            private static readonly pb::MessageParser<PositionedWinRate> _parser = new pb::MessageParser<PositionedWinRate>(() => new PositionedWinRate());
            public static pb::MessageParser<PositionedWinRate> Parser { get { return _parser; } }

            private uint x_;
            public uint X {
              get { return x_; }
              set {
                x_ = value;
              }
            }

            private uint y_;
            public uint Y {
              get { return y_; }
              set {
                y_ = value;
              }
            }

            private ulong winRate_;
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (X != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(X);
              }
              if (Y != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(Y);
              }
              if (WinRate != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(WinRate);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (X != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
              }
              if (Y != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
              }
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    X = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    Y = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed class LinkData : pb::IMessage {
        private static readonly pb::MessageParser<LinkData> _parser = new pb::MessageParser<LinkData>(() => new LinkData());
        public static pb::MessageParser<LinkData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.LinkData.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.LinkData.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.LinkData.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.LinkData.Types.Item>();
        /// <summary>
        /// link items
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PigGameResultExtraInfo.Types.LinkData.Types.Item> Items {
          get { return items_; }
        }

        private ulong fullWinRate_;
        /// <summary>
        /// grandJackpot winRate, 没中是0
        /// </summary>
        public ulong FullWinRate {
          get { return fullWinRate_; }
          set {
            fullWinRate_ = value;
          }
        }

        private static readonly pbc::MapField<uint, uint>.Codec _map_reelMapping_codec
            = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 26);
        private readonly pbc::MapField<uint, uint> reelMapping_ = new pbc::MapField<uint, uint>();
        /// <summary>
        /// linkReels轴映射
        /// </summary>
        public pbc::MapField<uint, uint> ReelMapping {
          get { return reelMapping_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          if (FullWinRate != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(FullWinRate);
          }
          reelMapping_.WriteTo(output, _map_reelMapping_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          if (FullWinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FullWinRate);
          }
          size += reelMapping_.CalculateSize(_map_reelMapping_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 16: {
                FullWinRate = input.ReadUInt64();
                break;
              }
              case 26: {
                reelMapping_.AddEntriesFrom(input, _map_reelMapping_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LinkData message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private uint positionId_;
            /// <summary>
            /// 位置
            /// </summary>
            public uint PositionId {
              get { return positionId_; }
              set {
                positionId_ = value;
              }
            }

            private uint symbolId_;
            /// <summary>
            /// 显示图标
            /// </summary>
            public uint SymbolId {
              get { return symbolId_; }
              set {
                symbolId_ = value;
              }
            }

            private ulong winRate_;
            /// <summary>
            /// 赢钱倍率
            /// </summary>
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            private uint jackpotId_;
            /// <summary>
            /// jackpotId
            /// </summary>
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private ulong jackpotPay_;
            /// <summary>
            /// jackpot倍率
            /// </summary>
            public ulong JackpotPay {
              get { return jackpotPay_; }
              set {
                jackpotPay_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (PositionId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PositionId);
              }
              if (SymbolId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(SymbolId);
              }
              if (WinRate != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(WinRate);
              }
              if (JackpotId != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(JackpotId);
              }
              if (JackpotPay != 0UL) {
                output.WriteRawTag(40);
                output.WriteUInt64(JackpotPay);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (PositionId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
              }
              if (SymbolId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
              }
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              if (JackpotPay != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    PositionId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    SymbolId = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                  case 32: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    JackpotPay = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///================= 11301: CatInBoots ====================================
  /// </summary>
  public sealed class CatInBoots2GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<CatInBoots2GameResultExtraInfo> _parser = new pb::MessageParser<CatInBoots2GameResultExtraInfo>(() => new CatInBoots2GameResultExtraInfo());
    public static pb::MessageParser<CatInBoots2GameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<uint> _repeated_doorPositionIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> doorPositionIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// sticky doors
    /// </summary>
    public pbc::RepeatedField<uint> DoorPositionIds {
      get { return doorPositionIds_; }
    }

    private static readonly pb::FieldCodec<uint> _repeated_lastDoorPositionIds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> lastDoorPositionIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// last sticky doors
    /// </summary>
    public pbc::RepeatedField<uint> LastDoorPositionIds {
      get { return lastDoorPositionIds_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.LinkData linkData_;
    /// <summary>
    /// link数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.LinkData LinkData {
      get { return linkData_; }
      set {
        linkData_ = value;
      }
    }

    private bool isMapFeature_;
    /// <summary>
    /// 是否是map
    /// </summary>
    public bool IsMapFeature {
      get { return isMapFeature_; }
      set {
        isMapFeature_ = value;
      }
    }

    private uint collectItems_;
    /// <summary>
    /// 当前剩余代币
    /// </summary>
    public uint CollectItems {
      get { return collectItems_; }
      set {
        collectItems_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.RoleData> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.RoleData.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.RoleData> roles_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.RoleData>();
    /// <summary>
    /// 角色列表，按下标存，0～3
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.RoleData> Roles {
      get { return roles_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.AvgBetData avgBet_;
    /// <summary>
    /// 平均下注信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.AvgBetData AvgBet {
      get { return avgBet_; }
      set {
        avgBet_ = value;
      }
    }

    private static readonly pbc::MapField<uint, uint>.Codec _map_attachItems_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 66);
    private readonly pbc::MapField<uint, uint> attachItems_ = new pbc::MapField<uint, uint>();
    /// <summary>
    /// 附带的角标，key为格子id，1～15，value为item数量
    /// </summary>
    public pbc::MapField<uint, uint> AttachItems {
      get { return attachItems_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.SuperFreeInfo cacheSuperFreeInfo_;
    /// <summary>
    /// 缓存的superFree信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.SuperFreeInfo CacheSuperFreeInfo {
      get { return cacheSuperFreeInfo_; }
      set {
        cacheSuperFreeInfo_ = value;
      }
    }

    private bool allOpened_;
    /// <summary>
    /// 是否所有的格子都开过了
    /// </summary>
    public bool AllOpened {
      get { return allOpened_; }
      set {
        allOpened_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      doorPositionIds_.WriteTo(output, _repeated_doorPositionIds_codec);
      lastDoorPositionIds_.WriteTo(output, _repeated_lastDoorPositionIds_codec);
      if (linkData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LinkData);
      }
      if (IsMapFeature != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsMapFeature);
      }
      if (CollectItems != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CollectItems);
      }
      roles_.WriteTo(output, _repeated_roles_codec);
      if (avgBet_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AvgBet);
      }
      attachItems_.WriteTo(output, _map_attachItems_codec);
      if (cacheSuperFreeInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CacheSuperFreeInfo);
      }
      if (AllOpened != false) {
        output.WriteRawTag(80);
        output.WriteBool(AllOpened);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += doorPositionIds_.CalculateSize(_repeated_doorPositionIds_codec);
      size += lastDoorPositionIds_.CalculateSize(_repeated_lastDoorPositionIds_codec);
      if (linkData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkData);
      }
      if (IsMapFeature != false) {
        size += 1 + 1;
      }
      if (CollectItems != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CollectItems);
      }
      size += roles_.CalculateSize(_repeated_roles_codec);
      if (avgBet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvgBet);
      }
      size += attachItems_.CalculateSize(_map_attachItems_codec);
      if (cacheSuperFreeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CacheSuperFreeInfo);
      }
      if (AllOpened != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            doorPositionIds_.AddEntriesFrom(input, _repeated_doorPositionIds_codec);
            break;
          }
          case 18:
          case 16: {
            lastDoorPositionIds_.AddEntriesFrom(input, _repeated_lastDoorPositionIds_codec);
            break;
          }
          case 26: {
            if (linkData_ == null) {
              linkData_ = new global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.LinkData();
            }
            input.ReadMessage(linkData_);
            break;
          }
          case 32: {
            IsMapFeature = input.ReadBool();
            break;
          }
          case 40: {
            CollectItems = input.ReadUInt32();
            break;
          }
          case 50: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
          case 58: {
            if (avgBet_ == null) {
              avgBet_ = new global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.AvgBetData();
            }
            input.ReadMessage(avgBet_);
            break;
          }
          case 66: {
            attachItems_.AddEntriesFrom(input, _map_attachItems_codec);
            break;
          }
          case 74: {
            if (cacheSuperFreeInfo_ == null) {
              cacheSuperFreeInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.SuperFreeInfo();
            }
            input.ReadMessage(cacheSuperFreeInfo_);
            break;
          }
          case 80: {
            AllOpened = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CatInBoots2GameResultExtraInfo message type.</summary>
    public static class Types {
      public enum RewardType {
        UnknownReward = 0,
        /// <summary>
        /// 金币奖励
        /// </summary>
        Coin = 1,
        /// <summary>
        /// 免费游戏
        /// </summary>
        FreeGame = 2,
        /// <summary>
        /// re spin
        /// </summary>
        Respin = 3,
      }

      public sealed class LinkData : pb::IMessage {
        private static readonly pb::MessageParser<LinkData> _parser = new pb::MessageParser<LinkData>(() => new LinkData());
        public static pb::MessageParser<LinkData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.LinkData.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.LinkData.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.LinkData.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.LinkData.Types.Item>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.LinkData.Types.Item> Items {
          get { return items_; }
        }

        private uint fullWinRate_;
        /// <summary>
        /// grandJackpot winRate, 没中是0
        /// </summary>
        public uint FullWinRate {
          get { return fullWinRate_; }
          set {
            fullWinRate_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          if (FullWinRate != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(FullWinRate);
          }
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          if (FullWinRate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FullWinRate);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 16: {
                FullWinRate = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LinkData message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private uint positionId_;
            /// <summary>
            /// 位置
            /// </summary>
            public uint PositionId {
              get { return positionId_; }
              set {
                positionId_ = value;
              }
            }

            private uint symbolId_;
            /// <summary>
            /// 现实图标
            /// </summary>
            public uint SymbolId {
              get { return symbolId_; }
              set {
                symbolId_ = value;
              }
            }

            private ulong winRate_;
            /// <summary>
            /// 赢钱倍率
            /// </summary>
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            private uint jackpotId_;
            /// <summary>
            /// jackpotId
            /// </summary>
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private ulong jackpotPay_;
            /// <summary>
            /// jackpot倍率
            /// </summary>
            public ulong JackpotPay {
              get { return jackpotPay_; }
              set {
                jackpotPay_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (PositionId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PositionId);
              }
              if (SymbolId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(SymbolId);
              }
              if (WinRate != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(WinRate);
              }
              if (JackpotId != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(JackpotId);
              }
              if (JackpotPay != 0UL) {
                output.WriteRawTag(40);
                output.WriteUInt64(JackpotPay);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (PositionId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
              }
              if (SymbolId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
              }
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              if (JackpotPay != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    PositionId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    SymbolId = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                  case 32: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    JackpotPay = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed class RoleGridData : pb::IMessage {
        private static readonly pb::MessageParser<RoleGridData> _parser = new pb::MessageParser<RoleGridData>(() => new RoleGridData());
        public static pb::MessageParser<RoleGridData> Parser { get { return _parser; } }

        private global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.RewardType rewardType_ = 0;
        /// <summary>
        /// 奖励类型
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.RewardType RewardType {
          get { return rewardType_; }
          set {
            rewardType_ = value;
          }
        }

        private uint rewardValue_;
        /// <summary>
        /// 奖励相关的数值
        /// </summary>
        public uint RewardValue {
          get { return rewardValue_; }
          set {
            rewardValue_ = value;
          }
        }

        private ulong avgBet_;
        /// <summary>
        /// 翻开的时候的avg bet
        /// </summary>
        public ulong AvgBet {
          get { return avgBet_; }
          set {
            avgBet_ = value;
          }
        }

        private bool opened_;
        /// <summary>
        /// 格子是否开启
        /// </summary>
        public bool Opened {
          get { return opened_; }
          set {
            opened_ = value;
          }
        }

        private uint price_;
        /// <summary>
        /// 格子价格
        /// </summary>
        public uint Price {
          get { return price_; }
          set {
            price_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (RewardType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) RewardType);
          }
          if (RewardValue != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(RewardValue);
          }
          if (AvgBet != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(AvgBet);
          }
          if (Opened != false) {
            output.WriteRawTag(32);
            output.WriteBool(Opened);
          }
          if (Price != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Price);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (RewardType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RewardType);
          }
          if (RewardValue != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardValue);
          }
          if (AvgBet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AvgBet);
          }
          if (Opened != false) {
            size += 1 + 1;
          }
          if (Price != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                rewardType_ = (global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.RewardType) input.ReadEnum();
                break;
              }
              case 16: {
                RewardValue = input.ReadUInt32();
                break;
              }
              case 24: {
                AvgBet = input.ReadUInt64();
                break;
              }
              case 32: {
                Opened = input.ReadBool();
                break;
              }
              case 40: {
                Price = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class RoleData : pb::IMessage {
        private static readonly pb::MessageParser<RoleData> _parser = new pb::MessageParser<RoleData>(() => new RoleData());
        public static pb::MessageParser<RoleData> Parser { get { return _parser; } }

        private uint roleId_;
        /// <summary>
        /// 角色id
        /// </summary>
        public uint RoleId {
          get { return roleId_; }
          set {
            roleId_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.RoleGridData> _repeated_grids_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.RoleGridData.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.RoleGridData> grids_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.RoleGridData>();
        /// <summary>
        /// 格子信息，按下标存，0～8
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CatInBoots2GameResultExtraInfo.Types.RoleGridData> Grids {
          get { return grids_; }
        }

        private bool unlocked_;
        /// <summary>
        /// 是否已解锁
        /// </summary>
        public bool Unlocked {
          get { return unlocked_; }
          set {
            unlocked_ = value;
          }
        }

        private uint superFreeSpinCount_;
        /// <summary>
        /// superFree的次数
        /// </summary>
        public uint SuperFreeSpinCount {
          get { return superFreeSpinCount_; }
          set {
            superFreeSpinCount_ = value;
          }
        }

        private static readonly pb::FieldCodec<uint> _repeated_superFreePattern_codec
            = pb::FieldCodec.ForUInt32(42);
        private readonly pbc::RepeatedField<uint> superFreePattern_ = new pbc::RepeatedField<uint>();
        public pbc::RepeatedField<uint> SuperFreePattern {
          get { return superFreePattern_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (RoleId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(RoleId);
          }
          grids_.WriteTo(output, _repeated_grids_codec);
          if (Unlocked != false) {
            output.WriteRawTag(24);
            output.WriteBool(Unlocked);
          }
          if (SuperFreeSpinCount != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(SuperFreeSpinCount);
          }
          superFreePattern_.WriteTo(output, _repeated_superFreePattern_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (RoleId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleId);
          }
          size += grids_.CalculateSize(_repeated_grids_codec);
          if (Unlocked != false) {
            size += 1 + 1;
          }
          if (SuperFreeSpinCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SuperFreeSpinCount);
          }
          size += superFreePattern_.CalculateSize(_repeated_superFreePattern_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RoleId = input.ReadUInt32();
                break;
              }
              case 18: {
                grids_.AddEntriesFrom(input, _repeated_grids_codec);
                break;
              }
              case 24: {
                Unlocked = input.ReadBool();
                break;
              }
              case 32: {
                SuperFreeSpinCount = input.ReadUInt32();
                break;
              }
              case 42:
              case 40: {
                superFreePattern_.AddEntriesFrom(input, _repeated_superFreePattern_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class AvgBetData : pb::IMessage {
        private static readonly pb::MessageParser<AvgBetData> _parser = new pb::MessageParser<AvgBetData>(() => new AvgBetData());
        public static pb::MessageParser<AvgBetData> Parser { get { return _parser; } }

        private uint spinCount_;
        /// <summary>
        /// spin次数
        /// </summary>
        public uint SpinCount {
          get { return spinCount_; }
          set {
            spinCount_ = value;
          }
        }

        private ulong avgBet_;
        /// <summary>
        /// 当前的平均下注
        /// </summary>
        public ulong AvgBet {
          get { return avgBet_; }
          set {
            avgBet_ = value;
          }
        }

        private ulong totalBet_;
        public ulong TotalBet {
          get { return totalBet_; }
          set {
            totalBet_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (SpinCount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(SpinCount);
          }
          if (AvgBet != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(AvgBet);
          }
          if (TotalBet != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(TotalBet);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (SpinCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpinCount);
          }
          if (AvgBet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AvgBet);
          }
          if (TotalBet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalBet);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                SpinCount = input.ReadUInt32();
                break;
              }
              case 16: {
                AvgBet = input.ReadUInt64();
                break;
              }
              case 24: {
                TotalBet = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class SuperFreeInfo : pb::IMessage {
        private static readonly pb::MessageParser<SuperFreeInfo> _parser = new pb::MessageParser<SuperFreeInfo>(() => new SuperFreeInfo());
        public static pb::MessageParser<SuperFreeInfo> Parser { get { return _parser; } }

        private uint freeSpinId_;
        public uint FreeSpinId {
          get { return freeSpinId_; }
          set {
            freeSpinId_ = value;
          }
        }

        private uint freeSpinCount_;
        public uint FreeSpinCount {
          get { return freeSpinCount_; }
          set {
            freeSpinCount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (FreeSpinId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(FreeSpinId);
          }
          if (FreeSpinCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(FreeSpinCount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (FreeSpinId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeSpinId);
          }
          if (FreeSpinCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeSpinCount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                FreeSpinId = input.ReadUInt32();
                break;
              }
              case 16: {
                FreeSpinCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class CatInBoots2BonusGameRequest : pb::IMessage {
    private static readonly pb::MessageParser<CatInBoots2BonusGameRequest> _parser = new pb::MessageParser<CatInBoots2BonusGameRequest>(() => new CatInBoots2BonusGameRequest());
    public static pb::MessageParser<CatInBoots2BonusGameRequest> Parser { get { return _parser; } }

    private uint roleId_;
    /// <summary>
    /// 要升级的角色id
    /// </summary>
    public uint RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    private uint choose_;
    /// <summary>
    /// 玩家选择的索引，从0开始
    /// </summary>
    public uint Choose {
      get { return choose_; }
      set {
        choose_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoleId);
      }
      if (Choose != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Choose);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoleId);
      }
      if (Choose != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Choose);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadUInt32();
            break;
          }
          case 16: {
            Choose = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///=========================== Phoenix ====================================
  /// </summary>
  public sealed class PhoenixGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<PhoenixGameResultExtraInfo> _parser = new pb::MessageParser<PhoenixGameResultExtraInfo>(() => new PhoenixGameResultExtraInfo());
    public static pb::MessageParser<PhoenixGameResultExtraInfo> Parser { get { return _parser; } }

    private uint oldLevel_;
    /// <summary>
    /// feature中的上次等级
    /// </summary>
    public uint OldLevel {
      get { return oldLevel_; }
      set {
        oldLevel_ = value;
      }
    }

    private uint level_;
    /// <summary>
    /// feature中的这次等级
    /// </summary>
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private uint jackpotId_;
    /// <summary>
    /// feature中的jackpotId， 没中是0
    /// </summary>
    public uint JackpotId {
      get { return jackpotId_; }
      set {
        jackpotId_ = value;
      }
    }

    private ulong jackpotPay_;
    /// <summary>
    /// feature中的jackpotPay
    /// </summary>
    public ulong JackpotPay {
      get { return jackpotPay_; }
      set {
        jackpotPay_ = value;
      }
    }

    private uint oldWildCount_;
    /// <summary>
    /// feature中的wild数量累积（上一次）
    /// </summary>
    public uint OldWildCount {
      get { return oldWildCount_; }
      set {
        oldWildCount_ = value;
      }
    }

    private uint wildCount_;
    /// <summary>
    /// feature中的wild数量累积
    /// </summary>
    public uint WildCount {
      get { return wildCount_; }
      set {
        wildCount_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.PhoenixGameResultExtraInfo.Types.WheelBonus wheelBonus_;
    /// <summary>
    /// bonus状态相关数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.PhoenixGameResultExtraInfo.Types.WheelBonus WheelBonus {
      get { return wheelBonus_; }
      set {
        wheelBonus_ = value;
      }
    }

    private uint showType_;
    /// <summary>
    /// 表现参数 0 无 1 蓝凤凰 2 红凤凰
    /// </summary>
    public uint ShowType {
      get { return showType_; }
      set {
        showType_ = value;
      }
    }

    private static readonly pb::FieldCodec<uint> _repeated_showColumns_codec
        = pb::FieldCodec.ForUInt32(74);
    private readonly pbc::RepeatedField<uint> showColumns_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 表现参数 出炸裂特效的列
    /// </summary>
    public pbc::RepeatedField<uint> ShowColumns {
      get { return showColumns_; }
    }

    private bool showSuper_;
    /// <summary>
    /// 表现参数 是否是纵非，否则只横飞
    /// </summary>
    public bool ShowSuper {
      get { return showSuper_; }
      set {
        showSuper_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (OldLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OldLevel);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (JackpotId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(JackpotId);
      }
      if (JackpotPay != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(JackpotPay);
      }
      if (OldWildCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(OldWildCount);
      }
      if (WildCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(WildCount);
      }
      if (wheelBonus_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(WheelBonus);
      }
      if (ShowType != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ShowType);
      }
      showColumns_.WriteTo(output, _repeated_showColumns_codec);
      if (ShowSuper != false) {
        output.WriteRawTag(80);
        output.WriteBool(ShowSuper);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (OldLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldLevel);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (JackpotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
      }
      if (JackpotPay != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
      }
      if (OldWildCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldWildCount);
      }
      if (WildCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WildCount);
      }
      if (wheelBonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WheelBonus);
      }
      if (ShowType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShowType);
      }
      size += showColumns_.CalculateSize(_repeated_showColumns_codec);
      if (ShowSuper != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OldLevel = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            JackpotId = input.ReadUInt32();
            break;
          }
          case 32: {
            JackpotPay = input.ReadUInt64();
            break;
          }
          case 40: {
            OldWildCount = input.ReadUInt32();
            break;
          }
          case 48: {
            WildCount = input.ReadUInt32();
            break;
          }
          case 58: {
            if (wheelBonus_ == null) {
              wheelBonus_ = new global::DragonU3DSDK.Network.API.ILProtocol.PhoenixGameResultExtraInfo.Types.WheelBonus();
            }
            input.ReadMessage(wheelBonus_);
            break;
          }
          case 64: {
            ShowType = input.ReadUInt32();
            break;
          }
          case 74:
          case 72: {
            showColumns_.AddEntriesFrom(input, _repeated_showColumns_codec);
            break;
          }
          case 80: {
            ShowSuper = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PhoenixGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class WheelBonus : pb::IMessage {
        private static readonly pb::MessageParser<WheelBonus> _parser = new pb::MessageParser<WheelBonus>(() => new WheelBonus());
        public static pb::MessageParser<WheelBonus> Parser { get { return _parser; } }

        private uint index_;
        /// <summary>
        /// 转盘结果，
        /// </summary>
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        private uint freeSpinCount_;
        /// <summary>
        /// 结果对应的freeSpin次数
        /// </summary>
        public uint FreeSpinCount {
          get { return freeSpinCount_; }
          set {
            freeSpinCount_ = value;
          }
        }

        private ulong bet_;
        /// <summary>
        /// bonus通用参数
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private ulong preWin_;
        /// <summary>
        /// bonus通用参数
        /// </summary>
        public ulong PreWin {
          get { return preWin_; }
          set {
            preWin_ = value;
          }
        }

        private ulong totalWin_;
        /// <summary>
        /// bonus通用参数
        /// </summary>
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
            = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        /// <summary>
        /// bonus通用参数
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
          get { return triggeringPanels_; }
        }

        private bool isStarted_;
        /// <summary>
        /// // bonus通用参数： 是否要进入wheel
        /// </summary>
        public bool IsStarted {
          get { return isStarted_; }
          set {
            isStarted_ = value;
          }
        }

        private bool toSettle_;
        /// <summary>
        /// // bonus通用参数： 进入wheel后是否可以settle
        /// </summary>
        public bool ToSettle {
          get { return toSettle_; }
          set {
            toSettle_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (FreeSpinCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(FreeSpinCount);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Bet);
          }
          if (PreWin != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(PreWin);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(TotalWin);
          }
          triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
          if (IsStarted != false) {
            output.WriteRawTag(56);
            output.WriteBool(IsStarted);
          }
          if (ToSettle != false) {
            output.WriteRawTag(64);
            output.WriteBool(ToSettle);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (FreeSpinCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeSpinCount);
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (PreWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PreWin);
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
          if (IsStarted != false) {
            size += 1 + 1;
          }
          if (ToSettle != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 16: {
                FreeSpinCount = input.ReadUInt32();
                break;
              }
              case 24: {
                Bet = input.ReadUInt64();
                break;
              }
              case 32: {
                PreWin = input.ReadUInt64();
                break;
              }
              case 40: {
                TotalWin = input.ReadUInt64();
                break;
              }
              case 50: {
                triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
                break;
              }
              case 56: {
                IsStarted = input.ReadBool();
                break;
              }
              case 64: {
                ToSettle = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 有可能normal和free这里的gongData要分开，才好恢复从free退出到normal触发变形后的样子。最后就复用，要恢复就恢复到变形前的样子。
  /// </summary>
  public sealed class SolarDiscGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<SolarDiscGameResultExtraInfo> _parser = new pb::MessageParser<SolarDiscGameResultExtraInfo>(() => new SolarDiscGameResultExtraInfo());
    public static pb::MessageParser<SolarDiscGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SolarDiscGameResultExtraInfo.Types.GongData> _repeated_gongDataList_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.SolarDiscGameResultExtraInfo.Types.GongData.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SolarDiscGameResultExtraInfo.Types.GongData> gongDataList_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SolarDiscGameResultExtraInfo.Types.GongData>();
    /// <summary>
    /// 这一次spin的锣数据
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SolarDiscGameResultExtraInfo.Types.GongData> GongDataList {
      get { return gongDataList_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      gongDataList_.WriteTo(output, _repeated_gongDataList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += gongDataList_.CalculateSize(_repeated_gongDataList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            gongDataList_.AddEntriesFrom(input, _repeated_gongDataList_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SolarDiscGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class GongData : pb::IMessage {
        private static readonly pb::MessageParser<GongData> _parser = new pb::MessageParser<GongData>(() => new GongData());
        public static pb::MessageParser<GongData> Parser { get { return _parser; } }

        private global::DragonU3DSDK.Network.API.ILProtocol.Position position_;
        /// <summary>
        /// 锣出现的位置, 这个位置会变wild
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.Position Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        private uint symbolId_;
        /// <summary>
        /// 锣影响的symbolId， 特殊：如果没有能影响的空位这里会是0，下面长就为空
        /// </summary>
        public uint SymbolId {
          get { return symbolId_; }
          set {
            symbolId_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Position> _repeated_positions_codec
            = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.Position.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Position> positions_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Position>();
        /// <summary>
        /// 受锣影响变wild的位置； 上面的[position] ++ 这里的 positions = 所有要变wild的位子
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Position> Positions {
          get { return positions_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (position_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Position);
          }
          if (SymbolId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(SymbolId);
          }
          positions_.WriteTo(output, _repeated_positions_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (position_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
          }
          if (SymbolId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
          }
          size += positions_.CalculateSize(_repeated_positions_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (position_ == null) {
                  position_ = new global::DragonU3DSDK.Network.API.ILProtocol.Position();
                }
                input.ReadMessage(position_);
                break;
              }
              case 16: {
                SymbolId = input.ReadUInt32();
                break;
              }
              case 26: {
                positions_.AddEntriesFrom(input, _repeated_positions_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///=========================== Firecracker ====================================
  /// </summary>
  public sealed class FirecrackerGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<FirecrackerGameResultExtraInfo> _parser = new pb::MessageParser<FirecrackerGameResultExtraInfo>(() => new FirecrackerGameResultExtraInfo());
    public static pb::MessageParser<FirecrackerGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<uint> _repeated_triggerWildIndexes_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> triggerWildIndexes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 触发变全wild列，实现解锁的列
    /// </summary>
    public pbc::RepeatedField<uint> TriggerWildIndexes {
      get { return triggerWildIndexes_; }
    }

    private static readonly pb::FieldCodec<uint> _repeated_otherWildIndexes_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> otherWildIndexes_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 解锁后连锁触发全wild的列
    /// </summary>
    public pbc::RepeatedField<uint> OtherWildIndexes {
      get { return otherWildIndexes_; }
    }

    private bool isNormalFree_;
    /// <summary>
    /// 这是普通free
    /// </summary>
    public bool IsNormalFree {
      get { return isNormalFree_; }
      set {
        isNormalFree_ = value;
      }
    }

    private bool isMegaFree_;
    /// <summary>
    /// 这是mega free, 如果is_normal_free和is_mega_free同时为true, 那么当前free是从普通free进入的mega free
    /// </summary>
    public bool IsMegaFree {
      get { return isMegaFree_; }
      set {
        isMegaFree_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      triggerWildIndexes_.WriteTo(output, _repeated_triggerWildIndexes_codec);
      otherWildIndexes_.WriteTo(output, _repeated_otherWildIndexes_codec);
      if (IsNormalFree != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsNormalFree);
      }
      if (IsMegaFree != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsMegaFree);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += triggerWildIndexes_.CalculateSize(_repeated_triggerWildIndexes_codec);
      size += otherWildIndexes_.CalculateSize(_repeated_otherWildIndexes_codec);
      if (IsNormalFree != false) {
        size += 1 + 1;
      }
      if (IsMegaFree != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            triggerWildIndexes_.AddEntriesFrom(input, _repeated_triggerWildIndexes_codec);
            break;
          }
          case 18:
          case 16: {
            otherWildIndexes_.AddEntriesFrom(input, _repeated_otherWildIndexes_codec);
            break;
          }
          case 24: {
            IsNormalFree = input.ReadBool();
            break;
          }
          case 32: {
            IsMegaFree = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///================= CaptainPenguin2 ====================================
  /// </summary>
  public sealed class CaptainPenguin2GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<CaptainPenguin2GameResultExtraInfo> _parser = new pb::MessageParser<CaptainPenguin2GameResultExtraInfo>(() => new CaptainPenguin2GameResultExtraInfo());
    public static pb::MessageParser<CaptainPenguin2GameResultExtraInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.FreeGameInfo freeGameInfo_;
    /// <summary>
    /// 免费游戏数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.FreeGameInfo FreeGameInfo {
      get { return freeGameInfo_; }
      set {
        freeGameInfo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo reSpinInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo ReSpinInfo {
      get { return reSpinInfo_; }
      set {
        reSpinInfo_ = value;
      }
    }

    private static readonly pbc::MapField<uint, uint>.Codec _map_randomWild_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 26);
    private readonly pbc::MapField<uint, uint> randomWild_ = new pbc::MapField<uint, uint>();
    /// <summary>
    /// 随机的wild
    /// </summary>
    public pbc::MapField<uint, uint> RandomWild {
      get { return randomWild_; }
    }

    private static readonly pbc::MapField<uint, uint>.Codec _map_randomScatter_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 34);
    private readonly pbc::MapField<uint, uint> randomScatter_ = new pbc::MapField<uint, uint>();
    public pbc::MapField<uint, uint> RandomScatter {
      get { return randomScatter_; }
    }

    private static readonly pb::FieldCodec<uint> _repeated_randomS01_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> randomS01_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 随机的s01
    /// </summary>
    public pbc::RepeatedField<uint> RandomS01 {
      get { return randomS01_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (freeGameInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FreeGameInfo);
      }
      if (reSpinInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReSpinInfo);
      }
      randomWild_.WriteTo(output, _map_randomWild_codec);
      randomScatter_.WriteTo(output, _map_randomScatter_codec);
      randomS01_.WriteTo(output, _repeated_randomS01_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (freeGameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreeGameInfo);
      }
      if (reSpinInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReSpinInfo);
      }
      size += randomWild_.CalculateSize(_map_randomWild_codec);
      size += randomScatter_.CalculateSize(_map_randomScatter_codec);
      size += randomS01_.CalculateSize(_repeated_randomS01_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (freeGameInfo_ == null) {
              freeGameInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.FreeGameInfo();
            }
            input.ReadMessage(freeGameInfo_);
            break;
          }
          case 18: {
            if (reSpinInfo_ == null) {
              reSpinInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo();
            }
            input.ReadMessage(reSpinInfo_);
            break;
          }
          case 26: {
            randomWild_.AddEntriesFrom(input, _map_randomWild_codec);
            break;
          }
          case 34: {
            randomScatter_.AddEntriesFrom(input, _map_randomScatter_codec);
            break;
          }
          case 42:
          case 40: {
            randomS01_.AddEntriesFrom(input, _repeated_randomS01_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CaptainPenguin2GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class FreeGameInfo : pb::IMessage {
        private static readonly pb::MessageParser<FreeGameInfo> _parser = new pb::MessageParser<FreeGameInfo>(() => new FreeGameInfo());
        public static pb::MessageParser<FreeGameInfo> Parser { get { return _parser; } }

        private static readonly pbc::MapField<uint, uint>.Codec _map_preLockedSymbols_codec
            = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 10);
        private readonly pbc::MapField<uint, uint> preLockedSymbols_ = new pbc::MapField<uint, uint>();
        /// <summary>
        /// 前一把锁定的图标
        /// </summary>
        public pbc::MapField<uint, uint> PreLockedSymbols {
          get { return preLockedSymbols_; }
        }

        private static readonly pbc::MapField<uint, uint>.Codec _map_newLockedSymbols_codec
            = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 18);
        private readonly pbc::MapField<uint, uint> newLockedSymbols_ = new pbc::MapField<uint, uint>();
        /// <summary>
        /// 新锁定的图标
        /// </summary>
        public pbc::MapField<uint, uint> NewLockedSymbols {
          get { return newLockedSymbols_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          preLockedSymbols_.WriteTo(output, _map_preLockedSymbols_codec);
          newLockedSymbols_.WriteTo(output, _map_newLockedSymbols_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += preLockedSymbols_.CalculateSize(_map_preLockedSymbols_codec);
          size += newLockedSymbols_.CalculateSize(_map_newLockedSymbols_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                preLockedSymbols_.AddEntriesFrom(input, _map_preLockedSymbols_codec);
                break;
              }
              case 18: {
                newLockedSymbols_.AddEntriesFrom(input, _map_newLockedSymbols_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class ReSpinInfo : pb::IMessage {
        private static readonly pb::MessageParser<ReSpinInfo> _parser = new pb::MessageParser<ReSpinInfo>(() => new ReSpinInfo());
        public static pb::MessageParser<ReSpinInfo> Parser { get { return _parser; } }

        private uint panelHeight_;
        /// <summary>
        /// 当前面板高度
        /// </summary>
        public uint PanelHeight {
          get { return panelHeight_; }
          set {
            panelHeight_ = value;
          }
        }

        private static readonly pb::FieldCodec<uint> _repeated_validFrames_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> validFrames_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 当前剩下的框
        /// </summary>
        public pbc::RepeatedField<uint> ValidFrames {
          get { return validFrames_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_usedFrames_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> usedFrames_ = new pbc::RepeatedField<uint>();
        /// <summary>
        ///  已经用掉的框
        /// </summary>
        public pbc::RepeatedField<uint> UsedFrames {
          get { return usedFrames_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_newFrames_codec
            = pb::FieldCodec.ForUInt32(34);
        private readonly pbc::RepeatedField<uint> newFrames_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 新出现的框
        /// </summary>
        public pbc::RepeatedField<uint> NewFrames {
          get { return newFrames_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo.Types.CoinInFrame> _repeated_coinInFrame_codec
            = pb::FieldCodec.ForMessage(42, global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo.Types.CoinInFrame.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo.Types.CoinInFrame> coinInFrame_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo.Types.CoinInFrame>();
        /// <summary>
        /// 出现在框里面的coin，等待spin
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo.Types.CoinInFrame> CoinInFrame {
          get { return coinInFrame_; }
        }

        private static readonly pbc::MapField<uint, global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo.Types.LinkItem>.Codec _map_linkItems_codec
            = new pbc::MapField<uint, global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo.Types.LinkItem>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo.Types.LinkItem.Parser), 50);
        private readonly pbc::MapField<uint, global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo.Types.LinkItem> linkItems_ = new pbc::MapField<uint, global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo.Types.LinkItem>();
        /// <summary>
        /// 当前面板上的coin，包括coin_in_frame
        /// </summary>
        public pbc::MapField<uint, global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo.Types.LinkItem> LinkItems {
          get { return linkItems_; }
        }

        private ulong addedToReels_;
        /// <summary>
        /// 金黄色的coin的值
        /// </summary>
        public ulong AddedToReels {
          get { return addedToReels_; }
          set {
            addedToReels_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo.Types.JackpotInfo jackpotInfo_;
        /// <summary>
        /// jackpotInfo，有此信息时需要弹jackpot的collect界面
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo.Types.JackpotInfo JackpotInfo {
          get { return jackpotInfo_; }
          set {
            jackpotInfo_ = value;
          }
        }

        private uint startCoinNum_;
        public uint StartCoinNum {
          get { return startCoinNum_; }
          set {
            startCoinNum_ = value;
          }
        }

        private static readonly pbc::MapField<uint, uint>.Codec _map_startCoins_codec
            = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 82);
        private readonly pbc::MapField<uint, uint> startCoins_ = new pbc::MapField<uint, uint>();
        public pbc::MapField<uint, uint> StartCoins {
          get { return startCoins_; }
        }

        private uint randomPickIndex_;
        /// <summary>
        /// 配合小转轮使用的一个随机参数
        /// </summary>
        public uint RandomPickIndex {
          get { return randomPickIndex_; }
          set {
            randomPickIndex_ = value;
          }
        }

        private ulong yellowCoinTotalWinRate_;
        /// <summary>
        /// 当前面板上所有黄币的和
        /// </summary>
        public ulong YellowCoinTotalWinRate {
          get { return yellowCoinTotalWinRate_; }
          set {
            yellowCoinTotalWinRate_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (PanelHeight != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PanelHeight);
          }
          validFrames_.WriteTo(output, _repeated_validFrames_codec);
          usedFrames_.WriteTo(output, _repeated_usedFrames_codec);
          newFrames_.WriteTo(output, _repeated_newFrames_codec);
          coinInFrame_.WriteTo(output, _repeated_coinInFrame_codec);
          linkItems_.WriteTo(output, _map_linkItems_codec);
          if (AddedToReels != 0UL) {
            output.WriteRawTag(56);
            output.WriteUInt64(AddedToReels);
          }
          if (jackpotInfo_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(JackpotInfo);
          }
          if (StartCoinNum != 0) {
            output.WriteRawTag(72);
            output.WriteUInt32(StartCoinNum);
          }
          startCoins_.WriteTo(output, _map_startCoins_codec);
          if (RandomPickIndex != 0) {
            output.WriteRawTag(88);
            output.WriteUInt32(RandomPickIndex);
          }
          if (YellowCoinTotalWinRate != 0UL) {
            output.WriteRawTag(96);
            output.WriteUInt64(YellowCoinTotalWinRate);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (PanelHeight != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PanelHeight);
          }
          size += validFrames_.CalculateSize(_repeated_validFrames_codec);
          size += usedFrames_.CalculateSize(_repeated_usedFrames_codec);
          size += newFrames_.CalculateSize(_repeated_newFrames_codec);
          size += coinInFrame_.CalculateSize(_repeated_coinInFrame_codec);
          size += linkItems_.CalculateSize(_map_linkItems_codec);
          if (AddedToReels != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AddedToReels);
          }
          if (jackpotInfo_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(JackpotInfo);
          }
          if (StartCoinNum != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartCoinNum);
          }
          size += startCoins_.CalculateSize(_map_startCoins_codec);
          if (RandomPickIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandomPickIndex);
          }
          if (YellowCoinTotalWinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(YellowCoinTotalWinRate);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PanelHeight = input.ReadUInt32();
                break;
              }
              case 18:
              case 16: {
                validFrames_.AddEntriesFrom(input, _repeated_validFrames_codec);
                break;
              }
              case 26:
              case 24: {
                usedFrames_.AddEntriesFrom(input, _repeated_usedFrames_codec);
                break;
              }
              case 34:
              case 32: {
                newFrames_.AddEntriesFrom(input, _repeated_newFrames_codec);
                break;
              }
              case 42: {
                coinInFrame_.AddEntriesFrom(input, _repeated_coinInFrame_codec);
                break;
              }
              case 50: {
                linkItems_.AddEntriesFrom(input, _map_linkItems_codec);
                break;
              }
              case 56: {
                AddedToReels = input.ReadUInt64();
                break;
              }
              case 66: {
                if (jackpotInfo_ == null) {
                  jackpotInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.CaptainPenguin2GameResultExtraInfo.Types.ReSpinInfo.Types.JackpotInfo();
                }
                input.ReadMessage(jackpotInfo_);
                break;
              }
              case 72: {
                StartCoinNum = input.ReadUInt32();
                break;
              }
              case 82: {
                startCoins_.AddEntriesFrom(input, _map_startCoins_codec);
                break;
              }
              case 88: {
                RandomPickIndex = input.ReadUInt32();
                break;
              }
              case 96: {
                YellowCoinTotalWinRate = input.ReadUInt64();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ReSpinInfo message type.</summary>
        public static class Types {
          public sealed class CoinInFrame : pb::IMessage {
            private static readonly pb::MessageParser<CoinInFrame> _parser = new pb::MessageParser<CoinInFrame>(() => new CoinInFrame());
            public static pb::MessageParser<CoinInFrame> Parser { get { return _parser; } }

            private uint id_;
            public uint Id {
              get { return id_; }
              set {
                id_ = value;
              }
            }

            private uint symbolId_;
            public uint SymbolId {
              get { return symbolId_; }
              set {
                symbolId_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (Id != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Id);
              }
              if (SymbolId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(SymbolId);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (Id != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
              }
              if (SymbolId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Id = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    SymbolId = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

          public sealed class LinkItem : pb::IMessage {
            private static readonly pb::MessageParser<LinkItem> _parser = new pb::MessageParser<LinkItem>(() => new LinkItem());
            public static pb::MessageParser<LinkItem> Parser { get { return _parser; } }

            private uint positionId_;
            /// <summary>
            /// 位置
            /// </summary>
            public uint PositionId {
              get { return positionId_; }
              set {
                positionId_ = value;
              }
            }

            private uint symbolId_;
            /// <summary>
            /// 图标
            /// </summary>
            public uint SymbolId {
              get { return symbolId_; }
              set {
                symbolId_ = value;
              }
            }

            private ulong winRate_;
            /// <summary>
            /// 赢钱倍率
            /// </summary>
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            private uint jackpotId_;
            /// <summary>
            /// jackpotId
            /// </summary>
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private ulong jackpotPay_;
            /// <summary>
            /// jackpot倍率
            /// </summary>
            public ulong JackpotPay {
              get { return jackpotPay_; }
              set {
                jackpotPay_ = value;
              }
            }

            private uint jackpotCount_;
            public uint JackpotCount {
              get { return jackpotCount_; }
              set {
                jackpotCount_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (PositionId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PositionId);
              }
              if (SymbolId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(SymbolId);
              }
              if (WinRate != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(WinRate);
              }
              if (JackpotId != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(JackpotId);
              }
              if (JackpotPay != 0UL) {
                output.WriteRawTag(40);
                output.WriteUInt64(JackpotPay);
              }
              if (JackpotCount != 0) {
                output.WriteRawTag(48);
                output.WriteUInt32(JackpotCount);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (PositionId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
              }
              if (SymbolId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
              }
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              if (JackpotPay != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
              }
              if (JackpotCount != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotCount);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    PositionId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    SymbolId = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                  case 32: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    JackpotPay = input.ReadUInt64();
                    break;
                  }
                  case 48: {
                    JackpotCount = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

          public sealed class JackpotInfo : pb::IMessage {
            private static readonly pb::MessageParser<JackpotInfo> _parser = new pb::MessageParser<JackpotInfo>(() => new JackpotInfo());
            public static pb::MessageParser<JackpotInfo> Parser { get { return _parser; } }

            private uint jackpotId_;
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private uint jackpotPay_;
            public uint JackpotPay {
              get { return jackpotPay_; }
              set {
                jackpotPay_ = value;
              }
            }

            private ulong totalWin_;
            public ulong TotalWin {
              get { return totalWin_; }
              set {
                totalWin_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (JackpotId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(JackpotId);
              }
              if (JackpotPay != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(JackpotPay);
              }
              if (TotalWin != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(TotalWin);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              if (JackpotPay != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotPay);
              }
              if (TotalWin != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    JackpotPay = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    TotalWin = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// choose的时候 bonus api 发 0 1 2参数，决定free是 10次 6次 3次
  /// 本关状态非常多 特别是reSpin 要结合 is_map_re_spin is_map_free is_super_map_free is_super_re_spin 以及freeSpinInfo.isOver判断 reSpin发生的地点
  /// 状态优先级 map > choose > base
  /// 状态图
  /// base -> map -> 大节点 free（1） -> reSpin(1)
  ///             -> 大节点 reSpin(2)
  ///             -> 小节点
  /// base -> choose -> free（2） -> reSpin(3)
  /// base -> reSpin(4)
  ///
  /// 下面判断方法参考
  /// reSpin(1) : is_map_free == true &amp;&amp; is_map_re_spin == false(！！!) &amp;&amp;  freeSpinInfo.isOver == false &amp;&amp; reSpinInfo.isOver == false
  /// reSpin(2) : is_map_re_spin == true &amp;&amp;  freeSpinInfo.isOver == true &amp;&amp; reSpinInfo.isOver == false
  /// reSpin(3) : is_map_free == false &amp;&amp; is_map_re_spin == false &amp;&amp;  freeSpinInfo.isOver == false &amp;&amp; reSpinInfo.isOver == false
  /// reSpin(4) : is_map_re_spin == false &amp;&amp;  freeSpinInfo.isOver == true &amp;&amp; reSpinInfo.isOver == false
  /// 再结合 is_super_re_spin 判断这个reSpin是不是super
  ///
  /// free（1）： is_map_free == true &amp;&amp; freeSpinInfo.isOver == false 再结合 is_super_map_free 判断是不是super free
  /// free (2): is_map_free == false &amp;&amp; freeSpinInfo.isOver == false
  ///
  /// min_trigger_link_count 体现 choose 的结果
  /// free_drag_reel_position_map 是 free里的drag feature
  /// </summary>
  public sealed class PelicanGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<PelicanGameResultExtraInfo> _parser = new pb::MessageParser<PelicanGameResultExtraInfo>(() => new PelicanGameResultExtraInfo());
    public static pb::MessageParser<PelicanGameResultExtraInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.Bonus choose_;
    /// <summary>
    /// free选择相关
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.Bonus Choose {
      get { return choose_; }
      set {
        choose_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.Map map_;
    /// <summary>
    /// map 相关
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.Map Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    private bool isMapReSpin_;
    /// <summary>
    /// 这个reSpin是否是map wheel中转出来的, 注意下面的mapFree中触发的reSpin这里是false
    /// </summary>
    public bool IsMapReSpin {
      get { return isMapReSpin_; }
      set {
        isMapReSpin_ = value;
      }
    }

    private bool isMapFree_;
    /// <summary>
    /// 这个free是否是map wheel中转出来的
    /// </summary>
    public bool IsMapFree {
      get { return isMapFree_; }
      set {
        isMapFree_ = value;
      }
    }

    private bool isSuperMapFree_;
    /// <summary>
    /// 这个map free是不是super mapFree
    /// </summary>
    public bool IsSuperMapFree {
      get { return isSuperMapFree_; }
      set {
        isSuperMapFree_ = value;
      }
    }

    private bool isSuperReSpin_;
    /// <summary>
    /// 这个reSpin是不是super reSpin： 金色link symbol， 一上来全解锁
    /// </summary>
    public bool IsSuperReSpin {
      get { return isSuperReSpin_; }
      set {
        isSuperReSpin_ = value;
      }
    }

    private uint minTriggerLinkCount_;
    /// <summary>
    /// 6 5 4， choose过后这里会是选择结果
    /// </summary>
    public uint MinTriggerLinkCount {
      get { return minTriggerLinkCount_; }
      set {
        minTriggerLinkCount_ = value;
      }
    }

    private uint totalLinkCount_;
    /// <summary>
    /// 当前link symbol的总数， 用于计算差几个解锁panel
    /// </summary>
    public uint TotalLinkCount {
      get { return totalLinkCount_; }
      set {
        totalLinkCount_ = value;
      }
    }

    private uint activeLinkPanelCount_;
    /// <summary>
    /// 当前reSpin解锁panel数量
    /// </summary>
    public uint ActiveLinkPanelCount {
      get { return activeLinkPanelCount_; }
      set {
        activeLinkPanelCount_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.LinkData> _repeated_linkDataList_codec
        = pb::FieldCodec.ForMessage(82, global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.LinkData.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.LinkData> linkDataList_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.LinkData>();
    /// <summary>
    /// linkDateList
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.LinkData> LinkDataList {
      get { return linkDataList_; }
    }

    private static readonly pbc::MapField<uint, int>.Codec _map_freeDragReelPositionMap_codec
        = new pbc::MapField<uint, int>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForInt32(16), 90);
    private readonly pbc::MapField<uint, int> freeDragReelPositionMap_ = new pbc::MapField<uint, int>();
    /// <summary>
    /// free里面的 drag feature
    /// </summary>
    public pbc::MapField<uint, int> FreeDragReelPositionMap {
      get { return freeDragReelPositionMap_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (choose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Choose);
      }
      if (map_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Map);
      }
      if (IsMapReSpin != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsMapReSpin);
      }
      if (IsMapFree != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsMapFree);
      }
      if (IsSuperMapFree != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSuperMapFree);
      }
      if (IsSuperReSpin != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsSuperReSpin);
      }
      if (MinTriggerLinkCount != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MinTriggerLinkCount);
      }
      if (TotalLinkCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(TotalLinkCount);
      }
      if (ActiveLinkPanelCount != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ActiveLinkPanelCount);
      }
      linkDataList_.WriteTo(output, _repeated_linkDataList_codec);
      freeDragReelPositionMap_.WriteTo(output, _map_freeDragReelPositionMap_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (choose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Choose);
      }
      if (map_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (IsMapReSpin != false) {
        size += 1 + 1;
      }
      if (IsMapFree != false) {
        size += 1 + 1;
      }
      if (IsSuperMapFree != false) {
        size += 1 + 1;
      }
      if (IsSuperReSpin != false) {
        size += 1 + 1;
      }
      if (MinTriggerLinkCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinTriggerLinkCount);
      }
      if (TotalLinkCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalLinkCount);
      }
      if (ActiveLinkPanelCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveLinkPanelCount);
      }
      size += linkDataList_.CalculateSize(_repeated_linkDataList_codec);
      size += freeDragReelPositionMap_.CalculateSize(_map_freeDragReelPositionMap_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (choose_ == null) {
              choose_ = new global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.Bonus();
            }
            input.ReadMessage(choose_);
            break;
          }
          case 18: {
            if (map_ == null) {
              map_ = new global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.Map();
            }
            input.ReadMessage(map_);
            break;
          }
          case 24: {
            IsMapReSpin = input.ReadBool();
            break;
          }
          case 32: {
            IsMapFree = input.ReadBool();
            break;
          }
          case 40: {
            IsSuperMapFree = input.ReadBool();
            break;
          }
          case 48: {
            IsSuperReSpin = input.ReadBool();
            break;
          }
          case 56: {
            MinTriggerLinkCount = input.ReadUInt32();
            break;
          }
          case 64: {
            TotalLinkCount = input.ReadUInt32();
            break;
          }
          case 72: {
            ActiveLinkPanelCount = input.ReadUInt32();
            break;
          }
          case 82: {
            linkDataList_.AddEntriesFrom(input, _repeated_linkDataList_codec);
            break;
          }
          case 90: {
            freeDragReelPositionMap_.AddEntriesFrom(input, _map_freeDragReelPositionMap_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PelicanGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class Bonus : pb::IMessage {
        private static readonly pb::MessageParser<Bonus> _parser = new pb::MessageParser<Bonus>(() => new Bonus());
        public static pb::MessageParser<Bonus> Parser { get { return _parser; } }

        private ulong bet_;
        /// <summary>
        /// bonus基本数据
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private bool isStarted_;
        /// <summary>
        /// bonus基本数据
        /// </summary>
        public bool IsStarted {
          get { return isStarted_; }
          set {
            isStarted_ = value;
          }
        }

        private ulong totalWin_;
        /// <summary>
        /// bonus基本数据
        /// </summary>
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        private bool toSettle_;
        /// <summary>
        /// bonus基本数据
        /// </summary>
        public bool ToSettle {
          get { return toSettle_; }
          set {
            toSettle_ = value;
          }
        }

        private ulong preWin_;
        /// <summary>
        /// bonus基本数据
        /// </summary>
        public ulong PreWin {
          get { return preWin_; }
          set {
            preWin_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
            = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        /// <summary>
        /// bonus基本数据
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
          get { return triggeringPanels_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Bet != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Bet);
          }
          if (IsStarted != false) {
            output.WriteRawTag(16);
            output.WriteBool(IsStarted);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(TotalWin);
          }
          if (ToSettle != false) {
            output.WriteRawTag(32);
            output.WriteBool(ToSettle);
          }
          if (PreWin != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(PreWin);
          }
          triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (IsStarted != false) {
            size += 1 + 1;
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          if (ToSettle != false) {
            size += 1 + 1;
          }
          if (PreWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PreWin);
          }
          size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Bet = input.ReadUInt64();
                break;
              }
              case 16: {
                IsStarted = input.ReadBool();
                break;
              }
              case 24: {
                TotalWin = input.ReadUInt64();
                break;
              }
              case 32: {
                ToSettle = input.ReadBool();
                break;
              }
              case 40: {
                PreWin = input.ReadUInt64();
                break;
              }
              case 50: {
                triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class Map : pb::IMessage {
        private static readonly pb::MessageParser<Map> _parser = new pb::MessageParser<Map>(() => new Map());
        public static pb::MessageParser<Map> Parser { get { return _parser; } }

        private ulong bet_;
        /// <summary>
        /// bonus基本数据
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private bool isStarted_;
        /// <summary>
        /// bonus基本数据
        /// </summary>
        public bool IsStarted {
          get { return isStarted_; }
          set {
            isStarted_ = value;
          }
        }

        private ulong totalWin_;
        /// <summary>
        /// bonus基本数据
        /// </summary>
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        private bool toSettle_;
        /// <summary>
        /// bonus基本数据
        /// </summary>
        public bool ToSettle {
          get { return toSettle_; }
          set {
            toSettle_ = value;
          }
        }

        private ulong preWin_;
        /// <summary>
        /// bonus基本数据
        /// </summary>
        public ulong PreWin {
          get { return preWin_; }
          set {
            preWin_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
            = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        /// <summary>
        /// bonus基本数据
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
          get { return triggeringPanels_; }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.Map.Types.AvgBet avgBet_;
        /// <summary>
        /// avg bet 相关
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.Map.Types.AvgBet AvgBet {
          get { return avgBet_; }
          set {
            avgBet_ = value;
          }
        }

        private ulong progress_;
        /// <summary>
        /// 当前等级进度
        /// </summary>
        public ulong Progress {
          get { return progress_; }
          set {
            progress_ = value;
          }
        }

        private uint level_;
        /// <summary>
        /// 等级
        /// </summary>
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        private bool isWheel_;
        /// <summary>
        /// 当前是小节点还是转盘节点
        /// </summary>
        public bool IsWheel {
          get { return isWheel_; }
          set {
            isWheel_ = value;
          }
        }

        private bool isFinal_;
        /// <summary>
        /// 是否是最后一轮
        /// </summary>
        public bool IsFinal {
          get { return isFinal_; }
          set {
            isFinal_ = value;
          }
        }

        private uint index_;
        /// <summary>
        /// 转盘结果
        /// </summary>
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Bet != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Bet);
          }
          if (IsStarted != false) {
            output.WriteRawTag(16);
            output.WriteBool(IsStarted);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(TotalWin);
          }
          if (ToSettle != false) {
            output.WriteRawTag(32);
            output.WriteBool(ToSettle);
          }
          if (PreWin != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(PreWin);
          }
          triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
          if (avgBet_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(AvgBet);
          }
          if (Progress != 0UL) {
            output.WriteRawTag(64);
            output.WriteUInt64(Progress);
          }
          if (Level != 0) {
            output.WriteRawTag(72);
            output.WriteUInt32(Level);
          }
          if (IsWheel != false) {
            output.WriteRawTag(80);
            output.WriteBool(IsWheel);
          }
          if (IsFinal != false) {
            output.WriteRawTag(88);
            output.WriteBool(IsFinal);
          }
          if (Index != 0) {
            output.WriteRawTag(96);
            output.WriteUInt32(Index);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (IsStarted != false) {
            size += 1 + 1;
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          if (ToSettle != false) {
            size += 1 + 1;
          }
          if (PreWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PreWin);
          }
          size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
          if (avgBet_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvgBet);
          }
          if (Progress != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Progress);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (IsWheel != false) {
            size += 1 + 1;
          }
          if (IsFinal != false) {
            size += 1 + 1;
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Bet = input.ReadUInt64();
                break;
              }
              case 16: {
                IsStarted = input.ReadBool();
                break;
              }
              case 24: {
                TotalWin = input.ReadUInt64();
                break;
              }
              case 32: {
                ToSettle = input.ReadBool();
                break;
              }
              case 40: {
                PreWin = input.ReadUInt64();
                break;
              }
              case 50: {
                triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
                break;
              }
              case 58: {
                if (avgBet_ == null) {
                  avgBet_ = new global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.Map.Types.AvgBet();
                }
                input.ReadMessage(avgBet_);
                break;
              }
              case 64: {
                Progress = input.ReadUInt64();
                break;
              }
              case 72: {
                Level = input.ReadUInt32();
                break;
              }
              case 80: {
                IsWheel = input.ReadBool();
                break;
              }
              case 88: {
                IsFinal = input.ReadBool();
                break;
              }
              case 96: {
                Index = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Map message type.</summary>
        public static class Types {
          public sealed class AvgBet : pb::IMessage {
            private static readonly pb::MessageParser<AvgBet> _parser = new pb::MessageParser<AvgBet>(() => new AvgBet());
            public static pb::MessageParser<AvgBet> Parser { get { return _parser; } }

            private ulong totalBet_;
            public ulong TotalBet {
              get { return totalBet_; }
              set {
                totalBet_ = value;
              }
            }

            private ulong spinCount_;
            public ulong SpinCount {
              get { return spinCount_; }
              set {
                spinCount_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (TotalBet != 0UL) {
                output.WriteRawTag(8);
                output.WriteUInt64(TotalBet);
              }
              if (SpinCount != 0UL) {
                output.WriteRawTag(16);
                output.WriteUInt64(SpinCount);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (TotalBet != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalBet);
              }
              if (SpinCount != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SpinCount);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    TotalBet = input.ReadUInt64();
                    break;
                  }
                  case 16: {
                    SpinCount = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed class LinkData : pb::IMessage {
        private static readonly pb::MessageParser<LinkData> _parser = new pb::MessageParser<LinkData>(() => new LinkData());
        public static pb::MessageParser<LinkData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.LinkData.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.LinkData.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.LinkData.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.LinkData.Types.Item>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PelicanGameResultExtraInfo.Types.LinkData.Types.Item> Items {
          get { return items_; }
        }

        private static readonly pbc::MapField<uint, uint>.Codec _map_reelMapping_codec
            = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 18);
        private readonly pbc::MapField<uint, uint> reelMapping_ = new pbc::MapField<uint, uint>();
        /// <summary>
        /// linkReels轴映射
        /// </summary>
        public pbc::MapField<uint, uint> ReelMapping {
          get { return reelMapping_; }
        }

        private ulong fullWinRate_;
        /// <summary>
        /// 满屏额外grand奖励 jackpotId=4
        /// </summary>
        public ulong FullWinRate {
          get { return fullWinRate_; }
          set {
            fullWinRate_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          reelMapping_.WriteTo(output, _map_reelMapping_codec);
          if (FullWinRate != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(FullWinRate);
          }
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          size += reelMapping_.CalculateSize(_map_reelMapping_codec);
          if (FullWinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FullWinRate);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 18: {
                reelMapping_.AddEntriesFrom(input, _map_reelMapping_codec);
                break;
              }
              case 24: {
                FullWinRate = input.ReadUInt64();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LinkData message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private uint positionId_;
            /// <summary>
            /// 位置
            /// </summary>
            public uint PositionId {
              get { return positionId_; }
              set {
                positionId_ = value;
              }
            }

            private uint symbolId_;
            /// <summary>
            /// 现实图标
            /// </summary>
            public uint SymbolId {
              get { return symbolId_; }
              set {
                symbolId_ = value;
              }
            }

            private ulong winRate_;
            /// <summary>
            /// 赢钱倍率
            /// </summary>
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            private uint jackpotId_;
            /// <summary>
            /// jackpot id
            /// </summary>
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private ulong jackpotPay_;
            /// <summary>
            /// jackpot pay
            /// </summary>
            public ulong JackpotPay {
              get { return jackpotPay_; }
              set {
                jackpotPay_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (PositionId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PositionId);
              }
              if (SymbolId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(SymbolId);
              }
              if (WinRate != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(WinRate);
              }
              if (JackpotId != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(JackpotId);
              }
              if (JackpotPay != 0UL) {
                output.WriteRawTag(40);
                output.WriteUInt64(JackpotPay);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (PositionId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
              }
              if (SymbolId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
              }
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              if (JackpotPay != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    PositionId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    SymbolId = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                  case 32: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    JackpotPay = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
