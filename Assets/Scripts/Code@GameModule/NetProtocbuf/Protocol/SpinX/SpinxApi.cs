// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spinx_api.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Enums
  /// <summary>
  /// 推送类型
  /// </summary>
  public enum NotificationType {
    /// <summary>
    /// 空，占位无用
    /// </summary>
    None = 0,
    /// <summary>
    /// 游戏列表更新了
    /// </summary>
    GameListUpdated = 1,
    /// <summary>
    /// 活动更新了
    /// </summary>
    ActivityUpdated = 2,
    /// <summary>
    /// 邮箱更新了
    /// </summary>
    EmailUpdated = 3,
    /// <summary>
    /// Jackpot通知
    /// </summary>
    Jackpot = 4,
    /// <summary>
    /// 奖励推送
    /// </summary>
    Rewards = 5,
    /// <summary>
    /// 任务进度更新推送
    /// </summary>
    QuestProgress = 6,
    /// <summary>
    /// bigWin通知
    /// </summary>
    BigWin = 7,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 获取用户数据
  /// </summary>
  public sealed class CGetUserProfile : pb::IMessage {
    private static readonly pb::MessageParser<CGetUserProfile> _parser = new pb::MessageParser<CGetUserProfile>(() => new CGetUserProfile());
    public static pb::MessageParser<CGetUserProfile> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 获取用户数据和配置
  /// </summary>
  public sealed class SGetUserProfile : pb::IMessage {
    private static readonly pb::MessageParser<SGetUserProfile> _parser = new pb::MessageParser<SGetUserProfile>(() => new SGetUserProfile());
    public static pb::MessageParser<SGetUserProfile> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 更新用户数据
  /// </summary>
  public sealed class CUpdateUserProfile : pb::IMessage {
    private static readonly pb::MessageParser<CUpdateUserProfile> _parser = new pb::MessageParser<CUpdateUserProfile>(() => new CUpdateUserProfile());
    public static pb::MessageParser<CUpdateUserProfile> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 更新用户数据
  /// </summary>
  public sealed class SUpdateUserProfile : pb::IMessage {
    private static readonly pb::MessageParser<SUpdateUserProfile> _parser = new pb::MessageParser<SUpdateUserProfile>(() => new SUpdateUserProfile());
    public static pb::MessageParser<SUpdateUserProfile> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 拉取游戏列表
  /// </summary>
  public sealed class CListGame : pb::IMessage {
    private static readonly pb::MessageParser<CListGame> _parser = new pb::MessageParser<CListGame>(() => new CListGame());
    public static pb::MessageParser<CListGame> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 拉取游戏列表
  /// </summary>
  public sealed class SListGame : pb::IMessage {
    private static readonly pb::MessageParser<SListGame> _parser = new pb::MessageParser<SListGame>(() => new SListGame());
    public static pb::MessageParser<SListGame> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.GameConfig> _repeated_games_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.GameConfig.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GameConfig> games_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GameConfig>();
    /// <summary>
    /// 游戏列表
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GameConfig> Games {
      get { return games_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      games_.WriteTo(output, _repeated_games_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += games_.CalculateSize(_repeated_games_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            games_.AddEntriesFrom(input, _repeated_games_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 进入游戏
  /// </summary>
  public sealed class CEnterGame : pb::IMessage {
    private static readonly pb::MessageParser<CEnterGame> _parser = new pb::MessageParser<CEnterGame>(() => new CEnterGame());
    public static pb::MessageParser<CEnterGame> Parser { get { return _parser; } }

    private string gameId_ = "";
    /// <summary>
    /// 游戏id
    /// </summary>
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.GameMode gameMode_ = 0;
    /// <summary>
    /// 模式（未启用）
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.GameMode GameMode {
      get { return gameMode_; }
      set {
        gameMode_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GameId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameId);
      }
      if (GameMode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GameMode);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GameId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      if (GameMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameMode);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GameId = input.ReadString();
            break;
          }
          case 16: {
            gameMode_ = (global::DragonU3DSDK.Network.API.ILProtocol.GameMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 进入游戏
  /// </summary>
  public sealed class SEnterGame : pb::IMessage {
    private static readonly pb::MessageParser<SEnterGame> _parser = new pb::MessageParser<SEnterGame>(() => new SEnterGame());
    public static pb::MessageParser<SEnterGame> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.GameConfig> _repeated_gameConfigs_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.GameConfig.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GameConfig> gameConfigs_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GameConfig>();
    /// <summary>
    /// 游戏配置(可能有多个)
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GameConfig> GameConfigs {
      get { return gameConfigs_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.JackpotState> _repeated_jackpotStates_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.JackpotState.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.JackpotState> jackpotStates_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.JackpotState>();
    /// <summary>
    /// jackpot状态
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.JackpotState> JackpotStates {
      get { return jackpotStates_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.GameResult gameResult_;
    /// <summary>
    /// 游戏结果
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.GameResult GameResult {
      get { return gameResult_; }
      set {
        gameResult_ = value;
      }
    }

    private static readonly pb::FieldCodec<ulong> _repeated_ultraBets_codec
        = pb::FieldCodec.ForUInt64(42);
    private readonly pbc::RepeatedField<ulong> ultraBets_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// ultra bets
    /// </summary>
    public pbc::RepeatedField<ulong> UltraBets {
      get { return ultraBets_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      gameConfigs_.WriteTo(output, _repeated_gameConfigs_codec);
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
      jackpotStates_.WriteTo(output, _repeated_jackpotStates_codec);
      if (gameResult_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GameResult);
      }
      ultraBets_.WriteTo(output, _repeated_ultraBets_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += gameConfigs_.CalculateSize(_repeated_gameConfigs_codec);
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      size += jackpotStates_.CalculateSize(_repeated_jackpotStates_codec);
      if (gameResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameResult);
      }
      size += ultraBets_.CalculateSize(_repeated_ultraBets_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            gameConfigs_.AddEntriesFrom(input, _repeated_gameConfigs_codec);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 26: {
            jackpotStates_.AddEntriesFrom(input, _repeated_jackpotStates_codec);
            break;
          }
          case 34: {
            if (gameResult_ == null) {
              gameResult_ = new global::DragonU3DSDK.Network.API.ILProtocol.GameResult();
            }
            input.ReadMessage(gameResult_);
            break;
          }
          case 42:
          case 40: {
            ultraBets_.AddEntriesFrom(input, _repeated_ultraBets_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 离开游戏
  /// </summary>
  public sealed class CLeaveGame : pb::IMessage {
    private static readonly pb::MessageParser<CLeaveGame> _parser = new pb::MessageParser<CLeaveGame>(() => new CLeaveGame());
    public static pb::MessageParser<CLeaveGame> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 离开游戏
  /// </summary>
  public sealed class SLeaveGame : pb::IMessage {
    private static readonly pb::MessageParser<SLeaveGame> _parser = new pb::MessageParser<SLeaveGame>(() => new SLeaveGame());
    public static pb::MessageParser<SLeaveGame> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// spin
  /// </summary>
  public sealed class CSpin : pb::IMessage {
    private static readonly pb::MessageParser<CSpin> _parser = new pb::MessageParser<CSpin>(() => new CSpin());
    public static pb::MessageParser<CSpin> Parser { get { return _parser; } }

    private ulong bet_;
    /// <summary>
    /// 投注额
    /// </summary>
    public ulong Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    private string cheatId_ = "";
    /// <summary>
    /// 固定结果id（仅测试服生效 ）
    /// </summary>
    public string CheatId {
      get { return cheatId_; }
      set {
        cheatId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string payControl_ = "";
    /// <summary>
    /// 赔付控制（仅测试服生效）
    /// </summary>
    public string PayControl {
      get { return payControl_; }
      set {
        payControl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string requestId_ = "";
    /// <summary>
    /// 请求唯一标识
    /// </summary>
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string replayId_ = "";
    /// <summary>
    /// 请求回放id（仅测试服生效)
    /// </summary>
    public string ReplayId {
      get { return replayId_; }
      set {
        replayId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string userGroup_ = "";
    /// <summary>
    /// 用户分层
    /// </summary>
    public string UserGroup {
      get { return userGroup_; }
      set {
        userGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Bet != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Bet);
      }
      if (CheatId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CheatId);
      }
      if (PayControl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PayControl);
      }
      if (RequestId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RequestId);
      }
      if (ReplayId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ReplayId);
      }
      if (UserGroup.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserGroup);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Bet != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
      }
      if (CheatId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CheatId);
      }
      if (PayControl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayControl);
      }
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (ReplayId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReplayId);
      }
      if (UserGroup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserGroup);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Bet = input.ReadUInt64();
            break;
          }
          case 18: {
            CheatId = input.ReadString();
            break;
          }
          case 26: {
            PayControl = input.ReadString();
            break;
          }
          case 34: {
            RequestId = input.ReadString();
            break;
          }
          case 42: {
            ReplayId = input.ReadString();
            break;
          }
          case 50: {
            UserGroup = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// spin
  /// </summary>
  public sealed class SSpin : pb::IMessage {
    private static readonly pb::MessageParser<SSpin> _parser = new pb::MessageParser<SSpin>(() => new SSpin());
    public static pb::MessageParser<SSpin> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.GameResult gameResult_;
    /// <summary>
    /// 游戏结果
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.GameResult GameResult {
      get { return gameResult_; }
      set {
        gameResult_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct> _repeated_systemContent_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct> systemContent_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct>();
    /// <summary>
    /// 系统内容
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct> SystemContent {
      get { return systemContent_; }
    }

    private string requestId_ = "";
    /// <summary>
    /// 请求唯一标识
    /// </summary>
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (gameResult_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameResult);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
      systemContent_.WriteTo(output, _repeated_systemContent_codec);
      if (RequestId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RequestId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (gameResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameResult);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      size += systemContent_.CalculateSize(_repeated_systemContent_codec);
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameResult_ == null) {
              gameResult_ = new global::DragonU3DSDK.Network.API.ILProtocol.GameResult();
            }
            input.ReadMessage(gameResult_);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 26: {
            systemContent_.AddEntriesFrom(input, _repeated_systemContent_codec);
            break;
          }
          case 34: {
            RequestId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 特殊游戏
  /// </summary>
  public sealed class CBonusProcess : pb::IMessage {
    private static readonly pb::MessageParser<CBonusProcess> _parser = new pb::MessageParser<CBonusProcess>(() => new CBonusProcess());
    public static pb::MessageParser<CBonusProcess> Parser { get { return _parser; } }

    private string json_ = "";
    /// <summary>
    /// json内容格式参考spinx_bonus_info.proto中对应游戏的定义，***Request
    /// </summary>
    public string Json {
      get { return json_; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string cheatId_ = "";
    /// <summary>
    /// 固定结果id（仅测试服生效 ）
    /// </summary>
    public string CheatId {
      get { return cheatId_; }
      set {
        cheatId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct pb_;
    /// <summary>
    /// pb格式的Bonus请求
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct Pb {
      get { return pb_; }
      set {
        pb_ = value;
      }
    }

    private string requestId_ = "";
    /// <summary>
    /// 请求唯一标识
    /// </summary>
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string userGroup_ = "";
    /// <summary>
    /// 用户分层
    /// </summary>
    public string UserGroup {
      get { return userGroup_; }
      set {
        userGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Json.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Json);
      }
      if (CheatId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CheatId);
      }
      if (pb_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pb);
      }
      if (RequestId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RequestId);
      }
      if (UserGroup.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserGroup);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Json.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      if (CheatId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CheatId);
      }
      if (pb_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pb);
      }
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (UserGroup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserGroup);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Json = input.ReadString();
            break;
          }
          case 18: {
            CheatId = input.ReadString();
            break;
          }
          case 26: {
            if (pb_ == null) {
              pb_ = new global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct();
            }
            input.ReadMessage(pb_);
            break;
          }
          case 34: {
            RequestId = input.ReadString();
            break;
          }
          case 42: {
            UserGroup = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// </summary>
  public sealed class SBonusProcess : pb::IMessage {
    private static readonly pb::MessageParser<SBonusProcess> _parser = new pb::MessageParser<SBonusProcess>(() => new SBonusProcess());
    public static pb::MessageParser<SBonusProcess> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.GameResult gameResult_;
    /// <summary>
    /// 游戏结果
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.GameResult GameResult {
      get { return gameResult_; }
      set {
        gameResult_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct> _repeated_systemContent_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct> systemContent_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct>();
    /// <summary>
    /// 系统内容
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct> SystemContent {
      get { return systemContent_; }
    }

    private string requestId_ = "";
    /// <summary>
    /// 请求唯一标识
    /// </summary>
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (gameResult_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameResult);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
      systemContent_.WriteTo(output, _repeated_systemContent_codec);
      if (RequestId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RequestId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (gameResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameResult);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      size += systemContent_.CalculateSize(_repeated_systemContent_codec);
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameResult_ == null) {
              gameResult_ = new global::DragonU3DSDK.Network.API.ILProtocol.GameResult();
            }
            input.ReadMessage(gameResult_);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 26: {
            systemContent_.AddEntriesFrom(input, _repeated_systemContent_codec);
            break;
          }
          case 34: {
            RequestId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 最后一步流程结算
  /// </summary>
  public sealed class CSettleProcess : pb::IMessage {
    private static readonly pb::MessageParser<CSettleProcess> _parser = new pb::MessageParser<CSettleProcess>(() => new CSettleProcess());
    public static pb::MessageParser<CSettleProcess> Parser { get { return _parser; } }

    private string requestId_ = "";
    /// <summary>
    /// 请求唯一标识
    /// </summary>
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string userGroup_ = "";
    /// <summary>
    /// 用户分层
    /// </summary>
    public string UserGroup {
      get { return userGroup_; }
      set {
        userGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string cheatId_ = "";
    /// <summary>
    /// 固定结果id（仅测试服生效 ）
    /// </summary>
    public string CheatId {
      get { return cheatId_; }
      set {
        cheatId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestId);
      }
      if (UserGroup.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserGroup);
      }
      if (CheatId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CheatId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (UserGroup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserGroup);
      }
      if (CheatId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CheatId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RequestId = input.ReadString();
            break;
          }
          case 18: {
            UserGroup = input.ReadString();
            break;
          }
          case 26: {
            CheatId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// </summary>
  public sealed class SSettleProcess : pb::IMessage {
    private static readonly pb::MessageParser<SSettleProcess> _parser = new pb::MessageParser<SSettleProcess>(() => new SSettleProcess());
    public static pb::MessageParser<SSettleProcess> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.GameResult gameResult_;
    /// <summary>
    /// 游戏结果
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.GameResult GameResult {
      get { return gameResult_; }
      set {
        gameResult_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct> _repeated_systemContent_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct> systemContent_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct>();
    /// <summary>
    /// 系统内容
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct> SystemContent {
      get { return systemContent_; }
    }

    private string requestId_ = "";
    /// <summary>
    /// 请求唯一标识
    /// </summary>
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (gameResult_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameResult);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
      systemContent_.WriteTo(output, _repeated_systemContent_codec);
      if (RequestId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RequestId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (gameResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameResult);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      size += systemContent_.CalculateSize(_repeated_systemContent_codec);
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameResult_ == null) {
              gameResult_ = new global::DragonU3DSDK.Network.API.ILProtocol.GameResult();
            }
            input.ReadMessage(gameResult_);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 26: {
            systemContent_.AddEntriesFrom(input, _repeated_systemContent_codec);
            break;
          }
          case 34: {
            RequestId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 特殊流程 可以游离于正常状态
  /// </summary>
  public sealed class CSpecialProcess : pb::IMessage {
    private static readonly pb::MessageParser<CSpecialProcess> _parser = new pb::MessageParser<CSpecialProcess>(() => new CSpecialProcess());
    public static pb::MessageParser<CSpecialProcess> Parser { get { return _parser; } }

    private string requestId_ = "";
    /// <summary>
    /// 请求唯一标识
    /// </summary>
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string userGroup_ = "";
    /// <summary>
    /// 用户分层
    /// </summary>
    public string UserGroup {
      get { return userGroup_; }
      set {
        userGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string cheatId_ = "";
    /// <summary>
    /// 固定结果id（仅测试服生效 ）
    /// </summary>
    public string CheatId {
      get { return cheatId_; }
      set {
        cheatId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string json_ = "";
    /// <summary>
    /// json
    /// </summary>
    public string Json {
      get { return json_; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestId);
      }
      if (UserGroup.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserGroup);
      }
      if (CheatId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CheatId);
      }
      if (Json.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Json);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (UserGroup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserGroup);
      }
      if (CheatId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CheatId);
      }
      if (Json.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RequestId = input.ReadString();
            break;
          }
          case 18: {
            UserGroup = input.ReadString();
            break;
          }
          case 26: {
            CheatId = input.ReadString();
            break;
          }
          case 34: {
            Json = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// </summary>
  public sealed class SSpecialProcess : pb::IMessage {
    private static readonly pb::MessageParser<SSpecialProcess> _parser = new pb::MessageParser<SSpecialProcess>(() => new SSpecialProcess());
    public static pb::MessageParser<SSpecialProcess> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.GameResult gameResult_;
    /// <summary>
    /// 游戏结果
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.GameResult GameResult {
      get { return gameResult_; }
      set {
        gameResult_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct> _repeated_systemContent_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct> systemContent_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct>();
    /// <summary>
    /// 系统内容
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct> SystemContent {
      get { return systemContent_; }
    }

    private string requestId_ = "";
    /// <summary>
    /// 请求唯一标识
    /// </summary>
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (gameResult_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameResult);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
      systemContent_.WriteTo(output, _repeated_systemContent_codec);
      if (RequestId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RequestId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (gameResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameResult);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      size += systemContent_.CalculateSize(_repeated_systemContent_codec);
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameResult_ == null) {
              gameResult_ = new global::DragonU3DSDK.Network.API.ILProtocol.GameResult();
            }
            input.ReadMessage(gameResult_);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 26: {
            systemContent_.AddEntriesFrom(input, _repeated_systemContent_codec);
            break;
          }
          case 34: {
            RequestId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// debug协议
  /// </summary>
  public sealed class CDebug : pb::IMessage {
    private static readonly pb::MessageParser<CDebug> _parser = new pb::MessageParser<CDebug>(() => new CDebug());
    public static pb::MessageParser<CDebug> Parser { get { return _parser; } }

    private string json_ = "";
    public string Json {
      get { return json_; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Json.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Json);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Json.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Json = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SDebug : pb::IMessage {
    private static readonly pb::MessageParser<SDebug> _parser = new pb::MessageParser<SDebug>(() => new SDebug());
    public static pb::MessageParser<SDebug> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private string json_ = "";
    /// <summary>
    /// 附加返回信息
    /// </summary>
    public string Json {
      get { return json_; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserProfile);
      }
      if (Json.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Json);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      if (Json.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 18: {
            Json = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CSystem : pb::IMessage {
    private static readonly pb::MessageParser<CSystem> _parser = new pb::MessageParser<CSystem>(() => new CSystem());
    public static pb::MessageParser<CSystem> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SSystem : pb::IMessage {
    private static readonly pb::MessageParser<SSystem> _parser = new pb::MessageParser<SSystem>(() => new SSystem());
    public static pb::MessageParser<SSystem> Parser { get { return _parser; } }

    private string json_ = "";
    public string Json {
      get { return json_; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Json.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Json);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Json.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Json = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// json协议入口
  /// </summary>
  public sealed class CProtocolEntry : pb::IMessage {
    private static readonly pb::MessageParser<CProtocolEntry> _parser = new pb::MessageParser<CProtocolEntry>(() => new CProtocolEntry());
    public static pb::MessageParser<CProtocolEntry> Parser { get { return _parser; } }

    private string protocol_ = "";
    /// <summary>
    /// 协议名(C开头的那个 )
    /// </summary>
    public string Protocol {
      get { return protocol_; }
      set {
        protocol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string json_ = "";
    /// <summary>
    /// 协议内容（json格式）
    /// </summary>
    public string Json {
      get { return json_; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Protocol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Protocol);
      }
      if (Json.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Json);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Protocol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Protocol);
      }
      if (Json.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Protocol = input.ReadString();
            break;
          }
          case 18: {
            Json = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// json协议入口
  /// </summary>
  public sealed class SProtocolEntry : pb::IMessage {
    private static readonly pb::MessageParser<SProtocolEntry> _parser = new pb::MessageParser<SProtocolEntry>(() => new SProtocolEntry());
    public static pb::MessageParser<SProtocolEntry> Parser { get { return _parser; } }

    private string protocl_ = "";
    /// <summary>
    /// 协议名(S开头的那个)
    /// </summary>
    public string Protocl {
      get { return protocl_; }
      set {
        protocl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string json_ = "";
    /// <summary>
    /// 返回的协议内容
    /// </summary>
    public string Json {
      get { return json_; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Protocl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Protocl);
      }
      if (Json.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Json);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Protocl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Protocl);
      }
      if (Json.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Protocl = input.ReadString();
            break;
          }
          case 18: {
            Json = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 推送
  /// </summary>
  public sealed class PNotification : pb::IMessage {
    private static readonly pb::MessageParser<PNotification> _parser = new pb::MessageParser<PNotification>(() => new PNotification());
    public static pb::MessageParser<PNotification> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.NotificationType notificationType_ = 0;
    /// <summary>
    /// 推送类型
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.NotificationType NotificationType {
      get { return notificationType_; }
      set {
        notificationType_ = value;
      }
    }

    private string json_ = "";
    /// <summary>
    /// json格式通知
    /// </summary>
    public string Json {
      get { return json_; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct pb_;
    /// <summary>
    /// pb格式通知
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct Pb {
      get { return pb_; }
      set {
        pb_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NotificationType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) NotificationType);
      }
      if (Json.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Json);
      }
      if (pb_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pb);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (NotificationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NotificationType);
      }
      if (Json.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      if (pb_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pb);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            notificationType_ = (global::DragonU3DSDK.Network.API.ILProtocol.NotificationType) input.ReadEnum();
            break;
          }
          case 18: {
            Json = input.ReadString();
            break;
          }
          case 26: {
            if (pb_ == null) {
              pb_ = new global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct();
            }
            input.ReadMessage(pb_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 根据facebook账号获取对应的角色信息
  /// </summary>
  public sealed class CGetUserInfoByFacebook : pb::IMessage {
    private static readonly pb::MessageParser<CGetUserInfoByFacebook> _parser = new pb::MessageParser<CGetUserInfoByFacebook>(() => new CGetUserInfoByFacebook());
    public static pb::MessageParser<CGetUserInfoByFacebook> Parser { get { return _parser; } }

    private string facebookToken_ = "";
    public string FacebookToken {
      get { return facebookToken_; }
      set {
        facebookToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FacebookToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FacebookToken);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (FacebookToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FacebookToken);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FacebookToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SGetUserInfoByFacebook : pb::IMessage {
    private static readonly pb::MessageParser<SGetUserInfoByFacebook> _parser = new pb::MessageParser<SGetUserInfoByFacebook>(() => new SGetUserInfoByFacebook());
    public static pb::MessageParser<SGetUserInfoByFacebook> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private string facebookId_ = "";
    public string FacebookId {
      get { return facebookId_; }
      set {
        facebookId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string facebookName_ = "";
    public string FacebookName {
      get { return facebookName_; }
      set {
        facebookName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string facebookEmail_ = "";
    public string FacebookEmail {
      get { return facebookEmail_; }
      set {
        facebookEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserProfile);
      }
      if (FacebookId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FacebookId);
      }
      if (FacebookName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FacebookName);
      }
      if (FacebookEmail.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FacebookEmail);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      if (FacebookId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FacebookId);
      }
      if (FacebookName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FacebookName);
      }
      if (FacebookEmail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FacebookEmail);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 18: {
            FacebookId = input.ReadString();
            break;
          }
          case 26: {
            FacebookName = input.ReadString();
            break;
          }
          case 34: {
            FacebookEmail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CFulfillBigWinMultiple : pb::IMessage {
    private static readonly pb::MessageParser<CFulfillBigWinMultiple> _parser = new pb::MessageParser<CFulfillBigWinMultiple>(() => new CFulfillBigWinMultiple());
    public static pb::MessageParser<CFulfillBigWinMultiple> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SFulfillBigWinMultiple : pb::IMessage {
    private static readonly pb::MessageParser<SFulfillBigWinMultiple> _parser = new pb::MessageParser<SFulfillBigWinMultiple>(() => new SFulfillBigWinMultiple());
    public static pb::MessageParser<SFulfillBigWinMultiple> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  public sealed class CFulfillExtraFreeSpin : pb::IMessage {
    private static readonly pb::MessageParser<CFulfillExtraFreeSpin> _parser = new pb::MessageParser<CFulfillExtraFreeSpin>(() => new CFulfillExtraFreeSpin());
    public static pb::MessageParser<CFulfillExtraFreeSpin> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SFulfillExtraFreeSpin : pb::IMessage {
    private static readonly pb::MessageParser<SFulfillExtraFreeSpin> _parser = new pb::MessageParser<SFulfillExtraFreeSpin>(() => new SFulfillExtraFreeSpin());
    public static pb::MessageParser<SFulfillExtraFreeSpin> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.GameResult gameResult_;
    /// <summary>
    /// 游戏结果; 简单处理下 这里头只有freeSpinInfo数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.GameResult GameResult {
      get { return gameResult_; }
      set {
        gameResult_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (gameResult_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameResult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (gameResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameResult);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameResult_ == null) {
              gameResult_ = new global::DragonU3DSDK.Network.API.ILProtocol.GameResult();
            }
            input.ReadMessage(gameResult_);
            break;
          }
        }
      }
    }

  }

  public sealed class CFulfillExtraWinBonus : pb::IMessage {
    private static readonly pb::MessageParser<CFulfillExtraWinBonus> _parser = new pb::MessageParser<CFulfillExtraWinBonus>(() => new CFulfillExtraWinBonus());
    public static pb::MessageParser<CFulfillExtraWinBonus> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SFulfillExtraWinBonus : pb::IMessage {
    private static readonly pb::MessageParser<SFulfillExtraWinBonus> _parser = new pb::MessageParser<SFulfillExtraWinBonus>(() => new SFulfillExtraWinBonus());
    public static pb::MessageParser<SFulfillExtraWinBonus> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
