// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortunex_ad_strategy.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Messages
  public sealed class AdStrategy : pb::IMessage {
    private static readonly pb::MessageParser<AdStrategy> _parser = new pb::MessageParser<AdStrategy>(() => new AdStrategy());
    public static pb::MessageParser<AdStrategy> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.AdStrategy.Types.Type type_ = 0;
    /// <summary>
    /// 类型
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.AdStrategy.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private string placeId_ = "";
    /// <summary>
    /// 广告位
    /// </summary>
    public string PlaceId {
      get { return placeId_; }
      set {
        placeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<uint> _repeated_multiples_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> multiples_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// MULTIPLE_BIG_WIN
    /// </summary>
    public pbc::RepeatedField<uint> Multiples {
      get { return multiples_; }
    }

    private uint multipleIndex_;
    /// <summary>
    /// multiple 最后结果
    /// </summary>
    public uint MultipleIndex {
      get { return multipleIndex_; }
      set {
        multipleIndex_ = value;
      }
    }

    private ulong bigWinBase_;
    /// <summary>
    /// multiple big win base
    /// </summary>
    public ulong BigWinBase {
      get { return bigWinBase_; }
      set {
        bigWinBase_ = value;
      }
    }

    private uint extraFreeSpinCount_;
    /// <summary>
    /// EXTRA_FREE_SPIN
    /// </summary>
    public uint ExtraFreeSpinCount {
      get { return extraFreeSpinCount_; }
      set {
        extraFreeSpinCount_ = value;
      }
    }

    private ulong extraWinBonusBase_;
    /// <summary>
    /// EXTRA_WIN_BONUS
    /// </summary>
    public ulong ExtraWinBonusBase {
      get { return extraWinBonusBase_; }
      set {
        extraWinBonusBase_ = value;
      }
    }

    private ulong extraWinBonusPercent_;
    /// <summary>
    /// extra win bonus
    /// </summary>
    public ulong ExtraWinBonusPercent {
      get { return extraWinBonusPercent_; }
      set {
        extraWinBonusPercent_ = value;
      }
    }

    private ulong extraWinBonusWin_;
    /// <summary>
    /// extra win bonus
    /// </summary>
    public ulong ExtraWinBonusWin {
      get { return extraWinBonusWin_; }
      set {
        extraWinBonusWin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (PlaceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlaceId);
      }
      multiples_.WriteTo(output, _repeated_multiples_codec);
      if (MultipleIndex != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MultipleIndex);
      }
      if (BigWinBase != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(BigWinBase);
      }
      if (ExtraFreeSpinCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExtraFreeSpinCount);
      }
      if (ExtraWinBonusBase != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ExtraWinBonusBase);
      }
      if (ExtraWinBonusPercent != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(ExtraWinBonusPercent);
      }
      if (ExtraWinBonusWin != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(ExtraWinBonusWin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (PlaceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlaceId);
      }
      size += multiples_.CalculateSize(_repeated_multiples_codec);
      if (MultipleIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MultipleIndex);
      }
      if (BigWinBase != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BigWinBase);
      }
      if (ExtraFreeSpinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExtraFreeSpinCount);
      }
      if (ExtraWinBonusBase != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExtraWinBonusBase);
      }
      if (ExtraWinBonusPercent != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExtraWinBonusPercent);
      }
      if (ExtraWinBonusWin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExtraWinBonusWin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::DragonU3DSDK.Network.API.ILProtocol.AdStrategy.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            PlaceId = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            multiples_.AddEntriesFrom(input, _repeated_multiples_codec);
            break;
          }
          case 32: {
            MultipleIndex = input.ReadUInt32();
            break;
          }
          case 40: {
            BigWinBase = input.ReadUInt64();
            break;
          }
          case 48: {
            ExtraFreeSpinCount = input.ReadUInt32();
            break;
          }
          case 56: {
            ExtraWinBonusBase = input.ReadUInt64();
            break;
          }
          case 64: {
            ExtraWinBonusPercent = input.ReadUInt64();
            break;
          }
          case 72: {
            ExtraWinBonusWin = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AdStrategy message type.</summary>
    public static class Types {
      public enum Type {
        None = 0,
        MultipleBigWin = 1,
        ExtraFreeSpin = 2,
        ExtraWinBonus = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
