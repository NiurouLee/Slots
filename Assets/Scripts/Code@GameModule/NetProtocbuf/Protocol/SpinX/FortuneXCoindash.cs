// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortune_x_coindash.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Messages
  public sealed class CoinDashInfo : pb::IMessage {
    private static readonly pb::MessageParser<CoinDashInfo> _parser = new pb::MessageParser<CoinDashInfo>(() => new CoinDashInfo());
    public static pb::MessageParser<CoinDashInfo> Parser { get { return _parser; } }

    private uint confId_;
    /// <summary>
    /// 此时间配置的ID，用于获取支付项列表
    /// </summary>
    public uint ConfId {
      get { return confId_; }
      set {
        confId_ = value;
      }
    }

    private uint startAt_;
    /// <summary>
    /// 开始时间点，单位秒
    /// </summary>
    public uint StartAt {
      get { return startAt_; }
      set {
        startAt_ = value;
      }
    }

    private uint endAt_;
    /// <summary>
    /// 结束时间点，单位秒
    /// </summary>
    public uint EndAt {
      get { return endAt_; }
      set {
        endAt_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.CoinDashInfo.Types.Goods> _repeated_goods_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.CoinDashInfo.Types.Goods.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CoinDashInfo.Types.Goods> goods_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CoinDashInfo.Types.Goods>();
    /// <summary>
    /// 商品列表,长度为5
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CoinDashInfo.Types.Goods> Goods {
      get { return goods_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ConfId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ConfId);
      }
      if (StartAt != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartAt);
      }
      if (EndAt != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(EndAt);
      }
      goods_.WriteTo(output, _repeated_goods_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (ConfId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfId);
      }
      if (StartAt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartAt);
      }
      if (EndAt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndAt);
      }
      size += goods_.CalculateSize(_repeated_goods_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ConfId = input.ReadUInt32();
            break;
          }
          case 16: {
            StartAt = input.ReadUInt32();
            break;
          }
          case 24: {
            EndAt = input.ReadUInt32();
            break;
          }
          case 34: {
            goods_.AddEntriesFrom(input, _repeated_goods_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CoinDashInfo message type.</summary>
    public static class Types {
      public sealed class Goods : pb::IMessage {
        private static readonly pb::MessageParser<Goods> _parser = new pb::MessageParser<Goods>(() => new Goods());
        public static pb::MessageParser<Goods> Parser { get { return _parser; } }

        private uint id_;
        /// <summary>
        /// ID 用于购买免费的商品
        /// </summary>
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        private bool isFree_;
        /// <summary>
        /// 是否是免费商品
        /// </summary>
        public bool IsFree {
          get { return isFree_; }
          set {
            isFree_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.Reward freeRewards_;
        /// <summary>
        /// isFree = true时读取
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.Reward FreeRewards {
          get { return freeRewards_; }
          set {
            freeRewards_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig shopItemConfig_;
        /// <summary>
        /// 支付项，isFree=false时读取
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig ShopItemConfig {
          get { return shopItemConfig_; }
          set {
            shopItemConfig_ = value;
          }
        }

        private bool hasBought_;
        /// <summary>
        /// 是否购买过
        /// </summary>
        public bool HasBought {
          get { return hasBought_; }
          set {
            hasBought_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (IsFree != false) {
            output.WriteRawTag(16);
            output.WriteBool(IsFree);
          }
          if (freeRewards_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(FreeRewards);
          }
          if (shopItemConfig_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(ShopItemConfig);
          }
          if (HasBought != false) {
            output.WriteRawTag(40);
            output.WriteBool(HasBought);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (IsFree != false) {
            size += 1 + 1;
          }
          if (freeRewards_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreeRewards);
          }
          if (shopItemConfig_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShopItemConfig);
          }
          if (HasBought != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                IsFree = input.ReadBool();
                break;
              }
              case 26: {
                if (freeRewards_ == null) {
                  freeRewards_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
                }
                input.ReadMessage(freeRewards_);
                break;
              }
              case 34: {
                if (shopItemConfig_ == null) {
                  shopItemConfig_ = new global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig();
                }
                input.ReadMessage(shopItemConfig_);
                break;
              }
              case 40: {
                HasBought = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 获取coindash的配置,此接口合并在CGetInfoBeforeEnterLobby中
  /// </summary>
  public sealed class CGetCoinDashInfo : pb::IMessage {
    private static readonly pb::MessageParser<CGetCoinDashInfo> _parser = new pb::MessageParser<CGetCoinDashInfo>(() => new CGetCoinDashInfo());
    public static pb::MessageParser<CGetCoinDashInfo> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SGetCoinDashInfo : pb::IMessage {
    private static readonly pb::MessageParser<SGetCoinDashInfo> _parser = new pb::MessageParser<SGetCoinDashInfo>(() => new SGetCoinDashInfo());
    public static pb::MessageParser<SGetCoinDashInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.CoinDashInfo coinDashInfo_;
    /// <summary>
    /// coinDash，仅将来及现在有该活动时不为null
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.CoinDashInfo CoinDashInfo {
      get { return coinDashInfo_; }
      set {
        coinDashInfo_ = value;
      }
    }

    private uint serverTimeSeconds_;
    /// <summary>
    /// 服务端时间
    /// </summary>
    public uint ServerTimeSeconds {
      get { return serverTimeSeconds_; }
      set {
        serverTimeSeconds_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (coinDashInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CoinDashInfo);
      }
      if (ServerTimeSeconds != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ServerTimeSeconds);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (coinDashInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CoinDashInfo);
      }
      if (ServerTimeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTimeSeconds);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (coinDashInfo_ == null) {
              coinDashInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.CoinDashInfo();
            }
            input.ReadMessage(coinDashInfo_);
            break;
          }
          case 16: {
            ServerTimeSeconds = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 购买coindash的免费商品
  /// </summary>
  public sealed class CBuyCoinDashFreeGoods : pb::IMessage {
    private static readonly pb::MessageParser<CBuyCoinDashFreeGoods> _parser = new pb::MessageParser<CBuyCoinDashFreeGoods>(() => new CBuyCoinDashFreeGoods());
    public static pb::MessageParser<CBuyCoinDashFreeGoods> Parser { get { return _parser; } }

    private uint goodsId_;
    /// <summary>
    /// 商品ID
    /// </summary>
    public uint GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (GoodsId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GoodsId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (GoodsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GoodsId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GoodsId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SBuyCoinDashFreeGoods : pb::IMessage {
    private static readonly pb::MessageParser<SBuyCoinDashFreeGoods> _parser = new pb::MessageParser<SBuyCoinDashFreeGoods>(() => new SBuyCoinDashFreeGoods());
    public static pb::MessageParser<SBuyCoinDashFreeGoods> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.CoinDashInfo coinDashInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.CoinDashInfo CoinDashInfo {
      get { return coinDashInfo_; }
      set {
        coinDashInfo_ = value;
      }
    }

    private uint serverTimeSeconds_;
    public uint ServerTimeSeconds {
      get { return serverTimeSeconds_; }
      set {
        serverTimeSeconds_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (reward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reward);
      }
      if (coinDashInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CoinDashInfo);
      }
      if (ServerTimeSeconds != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ServerTimeSeconds);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (coinDashInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CoinDashInfo);
      }
      if (ServerTimeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTimeSeconds);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reward_ == null) {
              reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(reward_);
            break;
          }
          case 18: {
            if (coinDashInfo_ == null) {
              coinDashInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.CoinDashInfo();
            }
            input.ReadMessage(coinDashInfo_);
            break;
          }
          case 24: {
            ServerTimeSeconds = input.ReadUInt32();
            break;
          }
          case 34: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
