// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortune_x_collect.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Enums
  /// <summary>
  /// 奖励状态
  /// </summary>
  public enum CardsRewardStat {
    /// <summary>
    /// 尚不能领取
    /// </summary>
    CannotReceive = 0,
    /// <summary>
    /// 可以领取
    /// </summary>
    CanReceive = 1,
    /// <summary>
    /// 已领取
    /// </summary>
    Received = 2,
  }

  #endregion

  #region Messages
  public sealed class Card : pb::IMessage {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    private uint cardId_;
    /// <summary>
    /// 卡牌ID
    /// </summary>
    public uint CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    /// 卡牌名称
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Card.Types.CardType type_ = 0;
    /// <summary>
    /// 卡牌类型
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Card.Types.CardType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private uint star_;
    /// <summary>
    /// 星级
    /// </summary>
    public uint Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    private uint count_;
    /// <summary>
    /// 拥有的个数
    /// </summary>
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    private bool isNew_;
    /// <summary>
    /// 是否是一张新卡（拥有卡，但是从没看过）
    /// </summary>
    public bool IsNew {
      get { return isNew_; }
      set {
        isNew_ = value;
      }
    }

    private uint recycleValue_;
    /// <summary>
    /// 在回收系统中能折算成多少能量
    /// </summary>
    public uint RecycleValue {
      get { return recycleValue_; }
      set {
        recycleValue_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CardId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (Star != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Star);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Count);
      }
      if (IsNew != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsNew);
      }
      if (RecycleValue != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RecycleValue);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Star);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (IsNew != false) {
        size += 1 + 1;
      }
      if (RecycleValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecycleValue);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            type_ = (global::DragonU3DSDK.Network.API.ILProtocol.Card.Types.CardType) input.ReadEnum();
            break;
          }
          case 32: {
            Star = input.ReadUInt32();
            break;
          }
          case 40: {
            Count = input.ReadUInt32();
            break;
          }
          case 48: {
            IsNew = input.ReadBool();
            break;
          }
          case 56: {
            RecycleValue = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Card message type.</summary>
    public static class Types {
      public enum CardType {
        /// <summary>
        /// 普卡
        /// </summary>
        Normal = 0,
        /// <summary>
        /// 金卡
        /// </summary>
        Golden = 1,
        /// <summary>
        /// lucky卡
        /// </summary>
        Lucky = 2,
        /// <summary>
        /// wild卡
        /// </summary>
        Wild = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// 卡册
  /// </summary>
  public sealed class CardSet : pb::IMessage {
    private static readonly pb::MessageParser<CardSet> _parser = new pb::MessageParser<CardSet>(() => new CardSet());
    public static pb::MessageParser<CardSet> Parser { get { return _parser; } }

    private uint setId_;
    /// <summary>
    /// 卡册ID
    /// </summary>
    public uint SetId {
      get { return setId_; }
      set {
        setId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Card.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Card> cards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Card>();
    /// <summary>
    /// 卡片列表
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Card> Cards {
      get { return cards_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward rewardForCollectAll_;
    /// <summary>
    ///集齐本卡册所有卡片后的奖励
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward RewardForCollectAll {
      get { return rewardForCollectAll_; }
      set {
        rewardForCollectAll_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.CardsRewardStat rewardForCollectAllStat_ = 0;
    /// <summary>
    /// 奖励的状态
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.CardsRewardStat RewardForCollectAllStat {
      get { return rewardForCollectAllStat_; }
      set {
        rewardForCollectAllStat_ = value;
      }
    }

    private uint cardsCountTotal_;
    /// <summary>
    /// 卡册内包含的卡片数
    /// </summary>
    public uint CardsCountTotal {
      get { return cardsCountTotal_; }
      set {
        cardsCountTotal_ = value;
      }
    }

    private uint cardsCountOwned_;
    /// <summary>
    /// 目前拥有的卡片数
    /// </summary>
    public uint CardsCountOwned {
      get { return cardsCountOwned_; }
      set {
        cardsCountOwned_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SetId);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (rewardForCollectAll_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RewardForCollectAll);
      }
      if (RewardForCollectAllStat != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RewardForCollectAllStat);
      }
      if (CardsCountTotal != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CardsCountTotal);
      }
      if (CardsCountOwned != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CardsCountOwned);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetId);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (rewardForCollectAll_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardForCollectAll);
      }
      if (RewardForCollectAllStat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RewardForCollectAllStat);
      }
      if (CardsCountTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardsCountTotal);
      }
      if (CardsCountOwned != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardsCountOwned);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SetId = input.ReadUInt32();
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 26: {
            if (rewardForCollectAll_ == null) {
              rewardForCollectAll_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(rewardForCollectAll_);
            break;
          }
          case 32: {
            rewardForCollectAllStat_ = (global::DragonU3DSDK.Network.API.ILProtocol.CardsRewardStat) input.ReadEnum();
            break;
          }
          case 40: {
            CardsCountTotal = input.ReadUInt32();
            break;
          }
          case 48: {
            CardsCountOwned = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CollectCardRewardsWhenSpin : pb::IMessage {
    private static readonly pb::MessageParser<CollectCardRewardsWhenSpin> _parser = new pb::MessageParser<CollectCardRewardsWhenSpin>(() => new CollectCardRewardsWhenSpin());
    public static pb::MessageParser<CollectCardRewardsWhenSpin> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (reward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reward);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reward_ == null) {
              reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(reward_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取所有卡册信息接口
  /// </summary>
  public sealed class CGetCardAlbumInfo : pb::IMessage {
    private static readonly pb::MessageParser<CGetCardAlbumInfo> _parser = new pb::MessageParser<CGetCardAlbumInfo>(() => new CGetCardAlbumInfo());
    public static pb::MessageParser<CGetCardAlbumInfo> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SGetCardAlbumInfo : pb::IMessage {
    private static readonly pb::MessageParser<SGetCardAlbumInfo> _parser = new pb::MessageParser<SGetCardAlbumInfo>(() => new SGetCardAlbumInfo());
    public static pb::MessageParser<SGetCardAlbumInfo> Parser { get { return _parser; } }

    private bool isFirstIn_;
    /// <summary>
    ///是否是第一次调用该接口
    /// </summary>
    public bool IsFirstIn {
      get { return isFirstIn_; }
      set {
        isFirstIn_ = value;
      }
    }

    private uint cardsCountTotal_;
    /// <summary>
    /// 所有卡册的总卡片数
    /// </summary>
    public uint CardsCountTotal {
      get { return cardsCountTotal_; }
      set {
        cardsCountTotal_ = value;
      }
    }

    private uint cardsCountOwned_;
    /// <summary>
    /// 目前拥有的卡片数
    /// </summary>
    public uint CardsCountOwned {
      get { return cardsCountOwned_; }
      set {
        cardsCountOwned_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward rewardForCollectAll_;
    /// <summary>
    /// 所有卡片集齐后奖励
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward RewardForCollectAll {
      get { return rewardForCollectAll_; }
      set {
        rewardForCollectAll_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.CardsRewardStat rewardForCollectAllStat_ = 0;
    /// <summary>
    /// 奖励的状态
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.CardsRewardStat RewardForCollectAllStat {
      get { return rewardForCollectAllStat_; }
      set {
        rewardForCollectAllStat_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.CardSet> _repeated_cardSets_codec
        = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.CardSet.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CardSet> cardSets_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CardSet>();
    /// <summary>
    /// 卡册列表
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.CardSet> CardSets {
      get { return cardSets_; }
    }

    private uint seasonId_;
    /// <summary>
    /// 赛季id,客户端暂时无用
    /// </summary>
    public uint SeasonId {
      get { return seasonId_; }
      set {
        seasonId_ = value;
      }
    }

    private ulong seasonStartAt_;
    /// <summary>
    /// 赛季开始时间戳
    /// </summary>
    public ulong SeasonStartAt {
      get { return seasonStartAt_; }
      set {
        seasonStartAt_ = value;
      }
    }

    private ulong seasonEndAt_;
    /// <summary>
    /// 赛季结束时间戳
    /// </summary>
    public ulong SeasonEndAt {
      get { return seasonEndAt_; }
      set {
        seasonEndAt_ = value;
      }
    }

    private uint cardLuckySpinCount_;
    /// <summary>
    /// luckySpin总次数
    /// </summary>
    public uint CardLuckySpinCount {
      get { return cardLuckySpinCount_; }
      set {
        cardLuckySpinCount_ = value;
      }
    }

    private uint usedCardLuckySpinCount_;
    /// <summary>
    /// 已经使用的luckySpin次数
    /// </summary>
    public uint UsedCardLuckySpinCount {
      get { return usedCardLuckySpinCount_; }
      set {
        usedCardLuckySpinCount_ = value;
      }
    }

    private uint seasonCountDown_;
    /// <summary>
    /// 结束倒计时，单位秒
    /// </summary>
    public uint SeasonCountDown {
      get { return seasonCountDown_; }
      set {
        seasonCountDown_ = value;
      }
    }

    private uint unlockLevel_;
    /// <summary>
    /// 卡片系统解锁等级
    /// </summary>
    public uint UnlockLevel {
      get { return unlockLevel_; }
      set {
        unlockLevel_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardAlbumInfo.Types.LuckyChallengeConfig> _repeated_luckyChallengeConfig_codec
        = pb::FieldCodec.ForMessage(122, global::DragonU3DSDK.Network.API.ILProtocol.SGetCardAlbumInfo.Types.LuckyChallengeConfig.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardAlbumInfo.Types.LuckyChallengeConfig> luckyChallengeConfig_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardAlbumInfo.Types.LuckyChallengeConfig>();
    /// <summary>
    /// luckyChanllenge的配置
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardAlbumInfo.Types.LuckyChallengeConfig> LuckyChallengeConfig {
      get { return luckyChallengeConfig_; }
    }

    private uint luckyChallengeProgress_;
    /// <summary>
    ///lucky challenge 进度
    /// </summary>
    public uint LuckyChallengeProgress {
      get { return luckyChallengeProgress_; }
      set {
        luckyChallengeProgress_ = value;
      }
    }

    private uint recycleGameCountDown_;
    /// <summary>
    /// 回收游戏倒计时，单位秒
    /// </summary>
    public uint RecycleGameCountDown {
      get { return recycleGameCountDown_; }
      set {
        recycleGameCountDown_ = value;
      }
    }

    private uint beginnersGuideStep_;
    /// <summary>
    /// 新手引导进度，默认为0
    /// </summary>
    public uint BeginnersGuideStep {
      get { return beginnersGuideStep_; }
      set {
        beginnersGuideStep_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardAlbumInfo.Types.CardProbobilityDisplayItem> _repeated_cardProbabilityDisplayList_codec
        = pb::FieldCodec.ForMessage(154, global::DragonU3DSDK.Network.API.ILProtocol.SGetCardAlbumInfo.Types.CardProbobilityDisplayItem.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardAlbumInfo.Types.CardProbobilityDisplayItem> cardProbabilityDisplayList_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardAlbumInfo.Types.CardProbobilityDisplayItem>();
    /// <summary>
    ///在spin中显示的概率配置
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardAlbumInfo.Types.CardProbobilityDisplayItem> CardProbabilityDisplayList {
      get { return cardProbabilityDisplayList_; }
    }

    private uint hatGameCountDown_;
    /// <summary>
    /// 帽子游戏倒计时，单位秒
    /// </summary>
    public uint HatGameCountDown {
      get { return hatGameCountDown_; }
      set {
        hatGameCountDown_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFirstIn != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsFirstIn);
      }
      if (CardsCountTotal != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CardsCountTotal);
      }
      if (CardsCountOwned != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CardsCountOwned);
      }
      if (rewardForCollectAll_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RewardForCollectAll);
      }
      if (RewardForCollectAllStat != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RewardForCollectAllStat);
      }
      cardSets_.WriteTo(output, _repeated_cardSets_codec);
      if (SeasonId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SeasonId);
      }
      if (SeasonStartAt != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(SeasonStartAt);
      }
      if (SeasonEndAt != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(SeasonEndAt);
      }
      if (CardLuckySpinCount != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CardLuckySpinCount);
      }
      if (UsedCardLuckySpinCount != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(UsedCardLuckySpinCount);
      }
      if (SeasonCountDown != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(SeasonCountDown);
      }
      if (UnlockLevel != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(UnlockLevel);
      }
      luckyChallengeConfig_.WriteTo(output, _repeated_luckyChallengeConfig_codec);
      if (LuckyChallengeProgress != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(LuckyChallengeProgress);
      }
      if (RecycleGameCountDown != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(RecycleGameCountDown);
      }
      if (BeginnersGuideStep != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(BeginnersGuideStep);
      }
      cardProbabilityDisplayList_.WriteTo(output, _repeated_cardProbabilityDisplayList_codec);
      if (HatGameCountDown != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(HatGameCountDown);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (IsFirstIn != false) {
        size += 1 + 1;
      }
      if (CardsCountTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardsCountTotal);
      }
      if (CardsCountOwned != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardsCountOwned);
      }
      if (rewardForCollectAll_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardForCollectAll);
      }
      if (RewardForCollectAllStat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RewardForCollectAllStat);
      }
      size += cardSets_.CalculateSize(_repeated_cardSets_codec);
      if (SeasonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeasonId);
      }
      if (SeasonStartAt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SeasonStartAt);
      }
      if (SeasonEndAt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SeasonEndAt);
      }
      if (CardLuckySpinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardLuckySpinCount);
      }
      if (UsedCardLuckySpinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsedCardLuckySpinCount);
      }
      if (SeasonCountDown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeasonCountDown);
      }
      if (UnlockLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnlockLevel);
      }
      size += luckyChallengeConfig_.CalculateSize(_repeated_luckyChallengeConfig_codec);
      if (LuckyChallengeProgress != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LuckyChallengeProgress);
      }
      if (RecycleGameCountDown != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RecycleGameCountDown);
      }
      if (BeginnersGuideStep != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BeginnersGuideStep);
      }
      size += cardProbabilityDisplayList_.CalculateSize(_repeated_cardProbabilityDisplayList_codec);
      if (HatGameCountDown != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HatGameCountDown);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsFirstIn = input.ReadBool();
            break;
          }
          case 24: {
            CardsCountTotal = input.ReadUInt32();
            break;
          }
          case 32: {
            CardsCountOwned = input.ReadUInt32();
            break;
          }
          case 42: {
            if (rewardForCollectAll_ == null) {
              rewardForCollectAll_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(rewardForCollectAll_);
            break;
          }
          case 48: {
            rewardForCollectAllStat_ = (global::DragonU3DSDK.Network.API.ILProtocol.CardsRewardStat) input.ReadEnum();
            break;
          }
          case 58: {
            cardSets_.AddEntriesFrom(input, _repeated_cardSets_codec);
            break;
          }
          case 64: {
            SeasonId = input.ReadUInt32();
            break;
          }
          case 72: {
            SeasonStartAt = input.ReadUInt64();
            break;
          }
          case 80: {
            SeasonEndAt = input.ReadUInt64();
            break;
          }
          case 88: {
            CardLuckySpinCount = input.ReadUInt32();
            break;
          }
          case 96: {
            UsedCardLuckySpinCount = input.ReadUInt32();
            break;
          }
          case 104: {
            SeasonCountDown = input.ReadUInt32();
            break;
          }
          case 112: {
            UnlockLevel = input.ReadUInt32();
            break;
          }
          case 122: {
            luckyChallengeConfig_.AddEntriesFrom(input, _repeated_luckyChallengeConfig_codec);
            break;
          }
          case 128: {
            LuckyChallengeProgress = input.ReadUInt32();
            break;
          }
          case 136: {
            RecycleGameCountDown = input.ReadUInt32();
            break;
          }
          case 144: {
            BeginnersGuideStep = input.ReadUInt32();
            break;
          }
          case 154: {
            cardProbabilityDisplayList_.AddEntriesFrom(input, _repeated_cardProbabilityDisplayList_codec);
            break;
          }
          case 160: {
            HatGameCountDown = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SGetCardAlbumInfo message type.</summary>
    public static class Types {
      public sealed class LuckyChallengeConfig : pb::IMessage {
        private static readonly pb::MessageParser<LuckyChallengeConfig> _parser = new pb::MessageParser<LuckyChallengeConfig>(() => new LuckyChallengeConfig());
        public static pb::MessageParser<LuckyChallengeConfig> Parser { get { return _parser; } }

        private uint independentLuckyCardCount_;
        /// <summary>
        /// 已获取lucky卡的个数
        /// </summary>
        public uint IndependentLuckyCardCount {
          get { return independentLuckyCardCount_; }
          set {
            independentLuckyCardCount_ = value;
          }
        }

        private uint luckySpinCount_;
        /// <summary>
        /// 获取不同的lucky卡达到该数量时，奖励luckyspin的次数
        /// </summary>
        public uint LuckySpinCount {
          get { return luckySpinCount_; }
          set {
            luckySpinCount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (IndependentLuckyCardCount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(IndependentLuckyCardCount);
          }
          if (LuckySpinCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(LuckySpinCount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (IndependentLuckyCardCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndependentLuckyCardCount);
          }
          if (LuckySpinCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LuckySpinCount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                IndependentLuckyCardCount = input.ReadUInt32();
                break;
              }
              case 16: {
                LuckySpinCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class CardProbobilityDisplayItem : pb::IMessage {
        private static readonly pb::MessageParser<CardProbobilityDisplayItem> _parser = new pb::MessageParser<CardProbobilityDisplayItem>(() => new CardProbobilityDisplayItem());
        public static pb::MessageParser<CardProbobilityDisplayItem> Parser { get { return _parser; } }

        private uint levelMin_;
        public uint LevelMin {
          get { return levelMin_; }
          set {
            levelMin_ = value;
          }
        }

        private uint levelMax_;
        public uint LevelMax {
          get { return levelMax_; }
          set {
            levelMax_ = value;
          }
        }

        private uint startBet_;
        public uint StartBet {
          get { return startBet_; }
          set {
            startBet_ = value;
          }
        }

        private uint betCount_;
        public uint BetCount {
          get { return betCount_; }
          set {
            betCount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (LevelMin != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(LevelMin);
          }
          if (LevelMax != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(LevelMax);
          }
          if (StartBet != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(StartBet);
          }
          if (BetCount != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(BetCount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (LevelMin != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelMin);
          }
          if (LevelMax != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelMax);
          }
          if (StartBet != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartBet);
          }
          if (BetCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BetCount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                LevelMin = input.ReadUInt32();
                break;
              }
              case 16: {
                LevelMax = input.ReadUInt32();
                break;
              }
              case 24: {
                StartBet = input.ReadUInt32();
                break;
              }
              case 32: {
                BetCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 领取集齐卡册的奖励
  /// </summary>
  public sealed class CAcceptCardReward : pb::IMessage {
    private static readonly pb::MessageParser<CAcceptCardReward> _parser = new pb::MessageParser<CAcceptCardReward>(() => new CAcceptCardReward());
    public static pb::MessageParser<CAcceptCardReward> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<uint> _repeated_setIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> setIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 卡册ID列表，传空表示获取所有已集齐的卡册奖励
    /// </summary>
    public pbc::RepeatedField<uint> SetIds {
      get { return setIds_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      setIds_.WriteTo(output, _repeated_setIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += setIds_.CalculateSize(_repeated_setIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            setIds_.AddEntriesFrom(input, _repeated_setIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SAcceptCardReward : pb::IMessage {
    private static readonly pb::MessageParser<SAcceptCardReward> _parser = new pb::MessageParser<SAcceptCardReward>(() => new SAcceptCardReward());
    public static pb::MessageParser<SAcceptCardReward> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SAcceptCardReward.Types.ReceivedCardSetReward> _repeated_receivedCardSetReward_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.SAcceptCardReward.Types.ReceivedCardSetReward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SAcceptCardReward.Types.ReceivedCardSetReward> receivedCardSetReward_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SAcceptCardReward.Types.ReceivedCardSetReward>();
    /// <summary>
    ///获取的集齐卡册奖励列表
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SAcceptCardReward.Types.ReceivedCardSetReward> ReceivedCardSetReward {
      get { return receivedCardSetReward_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_receivedCollectAllReward_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> receivedCollectAllReward_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    ///获取的集齐所有卡册的所有卡牌奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> ReceivedCollectAllReward {
      get { return receivedCollectAllReward_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      receivedCardSetReward_.WriteTo(output, _repeated_receivedCardSetReward_codec);
      receivedCollectAllReward_.WriteTo(output, _repeated_receivedCollectAllReward_codec);
      if (userProfile_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += receivedCardSetReward_.CalculateSize(_repeated_receivedCardSetReward_codec);
      size += receivedCollectAllReward_.CalculateSize(_repeated_receivedCollectAllReward_codec);
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            receivedCardSetReward_.AddEntriesFrom(input, _repeated_receivedCardSetReward_codec);
            break;
          }
          case 18: {
            receivedCollectAllReward_.AddEntriesFrom(input, _repeated_receivedCollectAllReward_codec);
            break;
          }
          case 26: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SAcceptCardReward message type.</summary>
    public static class Types {
      public sealed class ReceivedCardSetReward : pb::IMessage {
        private static readonly pb::MessageParser<ReceivedCardSetReward> _parser = new pb::MessageParser<ReceivedCardSetReward>(() => new ReceivedCardSetReward());
        public static pb::MessageParser<ReceivedCardSetReward> Parser { get { return _parser; } }

        private uint setId_;
        public uint SetId {
          get { return setId_; }
          set {
            setId_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
        public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
          get { return reward_; }
          set {
            reward_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (SetId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(SetId);
          }
          if (reward_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Reward);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (SetId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetId);
          }
          if (reward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                SetId = input.ReadUInt32();
                break;
              }
              case 18: {
                if (reward_ == null) {
                  reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
                }
                input.ReadMessage(reward_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 获取luckyspin的信息
  /// </summary>
  public sealed class CGetCardLuckySpinInfo : pb::IMessage {
    private static readonly pb::MessageParser<CGetCardLuckySpinInfo> _parser = new pb::MessageParser<CGetCardLuckySpinInfo>(() => new CGetCardLuckySpinInfo());
    public static pb::MessageParser<CGetCardLuckySpinInfo> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 获取luckyspin的信息
  /// </summary>
  public sealed class SGetCardLuckySpinInfo : pb::IMessage {
    private static readonly pb::MessageParser<SGetCardLuckySpinInfo> _parser = new pb::MessageParser<SGetCardLuckySpinInfo>(() => new SGetCardLuckySpinInfo());
    public static pb::MessageParser<SGetCardLuckySpinInfo> Parser { get { return _parser; } }

    private uint cardLuckySpinCount_;
    /// <summary>
    /// luckySpin总次数
    /// </summary>
    public uint CardLuckySpinCount {
      get { return cardLuckySpinCount_; }
      set {
        cardLuckySpinCount_ = value;
      }
    }

    private uint usedCardLuckySpinCount_;
    /// <summary>
    /// 已经使用的luckySpin次数
    /// </summary>
    public uint UsedCardLuckySpinCount {
      get { return usedCardLuckySpinCount_; }
      set {
        usedCardLuckySpinCount_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardLuckySpinInfo.Types.SpinRewardConfItem> _repeated_spinRewardConfs_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.SGetCardLuckySpinInfo.Types.SpinRewardConfItem.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardLuckySpinInfo.Types.SpinRewardConfItem> spinRewardConfs_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardLuckySpinInfo.Types.SpinRewardConfItem>();
    /// <summary>
    /// 奖品列表
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardLuckySpinInfo.Types.SpinRewardConfItem> SpinRewardConfs {
      get { return spinRewardConfs_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_rewardsForCollect_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> rewardsForCollect_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 待领取的奖励列表
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> RewardsForCollect {
      get { return rewardsForCollect_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CardLuckySpinCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CardLuckySpinCount);
      }
      if (UsedCardLuckySpinCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UsedCardLuckySpinCount);
      }
      spinRewardConfs_.WriteTo(output, _repeated_spinRewardConfs_codec);
      rewardsForCollect_.WriteTo(output, _repeated_rewardsForCollect_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (CardLuckySpinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardLuckySpinCount);
      }
      if (UsedCardLuckySpinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsedCardLuckySpinCount);
      }
      size += spinRewardConfs_.CalculateSize(_repeated_spinRewardConfs_codec);
      size += rewardsForCollect_.CalculateSize(_repeated_rewardsForCollect_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardLuckySpinCount = input.ReadUInt32();
            break;
          }
          case 16: {
            UsedCardLuckySpinCount = input.ReadUInt32();
            break;
          }
          case 26: {
            spinRewardConfs_.AddEntriesFrom(input, _repeated_spinRewardConfs_codec);
            break;
          }
          case 34: {
            rewardsForCollect_.AddEntriesFrom(input, _repeated_rewardsForCollect_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SGetCardLuckySpinInfo message type.</summary>
    public static class Types {
      public sealed class SpinRewardConfItem : pb::IMessage {
        private static readonly pb::MessageParser<SpinRewardConfItem> _parser = new pb::MessageParser<SpinRewardConfItem>(() => new SpinRewardConfItem());
        public static pb::MessageParser<SpinRewardConfItem> Parser { get { return _parser; } }

        private uint rewardId_;
        /// <summary>
        /// 奖励ID
        /// </summary>
        public uint RewardId {
          get { return rewardId_; }
          set {
            rewardId_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
        /// <summary>
        /// 奖励
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
          get { return reward_; }
          set {
            reward_ = value;
          }
        }

        private bool isSuperBonus_;
        /// <summary>
        /// 是否是超级奖励
        /// </summary>
        public bool IsSuperBonus {
          get { return isSuperBonus_; }
          set {
            isSuperBonus_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (RewardId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(RewardId);
          }
          if (reward_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Reward);
          }
          if (IsSuperBonus != false) {
            output.WriteRawTag(24);
            output.WriteBool(IsSuperBonus);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (RewardId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardId);
          }
          if (reward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
          }
          if (IsSuperBonus != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RewardId = input.ReadUInt32();
                break;
              }
              case 18: {
                if (reward_ == null) {
                  reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
                }
                input.ReadMessage(reward_);
                break;
              }
              case 24: {
                IsSuperBonus = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// luckyspin 一次
  /// </summary>
  public sealed class CCardLuckySpin : pb::IMessage {
    private static readonly pb::MessageParser<CCardLuckySpin> _parser = new pb::MessageParser<CCardLuckySpin>(() => new CCardLuckySpin());
    public static pb::MessageParser<CCardLuckySpin> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// luckyspin 一次
  /// </summary>
  public sealed class SCardLuckySpin : pb::IMessage {
    private static readonly pb::MessageParser<SCardLuckySpin> _parser = new pb::MessageParser<SCardLuckySpin>(() => new SCardLuckySpin());
    public static pb::MessageParser<SCardLuckySpin> Parser { get { return _parser; } }

    private uint rewardId_;
    /// <summary>
    /// 奖励ID
    /// </summary>
    public uint RewardId {
      get { return rewardId_; }
      set {
        rewardId_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
    /// <summary>
    /// 奖励
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    private uint usedCardLuckySpinCount_;
    /// <summary>
    /// 已经使用的luckySpin次数
    /// </summary>
    public uint UsedCardLuckySpinCount {
      get { return usedCardLuckySpinCount_; }
      set {
        usedCardLuckySpinCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RewardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RewardId);
      }
      if (reward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reward);
      }
      if (UsedCardLuckySpinCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UsedCardLuckySpinCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RewardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardId);
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (UsedCardLuckySpinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsedCardLuckySpinCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RewardId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (reward_ == null) {
              reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(reward_);
            break;
          }
          case 32: {
            UsedCardLuckySpinCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// luckyspin一次全开完
  /// </summary>
  public sealed class CCardLuckySpinAll : pb::IMessage {
    private static readonly pb::MessageParser<CCardLuckySpinAll> _parser = new pb::MessageParser<CCardLuckySpinAll>(() => new CCardLuckySpinAll());
    public static pb::MessageParser<CCardLuckySpinAll> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SCardLuckySpinAll : pb::IMessage {
    private static readonly pb::MessageParser<SCardLuckySpinAll> _parser = new pb::MessageParser<SCardLuckySpinAll>(() => new SCardLuckySpinAll());
    public static pb::MessageParser<SCardLuckySpinAll> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SCardLuckySpinAll.Types.LuckySpinSingleResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.SCardLuckySpinAll.Types.LuckySpinSingleResult.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SCardLuckySpinAll.Types.LuckySpinSingleResult> results_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SCardLuckySpinAll.Types.LuckySpinSingleResult>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SCardLuckySpinAll.Types.LuckySpinSingleResult> Results {
      get { return results_; }
    }

    private uint usedCardLuckySpinCount_;
    /// <summary>
    /// 已经使用的luckySpin次数
    /// </summary>
    public uint UsedCardLuckySpinCount {
      get { return usedCardLuckySpinCount_; }
      set {
        usedCardLuckySpinCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      results_.WriteTo(output, _repeated_results_codec);
      if (UsedCardLuckySpinCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UsedCardLuckySpinCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (UsedCardLuckySpinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsedCardLuckySpinCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 16: {
            UsedCardLuckySpinCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SCardLuckySpinAll message type.</summary>
    public static class Types {
      public sealed class LuckySpinSingleResult : pb::IMessage {
        private static readonly pb::MessageParser<LuckySpinSingleResult> _parser = new pb::MessageParser<LuckySpinSingleResult>(() => new LuckySpinSingleResult());
        public static pb::MessageParser<LuckySpinSingleResult> Parser { get { return _parser; } }

        private uint rewardId_;
        /// <summary>
        /// 奖励ID
        /// </summary>
        public uint RewardId {
          get { return rewardId_; }
          set {
            rewardId_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
        /// <summary>
        /// 奖励
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
          get { return reward_; }
          set {
            reward_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (RewardId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(RewardId);
          }
          if (reward_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Reward);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (RewardId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardId);
          }
          if (reward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                RewardId = input.ReadUInt32();
                break;
              }
              case 18: {
                if (reward_ == null) {
                  reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
                }
                input.ReadMessage(reward_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 领取luckyspin暂存的奖励
  /// </summary>
  public sealed class CCollectLuckySpinRewards : pb::IMessage {
    private static readonly pb::MessageParser<CCollectLuckySpinRewards> _parser = new pb::MessageParser<CCollectLuckySpinRewards>(() => new CCollectLuckySpinRewards());
    public static pb::MessageParser<CCollectLuckySpinRewards> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SCollectLuckySpinRewards : pb::IMessage {
    private static readonly pb::MessageParser<SCollectLuckySpinRewards> _parser = new pb::MessageParser<SCollectLuckySpinRewards>(() => new SCollectLuckySpinRewards());
    public static pb::MessageParser<SCollectLuckySpinRewards> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> rewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 领取的奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> Rewards {
      get { return rewards_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 标记看过某卡册
  /// </summary>
  public sealed class CMarkViewCardSet : pb::IMessage {
    private static readonly pb::MessageParser<CMarkViewCardSet> _parser = new pb::MessageParser<CMarkViewCardSet>(() => new CMarkViewCardSet());
    public static pb::MessageParser<CMarkViewCardSet> Parser { get { return _parser; } }

    private uint setId_;
    public uint SetId {
      get { return setId_; }
      set {
        setId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SetId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SetId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SetId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SMarkViewCardSet : pb::IMessage {
    private static readonly pb::MessageParser<SMarkViewCardSet> _parser = new pb::MessageParser<SMarkViewCardSet>(() => new SMarkViewCardSet());
    public static pb::MessageParser<SMarkViewCardSet> Parser { get { return _parser; } }

    private bool success_;
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.CardSet cardSet_;
    public global::DragonU3DSDK.Network.API.ILProtocol.CardSet CardSet {
      get { return cardSet_; }
      set {
        cardSet_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (cardSet_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CardSet);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (cardSet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardSet);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            if (cardSet_ == null) {
              cardSet_ = new global::DragonU3DSDK.Network.API.ILProtocol.CardSet();
            }
            input.ReadMessage(cardSet_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取卡片回收游戏的信息
  /// </summary>
  public sealed class CGetCardRecycleGameInfo : pb::IMessage {
    private static readonly pb::MessageParser<CGetCardRecycleGameInfo> _parser = new pb::MessageParser<CGetCardRecycleGameInfo>(() => new CGetCardRecycleGameInfo());
    public static pb::MessageParser<CGetCardRecycleGameInfo> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SGetCardRecycleGameInfo : pb::IMessage {
    private static readonly pb::MessageParser<SGetCardRecycleGameInfo> _parser = new pb::MessageParser<SGetCardRecycleGameInfo>(() => new SGetCardRecycleGameInfo());
    public static pb::MessageParser<SGetCardRecycleGameInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardRecycleGameInfo.Types.GameRewardItem> _repeated_gameRewardItems_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.SGetCardRecycleGameInfo.Types.GameRewardItem.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardRecycleGameInfo.Types.GameRewardItem> gameRewardItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardRecycleGameInfo.Types.GameRewardItem>();
    /// <summary>
    /// 回收转轮配置
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardRecycleGameInfo.Types.GameRewardItem> GameRewardItems {
      get { return gameRewardItems_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Card> _repeated_cardsCanRecycle_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Card.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Card> cardsCanRecycle_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Card>();
    /// <summary>
    /// 能参与回收的卡片列表，卡片的数量已经减了1
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Card> CardsCanRecycle {
      get { return cardsCanRecycle_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardRecycleGameInfo.Types.RecycleLevelConfig> _repeated_recycleLevelConfigs_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.SGetCardRecycleGameInfo.Types.RecycleLevelConfig.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardRecycleGameInfo.Types.RecycleLevelConfig> recycleLevelConfigs_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardRecycleGameInfo.Types.RecycleLevelConfig>();
    /// <summary>
    /// 回收等级配置，用于计算选中的卡牌能开启几个锯齿
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardRecycleGameInfo.Types.RecycleLevelConfig> RecycleLevelConfigs {
      get { return recycleLevelConfigs_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      gameRewardItems_.WriteTo(output, _repeated_gameRewardItems_codec);
      cardsCanRecycle_.WriteTo(output, _repeated_cardsCanRecycle_codec);
      recycleLevelConfigs_.WriteTo(output, _repeated_recycleLevelConfigs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += gameRewardItems_.CalculateSize(_repeated_gameRewardItems_codec);
      size += cardsCanRecycle_.CalculateSize(_repeated_cardsCanRecycle_codec);
      size += recycleLevelConfigs_.CalculateSize(_repeated_recycleLevelConfigs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            gameRewardItems_.AddEntriesFrom(input, _repeated_gameRewardItems_codec);
            break;
          }
          case 18: {
            cardsCanRecycle_.AddEntriesFrom(input, _repeated_cardsCanRecycle_codec);
            break;
          }
          case 26: {
            recycleLevelConfigs_.AddEntriesFrom(input, _repeated_recycleLevelConfigs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SGetCardRecycleGameInfo message type.</summary>
    public static class Types {
      public sealed class GameRewardItem : pb::IMessage {
        private static readonly pb::MessageParser<GameRewardItem> _parser = new pb::MessageParser<GameRewardItem>(() => new GameRewardItem());
        public static pb::MessageParser<GameRewardItem> Parser { get { return _parser; } }

        private uint id_;
        /// <summary>
        /// ID，给奖励的时候用
        /// </summary>
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        private uint index_;
        /// <summary>
        /// 排序序号 从1开始
        /// </summary>
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        private uint cardColor_;
        /// <summary>
        /// 底框颜色
        /// </summary>
        public uint CardColor {
          get { return cardColor_; }
          set {
            cardColor_ = value;
          }
        }

        private uint showCoinCount_;
        /// <summary>
        /// 展示的金币数量 如 200
        /// </summary>
        public uint ShowCoinCount {
          get { return showCoinCount_; }
          set {
            showCoinCount_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Item> _repeated_itemOther_codec
            = pb::FieldCodec.ForMessage(42, global::DragonU3DSDK.Network.API.ILProtocol.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> itemOther_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item>();
        /// <summary>
        /// 其他的道具列表，长度最大为1
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> ItemOther {
          get { return itemOther_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Index != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Index);
          }
          if (CardColor != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(CardColor);
          }
          if (ShowCoinCount != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(ShowCoinCount);
          }
          itemOther_.WriteTo(output, _repeated_itemOther_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (CardColor != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardColor);
          }
          if (ShowCoinCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShowCoinCount);
          }
          size += itemOther_.CalculateSize(_repeated_itemOther_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Index = input.ReadUInt32();
                break;
              }
              case 24: {
                CardColor = input.ReadUInt32();
                break;
              }
              case 32: {
                ShowCoinCount = input.ReadUInt32();
                break;
              }
              case 42: {
                itemOther_.AddEntriesFrom(input, _repeated_itemOther_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class RecycleLevelConfig : pb::IMessage {
        private static readonly pb::MessageParser<RecycleLevelConfig> _parser = new pb::MessageParser<RecycleLevelConfig>(() => new RecycleLevelConfig());
        public static pb::MessageParser<RecycleLevelConfig> Parser { get { return _parser; } }

        private uint coverLevel_;
        public uint CoverLevel {
          get { return coverLevel_; }
          set {
            coverLevel_ = value;
          }
        }

        private uint coverEnergyNeed_;
        /// <summary>
        ///从0级开始到该等级，共需多少经验
        /// </summary>
        public uint CoverEnergyNeed {
          get { return coverEnergyNeed_; }
          set {
            coverEnergyNeed_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (CoverLevel != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(CoverLevel);
          }
          if (CoverEnergyNeed != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(CoverEnergyNeed);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (CoverLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CoverLevel);
          }
          if (CoverEnergyNeed != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CoverEnergyNeed);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                CoverLevel = input.ReadUInt32();
                break;
              }
              case 16: {
                CoverEnergyNeed = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 回收游戏，spin
  /// </summary>
  public sealed class CCardRecycleGameSpin : pb::IMessage {
    private static readonly pb::MessageParser<CCardRecycleGameSpin> _parser = new pb::MessageParser<CCardRecycleGameSpin>(() => new CCardRecycleGameSpin());
    public static pb::MessageParser<CCardRecycleGameSpin> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<uint> _repeated_cardIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> cardIds_ = new pbc::RepeatedField<uint>();
    public pbc::RepeatedField<uint> CardIds {
      get { return cardIds_; }
    }

    private static readonly pb::FieldCodec<uint> _repeated_cardCounts_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> cardCounts_ = new pbc::RepeatedField<uint>();
    public pbc::RepeatedField<uint> CardCounts {
      get { return cardCounts_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      cardIds_.WriteTo(output, _repeated_cardIds_codec);
      cardCounts_.WriteTo(output, _repeated_cardCounts_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += cardIds_.CalculateSize(_repeated_cardIds_codec);
      size += cardCounts_.CalculateSize(_repeated_cardCounts_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            cardIds_.AddEntriesFrom(input, _repeated_cardIds_codec);
            break;
          }
          case 18:
          case 16: {
            cardCounts_.AddEntriesFrom(input, _repeated_cardCounts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SCardRecycleGameSpin : pb::IMessage {
    private static readonly pb::MessageParser<SCardRecycleGameSpin> _parser = new pb::MessageParser<SCardRecycleGameSpin>(() => new SCardRecycleGameSpin());
    public static pb::MessageParser<SCardRecycleGameSpin> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<uint> _repeated_gameRewardItemIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> gameRewardItemIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 摇中的GameRewardItem id列表
    /// </summary>
    public pbc::RepeatedField<uint> GameRewardItemIds {
      get { return gameRewardItemIds_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
    /// <summary>
    /// 得到的奖励（经汇总）
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private uint gameCountDown_;
    /// <summary>
    ///能玩该游戏的倒计时，单位秒
    /// </summary>
    public uint GameCountDown {
      get { return gameCountDown_; }
      set {
        gameCountDown_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      gameRewardItemIds_.WriteTo(output, _repeated_gameRewardItemIds_codec);
      if (reward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reward);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserProfile);
      }
      if (GameCountDown != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(GameCountDown);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += gameRewardItemIds_.CalculateSize(_repeated_gameRewardItemIds_codec);
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      if (GameCountDown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameCountDown);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            gameRewardItemIds_.AddEntriesFrom(input, _repeated_gameRewardItemIds_codec);
            break;
          }
          case 18: {
            if (reward_ == null) {
              reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(reward_);
            break;
          }
          case 26: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 32: {
            GameCountDown = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取卡片获取历史记录
  /// </summary>
  public sealed class CGetCardGotRecords : pb::IMessage {
    private static readonly pb::MessageParser<CGetCardGotRecords> _parser = new pb::MessageParser<CGetCardGotRecords>(() => new CGetCardGotRecords());
    public static pb::MessageParser<CGetCardGotRecords> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SGetCardGotRecords : pb::IMessage {
    private static readonly pb::MessageParser<SGetCardGotRecords> _parser = new pb::MessageParser<SGetCardGotRecords>(() => new SGetCardGotRecords());
    public static pb::MessageParser<SGetCardGotRecords> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardGotRecords.Types.CardGotRecord> _repeated_cardGotRecords_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.SGetCardGotRecords.Types.CardGotRecord.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardGotRecords.Types.CardGotRecord> cardGotRecords_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardGotRecords.Types.CardGotRecord>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetCardGotRecords.Types.CardGotRecord> CardGotRecords {
      get { return cardGotRecords_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      cardGotRecords_.WriteTo(output, _repeated_cardGotRecords_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += cardGotRecords_.CalculateSize(_repeated_cardGotRecords_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cardGotRecords_.AddEntriesFrom(input, _repeated_cardGotRecords_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SGetCardGotRecords message type.</summary>
    public static class Types {
      public sealed class CardGotRecord : pb::IMessage {
        private static readonly pb::MessageParser<CardGotRecord> _parser = new pb::MessageParser<CardGotRecord>(() => new CardGotRecord());
        public static pb::MessageParser<CardGotRecord> Parser { get { return _parser; } }

        private global::DragonU3DSDK.Network.API.ILProtocol.Card card_;
        public global::DragonU3DSDK.Network.API.ILProtocol.Card Card {
          get { return card_; }
          set {
            card_ = value;
          }
        }

        private string source_ = "";
        public string Source {
          get { return source_; }
          set {
            source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private uint gotTime_;
        /// <summary>
        /// 
        /// </summary>
        public uint GotTime {
          get { return gotTime_; }
          set {
            gotTime_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (card_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Card);
          }
          if (Source.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Source);
          }
          if (GotTime != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(GotTime);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (card_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
          }
          if (Source.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
          }
          if (GotTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GotTime);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (card_ == null) {
                  card_ = new global::DragonU3DSDK.Network.API.ILProtocol.Card();
                }
                input.ReadMessage(card_);
                break;
              }
              case 18: {
                Source = input.ReadString();
                break;
              }
              case 24: {
                GotTime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 增加玩家新手引导的进度
  /// </summary>
  public sealed class CIncBeginnersGuideStep : pb::IMessage {
    private static readonly pb::MessageParser<CIncBeginnersGuideStep> _parser = new pb::MessageParser<CIncBeginnersGuideStep>(() => new CIncBeginnersGuideStep());
    public static pb::MessageParser<CIncBeginnersGuideStep> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SIncBeginnersGuideStep : pb::IMessage {
    private static readonly pb::MessageParser<SIncBeginnersGuideStep> _parser = new pb::MessageParser<SIncBeginnersGuideStep>(() => new SIncBeginnersGuideStep());
    public static pb::MessageParser<SIncBeginnersGuideStep> Parser { get { return _parser; } }

    private bool success_;
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
    /// <summary>
    /// 奖励，need_collect_beginners_package=false时为空
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    private uint beginnersGuideStep_;
    /// <summary>
    ///进度，默认为0,掉接口以后+1
    /// </summary>
    public uint BeginnersGuideStep {
      get { return beginnersGuideStep_; }
      set {
        beginnersGuideStep_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (reward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reward);
      }
      if (BeginnersGuideStep != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BeginnersGuideStep);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (BeginnersGuideStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeginnersGuideStep);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            if (reward_ == null) {
              reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(reward_);
            break;
          }
          case 24: {
            BeginnersGuideStep = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 帽子游戏信息
  /// </summary>
  public sealed class HatGameInfo : pb::IMessage {
    private static readonly pb::MessageParser<HatGameInfo> _parser = new pb::MessageParser<HatGameInfo>(() => new HatGameInfo());
    public static pb::MessageParser<HatGameInfo> Parser { get { return _parser; } }

    private uint currentStep_;
    /// <summary>
    /// 当前关卡，默认为1
    /// </summary>
    public uint CurrentStep {
      get { return currentStep_; }
      set {
        currentStep_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo.Types.HatColor hatColor_ = 0;
    /// <summary>
    /// 帽子颜色
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo.Types.HatColor HatColor {
      get { return hatColor_; }
      set {
        hatColor_ = value;
      }
    }

    private bool hasRabitTip_;
    /// <summary>
    /// 是否有兔子提示
    /// </summary>
    public bool HasRabitTip {
      get { return hasRabitTip_; }
      set {
        hasRabitTip_ = value;
      }
    }

    private bool hasLuckyCardTip_;
    /// <summary>
    /// 是否有luckycard提示
    /// </summary>
    public bool HasLuckyCardTip {
      get { return hasLuckyCardTip_; }
      set {
        hasLuckyCardTip_ = value;
      }
    }

    private static readonly pb::FieldCodec<uint> _repeated_selectedHatIndexsRecord_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> selectedHatIndexsRecord_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 本关选择帽子的历史记录 如[] [0]; 序号取值0-3；不为空数组则表示本关卡遇见过兔子
    /// </summary>
    public pbc::RepeatedField<uint> SelectedHatIndexsRecord {
      get { return selectedHatIndexsRecord_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_rewardsCanCollected_codec
        = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> rewardsCanCollected_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 截止目前，总共可领取的奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> RewardsCanCollected {
      get { return rewardsCanCollected_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo.Types.HatGameStat hatGameStat_ = 0;
    /// <summary>
    /// 游戏状态 
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo.Types.HatGameStat HatGameStat {
      get { return hatGameStat_; }
      set {
        hatGameStat_ = value;
      }
    }

    private uint reviceCost_;
    /// <summary>
    /// 复活需要的钻石数量
    /// </summary>
    public uint ReviceCost {
      get { return reviceCost_; }
      set {
        reviceCost_ = value;
      }
    }

    private uint hatGameCountDown_;
    /// <summary>
    /// 帽子游戏倒计时，单位秒
    /// </summary>
    public uint HatGameCountDown {
      get { return hatGameCountDown_; }
      set {
        hatGameCountDown_ = value;
      }
    }

    private uint unlockLevel_;
    /// <summary>
    /// 解锁等级
    /// </summary>
    public uint UnlockLevel {
      get { return unlockLevel_; }
      set {
        unlockLevel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentStep != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurrentStep);
      }
      if (HatColor != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) HatColor);
      }
      if (HasRabitTip != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasRabitTip);
      }
      if (HasLuckyCardTip != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasLuckyCardTip);
      }
      selectedHatIndexsRecord_.WriteTo(output, _repeated_selectedHatIndexsRecord_codec);
      rewardsCanCollected_.WriteTo(output, _repeated_rewardsCanCollected_codec);
      if (HatGameStat != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) HatGameStat);
      }
      if (ReviceCost != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ReviceCost);
      }
      if (HatGameCountDown != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(HatGameCountDown);
      }
      if (UnlockLevel != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(UnlockLevel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CurrentStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentStep);
      }
      if (HatColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HatColor);
      }
      if (HasRabitTip != false) {
        size += 1 + 1;
      }
      if (HasLuckyCardTip != false) {
        size += 1 + 1;
      }
      size += selectedHatIndexsRecord_.CalculateSize(_repeated_selectedHatIndexsRecord_codec);
      size += rewardsCanCollected_.CalculateSize(_repeated_rewardsCanCollected_codec);
      if (HatGameStat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HatGameStat);
      }
      if (ReviceCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReviceCost);
      }
      if (HatGameCountDown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HatGameCountDown);
      }
      if (UnlockLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnlockLevel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentStep = input.ReadUInt32();
            break;
          }
          case 16: {
            hatColor_ = (global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo.Types.HatColor) input.ReadEnum();
            break;
          }
          case 24: {
            HasRabitTip = input.ReadBool();
            break;
          }
          case 32: {
            HasLuckyCardTip = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            selectedHatIndexsRecord_.AddEntriesFrom(input, _repeated_selectedHatIndexsRecord_codec);
            break;
          }
          case 50: {
            rewardsCanCollected_.AddEntriesFrom(input, _repeated_rewardsCanCollected_codec);
            break;
          }
          case 56: {
            hatGameStat_ = (global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo.Types.HatGameStat) input.ReadEnum();
            break;
          }
          case 64: {
            ReviceCost = input.ReadUInt32();
            break;
          }
          case 72: {
            HatGameCountDown = input.ReadUInt32();
            break;
          }
          case 80: {
            UnlockLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HatGameInfo message type.</summary>
    public static class Types {
      public enum HatColor {
        /// <summary>
        ///银色
        /// </summary>
        Silver = 0,
        /// <summary>
        ///金色
        /// </summary>
        Gold = 1,
      }

      public enum HatGameStat {
        /// <summary>
        /// 游戏进行中
        /// </summary>
        Live = 0,
        /// <summary>
        /// 遇见了兔子，下一步要么复活成LIVE要么结束
        /// </summary>
        Dead = 1,
        /// <summary>
        /// 通关了（已经选了第15关的帽子但还未领取奖励）
        /// </summary>
        Cleared = 2,
        /// <summary>
        /// 领取奖励或者放弃复活，游戏结束
        /// </summary>
        End = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// 帽子游戏页面信息
  /// </summary>
  public sealed class CHatGameInfo : pb::IMessage {
    private static readonly pb::MessageParser<CHatGameInfo> _parser = new pb::MessageParser<CHatGameInfo>(() => new CHatGameInfo());
    public static pb::MessageParser<CHatGameInfo> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SHatGameInfo : pb::IMessage {
    private static readonly pb::MessageParser<SHatGameInfo> _parser = new pb::MessageParser<SHatGameInfo>(() => new SHatGameInfo());
    public static pb::MessageParser<SHatGameInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo hatGameInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo HatGameInfo {
      get { return hatGameInfo_; }
      set {
        hatGameInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (hatGameInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HatGameInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (hatGameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HatGameInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (hatGameInfo_ == null) {
              hatGameInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo();
            }
            input.ReadMessage(hatGameInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 帽子游戏 选择帽子
  /// </summary>
  public sealed class CHatGameSelect : pb::IMessage {
    private static readonly pb::MessageParser<CHatGameSelect> _parser = new pb::MessageParser<CHatGameSelect>(() => new CHatGameSelect());
    public static pb::MessageParser<CHatGameSelect> Parser { get { return _parser; } }

    private uint index_;
    /// <summary>
    ///帽子序号 0-3
    /// </summary>
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SHatGameSelect : pb::IMessage {
    private static readonly pb::MessageParser<SHatGameSelect> _parser = new pb::MessageParser<SHatGameSelect>(() => new SHatGameSelect());
    public static pb::MessageParser<SHatGameSelect> Parser { get { return _parser; } }

    private bool rabbitAppear_;
    /// <summary>
    /// 兔子出现了
    /// </summary>
    public bool RabbitAppear {
      get { return rabbitAppear_; }
      set {
        rabbitAppear_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
    /// <summary>
    /// 选中的奖励，仅当兔子没出现时，读该值
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo hatGameInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo HatGameInfo {
      get { return hatGameInfo_; }
      set {
        hatGameInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_rewardsOthers_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> rewardsOthers_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    ///其他未被选中的奖励，长度为2或者3
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> RewardsOthers {
      get { return rewardsOthers_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RabbitAppear != false) {
        output.WriteRawTag(8);
        output.WriteBool(RabbitAppear);
      }
      if (reward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reward);
      }
      if (hatGameInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(HatGameInfo);
      }
      rewardsOthers_.WriteTo(output, _repeated_rewardsOthers_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RabbitAppear != false) {
        size += 1 + 1;
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (hatGameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HatGameInfo);
      }
      size += rewardsOthers_.CalculateSize(_repeated_rewardsOthers_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RabbitAppear = input.ReadBool();
            break;
          }
          case 18: {
            if (reward_ == null) {
              reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(reward_);
            break;
          }
          case 26: {
            if (hatGameInfo_ == null) {
              hatGameInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo();
            }
            input.ReadMessage(hatGameInfo_);
            break;
          }
          case 34: {
            rewardsOthers_.AddEntriesFrom(input, _repeated_rewardsOthers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 复活
  /// </summary>
  public sealed class CHatGameHandleRabbit : pb::IMessage {
    private static readonly pb::MessageParser<CHatGameHandleRabbit> _parser = new pb::MessageParser<CHatGameHandleRabbit>(() => new CHatGameHandleRabbit());
    public static pb::MessageParser<CHatGameHandleRabbit> Parser { get { return _parser; } }

    private bool revive_;
    /// <summary>
    ///是否复活
    /// </summary>
    public bool Revive {
      get { return revive_; }
      set {
        revive_ = value;
      }
    }

    private bool hasWatchedAdv_;
    /// <summary>
    /// 是否观看了广告
    /// </summary>
    public bool HasWatchedAdv {
      get { return hasWatchedAdv_; }
      set {
        hasWatchedAdv_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Revive != false) {
        output.WriteRawTag(8);
        output.WriteBool(Revive);
      }
      if (HasWatchedAdv != false) {
        output.WriteRawTag(16);
        output.WriteBool(HasWatchedAdv);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Revive != false) {
        size += 1 + 1;
      }
      if (HasWatchedAdv != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Revive = input.ReadBool();
            break;
          }
          case 16: {
            HasWatchedAdv = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class SHatGameHandleRabbit : pb::IMessage {
    private static readonly pb::MessageParser<SHatGameHandleRabbit> _parser = new pb::MessageParser<SHatGameHandleRabbit>(() => new SHatGameHandleRabbit());
    public static pb::MessageParser<SHatGameHandleRabbit> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo hatGameInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo HatGameInfo {
      get { return hatGameInfo_; }
      set {
        hatGameInfo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (hatGameInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HatGameInfo);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (hatGameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HatGameInfo);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (hatGameInfo_ == null) {
              hatGameInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo();
            }
            input.ReadMessage(hatGameInfo_);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 领奖
  /// </summary>
  public sealed class CHatGameCollectRewards : pb::IMessage {
    private static readonly pb::MessageParser<CHatGameCollectRewards> _parser = new pb::MessageParser<CHatGameCollectRewards>(() => new CHatGameCollectRewards());
    public static pb::MessageParser<CHatGameCollectRewards> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SHatGameCollectRewards : pb::IMessage {
    private static readonly pb::MessageParser<SHatGameCollectRewards> _parser = new pb::MessageParser<SHatGameCollectRewards>(() => new SHatGameCollectRewards());
    public static pb::MessageParser<SHatGameCollectRewards> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> rewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> Rewards {
      get { return rewards_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo hatGameInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo HatGameInfo {
      get { return hatGameInfo_; }
      set {
        hatGameInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
      if (hatGameInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(HatGameInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      if (hatGameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HatGameInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 26: {
            if (hatGameInfo_ == null) {
              hatGameInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.HatGameInfo();
            }
            input.ReadMessage(hatGameInfo_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
