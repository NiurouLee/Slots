// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: home_slots_extra_info.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Messages
  /// <summary>
  ///================= ThreePigs ====================================
  /// </summary>
  public sealed class ThreePigsGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<ThreePigsGameResultExtraInfo> _parser = new pb::MessageParser<ThreePigsGameResultExtraInfo>(() => new ThreePigsGameResultExtraInfo());
    public static pb::MessageParser<ThreePigsGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<uint> _repeated_newWilds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> newWilds_ = new pbc::RepeatedField<uint>();
    public pbc::RepeatedField<uint> NewWilds {
      get { return newWilds_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      newWilds_.WriteTo(output, _repeated_newWilds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += newWilds_.CalculateSize(_repeated_newWilds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            newWilds_.AddEntriesFrom(input, _repeated_newWilds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///================= ThreePigs2 ====================================
  /// </summary>
  public sealed class ThreePigs2GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<ThreePigs2GameResultExtraInfo> _parser = new pb::MessageParser<ThreePigs2GameResultExtraInfo>(() => new ThreePigs2GameResultExtraInfo());
    public static pb::MessageParser<ThreePigs2GameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<uint> _repeated_newWilds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> newWilds_ = new pbc::RepeatedField<uint>();
    public pbc::RepeatedField<uint> NewWilds {
      get { return newWilds_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      newWilds_.WriteTo(output, _repeated_newWilds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += newWilds_.CalculateSize(_repeated_newWilds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            newWilds_.AddEntriesFrom(input, _repeated_newWilds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///================= HamburgerKing ====================================
  /// </summary>
  public sealed class HamburgerKingGameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<HamburgerKingGameResultExtraInfo> _parser = new pb::MessageParser<HamburgerKingGameResultExtraInfo>(() => new HamburgerKingGameResultExtraInfo());
    public static pb::MessageParser<HamburgerKingGameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.HamburgerKingGameResultExtraInfo.Types.BetInfo>.Codec _map_betInfos_codec
        = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.HamburgerKingGameResultExtraInfo.Types.BetInfo>.Codec(pb::FieldCodec.ForUInt64(8), pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.HamburgerKingGameResultExtraInfo.Types.BetInfo.Parser), 10);
    private readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.HamburgerKingGameResultExtraInfo.Types.BetInfo> betInfos_ = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.HamburgerKingGameResultExtraInfo.Types.BetInfo>();
    public pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.HamburgerKingGameResultExtraInfo.Types.BetInfo> BetInfos {
      get { return betInfos_; }
    }

    private bool fixedWild_;
    /// <summary>
    /// 是否有固定的wild
    /// </summary>
    public bool FixedWild {
      get { return fixedWild_; }
      set {
        fixedWild_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.HamburgerKingGameResultExtraInfo.Types.JackpotInfo jackpotInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.HamburgerKingGameResultExtraInfo.Types.JackpotInfo JackpotInfo {
      get { return jackpotInfo_; }
      set {
        jackpotInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      betInfos_.WriteTo(output, _map_betInfos_codec);
      if (FixedWild != false) {
        output.WriteRawTag(16);
        output.WriteBool(FixedWild);
      }
      if (jackpotInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(JackpotInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += betInfos_.CalculateSize(_map_betInfos_codec);
      if (FixedWild != false) {
        size += 1 + 1;
      }
      if (jackpotInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JackpotInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            betInfos_.AddEntriesFrom(input, _map_betInfos_codec);
            break;
          }
          case 16: {
            FixedWild = input.ReadBool();
            break;
          }
          case 26: {
            if (jackpotInfo_ == null) {
              jackpotInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.HamburgerKingGameResultExtraInfo.Types.JackpotInfo();
            }
            input.ReadMessage(jackpotInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HamburgerKingGameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class BetInfo : pb::IMessage {
        private static readonly pb::MessageParser<BetInfo> _parser = new pb::MessageParser<BetInfo>(() => new BetInfo());
        public static pb::MessageParser<BetInfo> Parser { get { return _parser; } }

        private uint combo_;
        /// <summary>
        /// 连赢次数
        /// </summary>
        public uint Combo {
          get { return combo_; }
          set {
            combo_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Combo != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Combo);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Combo != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Combo);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Combo = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class JackpotInfo : pb::IMessage {
        private static readonly pb::MessageParser<JackpotInfo> _parser = new pb::MessageParser<JackpotInfo>(() => new JackpotInfo());
        public static pb::MessageParser<JackpotInfo> Parser { get { return _parser; } }

        private global::DragonU3DSDK.Network.API.ILProtocol.Panel jackpotPanel_;
        public global::DragonU3DSDK.Network.API.ILProtocol.Panel JackpotPanel {
          get { return jackpotPanel_; }
          set {
            jackpotPanel_ = value;
          }
        }

        private bool triggered_;
        public bool Triggered {
          get { return triggered_; }
          set {
            triggered_ = value;
          }
        }

        private ulong totalWin_;
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (jackpotPanel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(JackpotPanel);
          }
          if (Triggered != false) {
            output.WriteRawTag(16);
            output.WriteBool(Triggered);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(TotalWin);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (jackpotPanel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(JackpotPanel);
          }
          if (Triggered != false) {
            size += 1 + 1;
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (jackpotPanel_ == null) {
                  jackpotPanel_ = new global::DragonU3DSDK.Network.API.ILProtocol.Panel();
                }
                input.ReadMessage(jackpotPanel_);
                break;
              }
              case 16: {
                Triggered = input.ReadBool();
                break;
              }
              case 24: {
                TotalWin = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///================= BingoClover3 ====================================
  /// </summary>
  public sealed class BingoClover3GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<BingoClover3GameResultExtraInfo> _parser = new pb::MessageParser<BingoClover3GameResultExtraInfo>(() => new BingoClover3GameResultExtraInfo());
    public static pb::MessageParser<BingoClover3GameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoData>.Codec _map_bingoMap_codec
        = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoData>.Codec(pb::FieldCodec.ForUInt64(8), pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoData.Parser), 10);
    private readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoData> bingoMap_ = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoData>();
    /// <summary>
    /// bingo数据表，key为bet
    /// </summary>
    public pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoData> BingoMap {
      get { return bingoMap_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.Pot pot_;
    public global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.Pot Pot {
      get { return pot_; }
      set {
        pot_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoData superBingo_;
    /// <summary>
    /// 进入地图feature后的bingo数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoData SuperBingo {
      get { return superBingo_; }
      set {
        superBingo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.Wheel wheel_;
    public global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.Wheel Wheel {
      get { return wheel_; }
      set {
        wheel_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bingoMap_.WriteTo(output, _map_bingoMap_codec);
      if (pot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pot);
      }
      if (superBingo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SuperBingo);
      }
      if (wheel_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Wheel);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += bingoMap_.CalculateSize(_map_bingoMap_codec);
      if (pot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pot);
      }
      if (superBingo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SuperBingo);
      }
      if (wheel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wheel);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bingoMap_.AddEntriesFrom(input, _map_bingoMap_codec);
            break;
          }
          case 18: {
            if (pot_ == null) {
              pot_ = new global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.Pot();
            }
            input.ReadMessage(pot_);
            break;
          }
          case 26: {
            if (superBingo_ == null) {
              superBingo_ = new global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoData();
            }
            input.ReadMessage(superBingo_);
            break;
          }
          case 34: {
            if (wheel_ == null) {
              wheel_ = new global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.Wheel();
            }
            input.ReadMessage(wheel_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BingoClover3GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class BingoItem : pb::IMessage {
        private static readonly pb::MessageParser<BingoItem> _parser = new pb::MessageParser<BingoItem>(() => new BingoItem());
        public static pb::MessageParser<BingoItem> Parser { get { return _parser; } }

        private int positionId_;
        /// <summary>
        /// 位置id
        /// </summary>
        public int PositionId {
          get { return positionId_; }
          set {
            positionId_ = value;
          }
        }

        private ulong winRate_;
        /// <summary>
        /// 赢钱倍率
        /// </summary>
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        private uint jackpotId_;
        /// <summary>
        /// jackpot id
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private bool isCentre_;
        /// <summary>
        /// 是否是正中间
        /// </summary>
        public bool IsCentre {
          get { return isCentre_; }
          set {
            isCentre_ = value;
          }
        }

        private bool isCross_;
        /// <summary>
        /// 是否是cross飞行物
        /// </summary>
        public bool IsCross {
          get { return isCross_; }
          set {
            isCross_ = value;
          }
        }

        private bool isBlock_;
        /// <summary>
        /// 是否是block飞行物
        /// </summary>
        public bool IsBlock {
          get { return isBlock_; }
          set {
            isBlock_ = value;
          }
        }

        private static readonly pb::FieldCodec<int> _repeated_otherPositionIds_codec
            = pb::FieldCodec.ForInt32(58);
        private readonly pbc::RepeatedField<int> otherPositionIds_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// 飞行物影响的其他位置
        /// </summary>
        public pbc::RepeatedField<int> OtherPositionIds {
          get { return otherPositionIds_; }
        }

        private bool isChosen_;
        /// <summary>
        /// 作为中心wheel是否完成bonus
        /// </summary>
        public bool IsChosen {
          get { return isChosen_; }
          set {
            isChosen_ = value;
          }
        }

        private ulong jackpotPay_;
        /// <summary>
        /// jackpot pay
        /// </summary>
        public ulong JackpotPay {
          get { return jackpotPay_; }
          set {
            jackpotPay_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (PositionId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(PositionId);
          }
          if (WinRate != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(WinRate);
          }
          if (JackpotId != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(JackpotId);
          }
          if (IsCentre != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsCentre);
          }
          if (IsCross != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsCross);
          }
          if (IsBlock != false) {
            output.WriteRawTag(48);
            output.WriteBool(IsBlock);
          }
          otherPositionIds_.WriteTo(output, _repeated_otherPositionIds_codec);
          if (IsChosen != false) {
            output.WriteRawTag(64);
            output.WriteBool(IsChosen);
          }
          if (JackpotPay != 0UL) {
            output.WriteRawTag(72);
            output.WriteUInt64(JackpotPay);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (PositionId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PositionId);
          }
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (IsCentre != false) {
            size += 1 + 1;
          }
          if (IsCross != false) {
            size += 1 + 1;
          }
          if (IsBlock != false) {
            size += 1 + 1;
          }
          size += otherPositionIds_.CalculateSize(_repeated_otherPositionIds_codec);
          if (IsChosen != false) {
            size += 1 + 1;
          }
          if (JackpotPay != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PositionId = input.ReadInt32();
                break;
              }
              case 16: {
                WinRate = input.ReadUInt64();
                break;
              }
              case 24: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 32: {
                IsCentre = input.ReadBool();
                break;
              }
              case 40: {
                IsCross = input.ReadBool();
                break;
              }
              case 48: {
                IsBlock = input.ReadBool();
                break;
              }
              case 58:
              case 56: {
                otherPositionIds_.AddEntriesFrom(input, _repeated_otherPositionIds_codec);
                break;
              }
              case 64: {
                IsChosen = input.ReadBool();
                break;
              }
              case 72: {
                JackpotPay = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class BingoLine : pb::IMessage {
        private static readonly pb::MessageParser<BingoLine> _parser = new pb::MessageParser<BingoLine>(() => new BingoLine());
        public static pb::MessageParser<BingoLine> Parser { get { return _parser; } }

        private int lineId_;
        /// <summary>
        /// bingo成功线id， 1～9: 从上往下,从左往右; 10:左上右下; 11:右上左下
        /// </summary>
        public int LineId {
          get { return lineId_; }
          set {
            lineId_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> _repeated_items_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bingo数据队列
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> Items {
          get { return items_; }
        }

        private ulong totalWinRate_;
        /// <summary>
        /// line 总奖励心奖励
        /// </summary>
        public ulong TotalWinRate {
          get { return totalWinRate_; }
          set {
            totalWinRate_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (LineId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(LineId);
          }
          items_.WriteTo(output, _repeated_items_codec);
          if (TotalWinRate != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(TotalWinRate);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (LineId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineId);
          }
          size += items_.CalculateSize(_repeated_items_codec);
          if (TotalWinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWinRate);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                LineId = input.ReadInt32();
                break;
              }
              case 18: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 24: {
                TotalWinRate = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class BingoHotLine : pb::IMessage {
        private static readonly pb::MessageParser<BingoHotLine> _parser = new pb::MessageParser<BingoHotLine>(() => new BingoHotLine());
        public static pb::MessageParser<BingoHotLine> Parser { get { return _parser; } }

        private int lineId_;
        /// <summary>
        /// bingo成功线id， 1～9: 从上往下,从左往右; 10:左上右下; 11:右上左下
        /// </summary>
        public int LineId {
          get { return lineId_; }
          set {
            lineId_ = value;
          }
        }

        private static readonly pb::FieldCodec<int> _repeated_positionIds_codec
            = pb::FieldCodec.ForInt32(18);
        private readonly pbc::RepeatedField<int> positionIds_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// bingo数据队列
        /// </summary>
        public pbc::RepeatedField<int> PositionIds {
          get { return positionIds_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (LineId != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(LineId);
          }
          positionIds_.WriteTo(output, _repeated_positionIds_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (LineId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineId);
          }
          size += positionIds_.CalculateSize(_repeated_positionIds_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                LineId = input.ReadInt32();
                break;
              }
              case 18:
              case 16: {
                positionIds_.AddEntriesFrom(input, _repeated_positionIds_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class BingoData : pb::IMessage {
        private static readonly pb::MessageParser<BingoData> _parser = new pb::MessageParser<BingoData>(() => new BingoData());
        public static pb::MessageParser<BingoData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bingo数据length为25;
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> Items {
          get { return items_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoLine> _repeated_lines_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoLine.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoLine> lines_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoLine>();
        /// <summary>
        /// bingo成功线
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoLine> Lines {
          get { return lines_; }
        }

        private static readonly pb::FieldCodec<int> _repeated_hotSpots_codec
            = pb::FieldCodec.ForInt32(26);
        private readonly pbc::RepeatedField<int> hotSpots_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// 绝胜点
        /// </summary>
        public pbc::RepeatedField<int> HotSpots {
          get { return hotSpots_; }
        }

        private bool isCross_;
        /// <summary>
        /// 是否cross类型的bingo
        /// </summary>
        public bool IsCross {
          get { return isCross_; }
          set {
            isCross_ = value;
          }
        }

        private bool isBlock_;
        /// <summary>
        /// 是否block类型的bingo
        /// </summary>
        public bool IsBlock {
          get { return isBlock_; }
          set {
            isBlock_ = value;
          }
        }

        private ulong totalWin_;
        /// <summary>
        /// bingo 总奖励
        /// </summary>
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> _repeated_startIncrease_codec
            = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> startIncrease_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bingo新局刚开始的items
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> StartIncrease {
          get { return startIncrease_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> _repeated_randomIncrease_codec
            = pb::FieldCodec.ForMessage(66, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> randomIncrease_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bing每局随机加入的items
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> RandomIncrease {
          get { return randomIncrease_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> _repeated_panelIncrease_codec
            = pb::FieldCodec.ForMessage(74, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> panelIncrease_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem>();
        /// <summary>
        /// bingo每局panel上增加的items
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoItem> PanelIncrease {
          get { return panelIncrease_; }
        }

        private bool isOver_;
        /// <summary>
        /// 用于super bingo, 表示FreeSpin已经结束。 注意这里不是指触发bingo
        /// </summary>
        public bool IsOver {
          get { return isOver_; }
          set {
            isOver_ = value;
          }
        }

        private ulong bet_;
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private int currentBonusLine_;
        public int CurrentBonusLine {
          get { return currentBonusLine_; }
          set {
            currentBonusLine_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoHotLine> _repeated_hotLines_codec
            = pb::FieldCodec.ForMessage(106, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoHotLine.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoHotLine> hotLines_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoHotLine>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.BingoHotLine> HotLines {
          get { return hotLines_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          lines_.WriteTo(output, _repeated_lines_codec);
          hotSpots_.WriteTo(output, _repeated_hotSpots_codec);
          if (IsCross != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsCross);
          }
          if (IsBlock != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsBlock);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(TotalWin);
          }
          startIncrease_.WriteTo(output, _repeated_startIncrease_codec);
          randomIncrease_.WriteTo(output, _repeated_randomIncrease_codec);
          panelIncrease_.WriteTo(output, _repeated_panelIncrease_codec);
          if (IsOver != false) {
            output.WriteRawTag(80);
            output.WriteBool(IsOver);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(88);
            output.WriteUInt64(Bet);
          }
          if (CurrentBonusLine != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(CurrentBonusLine);
          }
          hotLines_.WriteTo(output, _repeated_hotLines_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          size += lines_.CalculateSize(_repeated_lines_codec);
          size += hotSpots_.CalculateSize(_repeated_hotSpots_codec);
          if (IsCross != false) {
            size += 1 + 1;
          }
          if (IsBlock != false) {
            size += 1 + 1;
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          size += startIncrease_.CalculateSize(_repeated_startIncrease_codec);
          size += randomIncrease_.CalculateSize(_repeated_randomIncrease_codec);
          size += panelIncrease_.CalculateSize(_repeated_panelIncrease_codec);
          if (IsOver != false) {
            size += 1 + 1;
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (CurrentBonusLine != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentBonusLine);
          }
          size += hotLines_.CalculateSize(_repeated_hotLines_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 18: {
                lines_.AddEntriesFrom(input, _repeated_lines_codec);
                break;
              }
              case 26:
              case 24: {
                hotSpots_.AddEntriesFrom(input, _repeated_hotSpots_codec);
                break;
              }
              case 32: {
                IsCross = input.ReadBool();
                break;
              }
              case 40: {
                IsBlock = input.ReadBool();
                break;
              }
              case 48: {
                TotalWin = input.ReadUInt64();
                break;
              }
              case 58: {
                startIncrease_.AddEntriesFrom(input, _repeated_startIncrease_codec);
                break;
              }
              case 66: {
                randomIncrease_.AddEntriesFrom(input, _repeated_randomIncrease_codec);
                break;
              }
              case 74: {
                panelIncrease_.AddEntriesFrom(input, _repeated_panelIncrease_codec);
                break;
              }
              case 80: {
                IsOver = input.ReadBool();
                break;
              }
              case 88: {
                Bet = input.ReadUInt64();
                break;
              }
              case 96: {
                CurrentBonusLine = input.ReadInt32();
                break;
              }
              case 106: {
                hotLines_.AddEntriesFrom(input, _repeated_hotLines_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class Pot : pb::IMessage {
        private static readonly pb::MessageParser<Pot> _parser = new pb::MessageParser<Pot>(() => new Pot());
        public static pb::MessageParser<Pot> Parser { get { return _parser; } }

        private uint level_;
        /// <summary>
        /// 地图上的进度等级
        /// </summary>
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Level != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Level);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Level = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class Wheel : pb::IMessage {
        private static readonly pb::MessageParser<Wheel> _parser = new pb::MessageParser<Wheel>(() => new Wheel());
        public static pb::MessageParser<Wheel> Parser { get { return _parser; } }

        private bool chosen_;
        /// <summary>
        /// 轮盘是否选择
        /// </summary>
        public bool Chosen {
          get { return chosen_; }
          set {
            chosen_ = value;
          }
        }

        private int choice_;
        /// <summary>
        /// 轮盘结果
        /// </summary>
        public int Choice {
          get { return choice_; }
          set {
            choice_ = value;
          }
        }

        private ulong bet_;
        /// <summary>
        /// 轮盘基础bet
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private bool isSuperFree_;
        /// <summary>
        /// 是否是superFree
        /// </summary>
        public bool IsSuperFree {
          get { return isSuperFree_; }
          set {
            isSuperFree_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.Wheel.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(42, global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.Wheel.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.Wheel.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.Wheel.Types.Item>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BingoClover3GameResultExtraInfo.Types.Wheel.Types.Item> Items {
          get { return items_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Chosen != false) {
            output.WriteRawTag(8);
            output.WriteBool(Chosen);
          }
          if (Choice != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Choice);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Bet);
          }
          if (IsSuperFree != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsSuperFree);
          }
          items_.WriteTo(output, _repeated_items_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Chosen != false) {
            size += 1 + 1;
          }
          if (Choice != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Choice);
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (IsSuperFree != false) {
            size += 1 + 1;
          }
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Chosen = input.ReadBool();
                break;
              }
              case 16: {
                Choice = input.ReadInt32();
                break;
              }
              case 24: {
                Bet = input.ReadUInt64();
                break;
              }
              case 32: {
                IsSuperFree = input.ReadBool();
                break;
              }
              case 42: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Wheel message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private int jackpotId_;
            public int JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private uint winRate_;
            public uint WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (JackpotId != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(JackpotId);
              }
              if (WinRate != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(WinRate);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotId);
              }
              if (WinRate != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinRate);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    JackpotId = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    WinRate = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///================= PharaohTreasure3 ================
  /// </summary>
  public sealed class PharaohTreasure3GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<PharaohTreasure3GameResultExtraInfo> _parser = new pb::MessageParser<PharaohTreasure3GameResultExtraInfo>(() => new PharaohTreasure3GameResultExtraInfo());
    public static pb::MessageParser<PharaohTreasure3GameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasure3GameResultExtraInfo.Types.JackpotWord> _repeated_jackpotWords_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasure3GameResultExtraInfo.Types.JackpotWord.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasure3GameResultExtraInfo.Types.JackpotWord> jackpotWords_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasure3GameResultExtraInfo.Types.JackpotWord>();
    /// <summary>
    /// jackpot word情况: GRAND, MAJOR, MINOR, MINI
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasure3GameResultExtraInfo.Types.JackpotWord> JackpotWords {
      get { return jackpotWords_; }
    }

    private static readonly pb::FieldCodec<bool> _repeated_freeGameType_codec
        = pb::FieldCodec.ForBool(18);
    private readonly pbc::RepeatedField<bool> freeGameType_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// 当前freeSpin游戏的类型， 按照绿红紫顺序。 如果当前是绿紫feature，free_game_type为[true, false, true]
    /// </summary>
    public pbc::RepeatedField<bool> FreeGameType {
      get { return freeGameType_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasure3GameResultExtraInfo.Types.FeatureState> _repeated_featureStates_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasure3GameResultExtraInfo.Types.FeatureState.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasure3GameResultExtraInfo.Types.FeatureState> featureStates_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasure3GameResultExtraInfo.Types.FeatureState>();
    /// <summary>
    /// 当前三个魔法罐子的激活状态， 按照绿红紫顺序。
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.PharaohTreasure3GameResultExtraInfo.Types.FeatureState> FeatureStates {
      get { return featureStates_; }
    }

    private static readonly pbc::MapField<uint, int>.Codec _map_greenReelPositionMap_codec
        = new pbc::MapField<uint, int>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForInt32(16), 34);
    private readonly pbc::MapField<uint, int> greenReelPositionMap_ = new pbc::MapField<uint, int>();
    /// <summary>
    /// 当前绿色feature拉wild信息 key: col 0-4, value: 上下偏移; drag wild
    /// </summary>
    public pbc::MapField<uint, int> GreenReelPositionMap {
      get { return greenReelPositionMap_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      jackpotWords_.WriteTo(output, _repeated_jackpotWords_codec);
      freeGameType_.WriteTo(output, _repeated_freeGameType_codec);
      featureStates_.WriteTo(output, _repeated_featureStates_codec);
      greenReelPositionMap_.WriteTo(output, _map_greenReelPositionMap_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += jackpotWords_.CalculateSize(_repeated_jackpotWords_codec);
      size += freeGameType_.CalculateSize(_repeated_freeGameType_codec);
      size += featureStates_.CalculateSize(_repeated_featureStates_codec);
      size += greenReelPositionMap_.CalculateSize(_map_greenReelPositionMap_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            jackpotWords_.AddEntriesFrom(input, _repeated_jackpotWords_codec);
            break;
          }
          case 18:
          case 16: {
            freeGameType_.AddEntriesFrom(input, _repeated_freeGameType_codec);
            break;
          }
          case 26: {
            featureStates_.AddEntriesFrom(input, _repeated_featureStates_codec);
            break;
          }
          case 34: {
            greenReelPositionMap_.AddEntriesFrom(input, _map_greenReelPositionMap_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PharaohTreasure3GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class JackpotWord : pb::IMessage {
        private static readonly pb::MessageParser<JackpotWord> _parser = new pb::MessageParser<JackpotWord>(() => new JackpotWord());
        public static pb::MessageParser<JackpotWord> Parser { get { return _parser; } }

        private uint jackpotId_;
        /// <summary>
        /// jackpotId
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private static readonly pb::FieldCodec<bool> _repeated_state_codec
            = pb::FieldCodec.ForBool(18);
        private readonly pbc::RepeatedField<bool> state_ = new pbc::RepeatedField<bool>();
        /// <summary>
        /// 最新字母收集情况, 例: 如果GRAND收集了G,A,D, state为[true, false, true, false, true]
        /// </summary>
        public pbc::RepeatedField<bool> State {
          get { return state_; }
        }

        private uint count_;
        /// <summary>
        /// 这一次spin中奖本单词的次数，多数情况是0或1，少数情况大于1（这一次spin让mini收集了2次!）。
        /// </summary>
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (JackpotId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(JackpotId);
          }
          state_.WriteTo(output, _repeated_state_codec);
          if (Count != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Count);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          size += state_.CalculateSize(_repeated_state_codec);
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 18:
              case 16: {
                state_.AddEntriesFrom(input, _repeated_state_codec);
                break;
              }
              case 24: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class FeatureState : pb::IMessage {
        private static readonly pb::MessageParser<FeatureState> _parser = new pb::MessageParser<FeatureState>(() => new FeatureState());
        public static pb::MessageParser<FeatureState> Parser { get { return _parser; } }

        private bool activated_;
        /// <summary>
        /// 激活
        /// </summary>
        public bool Activated {
          get { return activated_; }
          set {
            activated_ = value;
          }
        }

        private bool exaggerated_;
        /// <summary>
        /// 变大
        /// </summary>
        public bool Exaggerated {
          get { return exaggerated_; }
          set {
            exaggerated_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Activated != false) {
            output.WriteRawTag(8);
            output.WriteBool(Activated);
          }
          if (Exaggerated != false) {
            output.WriteRawTag(16);
            output.WriteBool(Exaggerated);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Activated != false) {
            size += 1 + 1;
          }
          if (Exaggerated != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Activated = input.ReadBool();
                break;
              }
              case 16: {
                Exaggerated = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*======================== FireLinkByTheBay3 ============================*/
  /// </summary>
  public sealed class FireLinkByTheBay3GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<FireLinkByTheBay3GameResultExtraInfo> _parser = new pb::MessageParser<FireLinkByTheBay3GameResultExtraInfo>(() => new FireLinkByTheBay3GameResultExtraInfo());
    public static pb::MessageParser<FireLinkByTheBay3GameResultExtraInfo> Parser { get { return _parser; } }

    private uint pepperCount_;
    /// <summary>
    /// 辣椒数量； 看情况需不需要添加old_pepper_count
    /// </summary>
    public uint PepperCount {
      get { return pepperCount_; }
      set {
        pepperCount_ = value;
      }
    }

    private uint linkHeight_;
    /// <summary>
    ///link玩法解锁那高度 普通一开始是4，最高8。每一级提升需要的辣椒数分别是 8, 12, 16, 20; 看情况需不需要添加old_link_height；
    /// </summary>
    public uint LinkHeight {
      get { return linkHeight_; }
      set {
        linkHeight_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBay3GameResultExtraInfo.Types.LinkData linkData_;
    /// <summary>
    /// link数据，positionId从0到39
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBay3GameResultExtraInfo.Types.LinkData LinkData {
      get { return linkData_; }
      set {
        linkData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PepperCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PepperCount);
      }
      if (LinkHeight != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LinkHeight);
      }
      if (linkData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LinkData);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PepperCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PepperCount);
      }
      if (LinkHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LinkHeight);
      }
      if (linkData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PepperCount = input.ReadUInt32();
            break;
          }
          case 16: {
            LinkHeight = input.ReadUInt32();
            break;
          }
          case 26: {
            if (linkData_ == null) {
              linkData_ = new global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBay3GameResultExtraInfo.Types.LinkData();
            }
            input.ReadMessage(linkData_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FireLinkByTheBay3GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class LinkData : pb::IMessage {
        private static readonly pb::MessageParser<LinkData> _parser = new pb::MessageParser<LinkData>(() => new LinkData());
        public static pb::MessageParser<LinkData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBay3GameResultExtraInfo.Types.LinkData.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBay3GameResultExtraInfo.Types.LinkData.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBay3GameResultExtraInfo.Types.LinkData.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBay3GameResultExtraInfo.Types.LinkData.Types.Item>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.FireLinkByTheBay3GameResultExtraInfo.Types.LinkData.Types.Item> Items {
          get { return items_; }
        }

        private static readonly pbc::MapField<uint, uint>.Codec _map_reelMapping_codec
            = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 18);
        private readonly pbc::MapField<uint, uint> reelMapping_ = new pbc::MapField<uint, uint>();
        /// <summary>
        /// linkReels轴映射
        /// </summary>
        public pbc::MapField<uint, uint> ReelMapping {
          get { return reelMapping_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          reelMapping_.WriteTo(output, _map_reelMapping_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          size += reelMapping_.CalculateSize(_map_reelMapping_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 18: {
                reelMapping_.AddEntriesFrom(input, _map_reelMapping_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LinkData message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private uint positionId_;
            /// <summary>
            /// 位置
            /// </summary>
            public uint PositionId {
              get { return positionId_; }
              set {
                positionId_ = value;
              }
            }

            private uint symbolId_;
            /// <summary>
            /// 现实图标
            /// </summary>
            public uint SymbolId {
              get { return symbolId_; }
              set {
                symbolId_ = value;
              }
            }

            private ulong winRate_;
            /// <summary>
            /// 赢钱倍率
            /// </summary>
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            private uint jackpotId_;
            /// <summary>
            /// jackpot id
            /// </summary>
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private ulong jackpotPay_;
            /// <summary>
            /// jackpot pay
            /// </summary>
            public ulong JackpotPay {
              get { return jackpotPay_; }
              set {
                jackpotPay_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (PositionId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PositionId);
              }
              if (SymbolId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(SymbolId);
              }
              if (WinRate != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(WinRate);
              }
              if (JackpotId != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(JackpotId);
              }
              if (JackpotPay != 0UL) {
                output.WriteRawTag(40);
                output.WriteUInt64(JackpotPay);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (PositionId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
              }
              if (SymbolId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
              }
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              if (JackpotPay != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    PositionId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    SymbolId = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                  case 32: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    JackpotPay = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///*============================== EyeOfMedusa3 ================================*/
  /// 这关有两个复杂点：
  /// 1： feature很多，主要看后面的字段描述 belle feature, bag feature, wheel, map free
  /// 2： free的总类很多，主要依靠freeSpinInfo.freeSpinId进行区分
  ///    freeSpinId == 0, 表示普通free，靠wheel转出来
  ///    freeSpinId == 1, 表示belle free，靠wheel转出来
  ///    freeSpinId == 2, 表示map中的，classic free, avgBet
  ///    freeSpinId == 3, 表示map中的，random wild类型free, avgBet
  ///    freeSpinId == 4, 表示map中的，moving wild类型free, avgBet
  ///    freeSpinId == 5, 表示map中的，sticky wild类型free, avgBet
  ///    freeSpinId == 6, 表示map中的，2-10 multiplier wild类型free, avgBet
  ///    freeSpinId == 7, 表示map中的，5-50 multiplier wild类型free, avgBet
  ///    freeSpinId == 8, 表示map中的，10-100 multiplier wild类型free, avgBet
  /// 特殊赢钱线：
  /// 1 scatter触发wheel bonusGameId = 1001
  /// 2 s1触发map，bonusGameId = 2002
  /// 3 belle feature中 gems的特殊赢钱线 bonsGameId = 3001
  /// 4 bag特殊赢钱线，bonusGameId = 4001
  /// 多状态转化同时触发情况：
  /// base可以同时触发map和wheel，此时先完成map，再进行wheel。
  /// 会在map的settle api返回: gameResult.bonusGame > 0 和 extra.wheel.started = true;
  /// </summary>
  public sealed class EyeOfMedusa3GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<EyeOfMedusa3GameResultExtraInfo> _parser = new pb::MessageParser<EyeOfMedusa3GameResultExtraInfo>(() => new EyeOfMedusa3GameResultExtraInfo());
    public static pb::MessageParser<EyeOfMedusa3GameResultExtraInfo> Parser { get { return _parser; } }

    private uint level_;
    /// <summary>
    /// map related
    /// </summary>
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private uint point_;
    /// <summary>
    /// map 的累计槽进度,
    /// </summary>
    public uint Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    private uint maxPoint_;
    /// <summary>
    /// map 的累计槽最大值， 注意point累积触发map free时，point可能超过max_point
    /// </summary>
    public uint MaxPoint {
      get { return maxPoint_; }
      set {
        maxPoint_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedPositions> _repeated_mapRandomWilds_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedPositions.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedPositions> mapRandomWilds_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedPositions>();
    /// <summary>
    /// map 玩法的随机wild位置, index是0，1，2对应第几个panel
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedPositions> MapRandomWilds {
      get { return mapRandomWilds_; }
    }

    private static readonly pb::FieldCodec<uint> _repeated_mapMultipliers_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> mapMultipliers_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// map 玩法倍数
    /// </summary>
    public pbc::RepeatedField<uint> MapMultipliers {
      get { return mapMultipliers_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedPositionIds> _repeated_mapStickyWilds_codec
        = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedPositionIds.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedPositionIds> mapStickyWilds_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedPositionIds>();
    /// <summary>
    /// map 玩法的sticky wild位置, index是 0，1，2对应第几个panel
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedPositionIds> MapStickyWilds {
      get { return mapStickyWilds_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedMovingPositionIds> _repeated_mapMovingWilds_codec
        = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedMovingPositionIds.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedMovingPositionIds> mapMovingWilds_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedMovingPositionIds>();
    /// <summary>
    /// map 玩法的moving wild位置, index是0，1，2对应第几个panel
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.RepeatedMovingPositionIds> MapMovingWilds {
      get { return mapMovingWilds_; }
    }

    private bool isFeature_;
    /// <summary>
    /// belle feature related
    /// </summary>
    public bool IsFeature {
      get { return isFeature_; }
      set {
        isFeature_ = value;
      }
    }

    private static readonly pbc::MapField<uint, int>.Codec _map_dragReelPositionMap_codec
        = new pbc::MapField<uint, int>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForInt32(16), 74);
    private readonly pbc::MapField<uint, int> dragReelPositionMap_ = new pbc::MapField<uint, int>();
    /// <summary>
    /// 触发feature的时候第一列可能发生drag；这里用一个map是为了和其他任何列都能drag的游戏统一
    /// </summary>
    public pbc::MapField<uint, int> DragReelPositionMap {
      get { return dragReelPositionMap_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.PositionId> _repeated_randomPositionedGems_codec
        = pb::FieldCodec.ForMessage(82, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.PositionId.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.PositionId> randomPositionedGems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.PositionId>();
    /// <summary>
    /// 粗发feature的时候 生成的随机gems
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.PositionId> RandomPositionedGems {
      get { return randomPositionedGems_; }
    }

    private uint bagLevel_;
    /// <summary>
    /// bag feature related
    /// </summary>
    public uint BagLevel {
      get { return bagLevel_; }
      set {
        bagLevel_ = value;
      }
    }

    private static readonly pb::FieldCodec<uint> _repeated_bagLevelHistory_codec
        = pb::FieldCodec.ForUInt32(98);
    private readonly pbc::RepeatedField<uint> bagLevelHistory_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// bag_level_history类似一些游戏的old_level,old_points, 但这里数个数组，因为可能一次转出多个bag;
    /// 正常没有bag转出时它是空
    /// 例1： 如果转出1个bag，而且他中了， 转出前bag_level是1
    /// 那么返回: bag_level = 0; bag_level_history = [1]
    /// 例2： 如果转出1个bag，但他没中， 转出前bag_level是2
    /// 那么返回: bag_level = 2; bag_level_history = [2]
    /// 例3： 如果转出2个bag，转出前bag_level是1，第一个bag没中让bag_level加1，第二个bag中了
    /// 那么返回: bag_level = 0; bqg_level_history = [1, 2]
    /// 例4：如果转出4个bag，转出前bag_level是1，第一个bag没中， 第二个bag没中， 第三个bag中了， 第四个bag没中
    /// 那么返回: bag_level = 1; bag_level_history = [1, 2，2，0]
    /// </summary>
    public pbc::RepeatedField<uint> BagLevelHistory {
      get { return bagLevelHistory_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Position> _repeated_normalFreeRandomWilds_codec
        = pb::FieldCodec.ForMessage(106, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Position.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Position> normalFreeRandomWilds_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Position>();
    /// <summary>
    /// normal free related
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Position> NormalFreeRandomWilds {
      get { return normalFreeRandomWilds_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Wheel wheel_;
    /// <summary>
    /// wheel数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Wheel Wheel {
      get { return wheel_; }
      set {
        wheel_ = value;
      }
    }

    private ulong mapFreePreWin_;
    /// <summary>
    /// map free pre win
    /// </summary>
    public ulong MapFreePreWin {
      get { return mapFreePreWin_; }
      set {
        mapFreePreWin_ = value;
      }
    }

    private ulong bagWin_;
    /// <summary>
    /// bagWin
    /// </summary>
    public ulong BagWin {
      get { return bagWin_; }
      set {
        bagWin_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (Point != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Point);
      }
      if (MaxPoint != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxPoint);
      }
      mapRandomWilds_.WriteTo(output, _repeated_mapRandomWilds_codec);
      mapMultipliers_.WriteTo(output, _repeated_mapMultipliers_codec);
      mapStickyWilds_.WriteTo(output, _repeated_mapStickyWilds_codec);
      mapMovingWilds_.WriteTo(output, _repeated_mapMovingWilds_codec);
      if (IsFeature != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsFeature);
      }
      dragReelPositionMap_.WriteTo(output, _map_dragReelPositionMap_codec);
      randomPositionedGems_.WriteTo(output, _repeated_randomPositionedGems_codec);
      if (BagLevel != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(BagLevel);
      }
      bagLevelHistory_.WriteTo(output, _repeated_bagLevelHistory_codec);
      normalFreeRandomWilds_.WriteTo(output, _repeated_normalFreeRandomWilds_codec);
      if (wheel_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Wheel);
      }
      if (MapFreePreWin != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(MapFreePreWin);
      }
      if (BagWin != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(BagWin);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Point != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Point);
      }
      if (MaxPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPoint);
      }
      size += mapRandomWilds_.CalculateSize(_repeated_mapRandomWilds_codec);
      size += mapMultipliers_.CalculateSize(_repeated_mapMultipliers_codec);
      size += mapStickyWilds_.CalculateSize(_repeated_mapStickyWilds_codec);
      size += mapMovingWilds_.CalculateSize(_repeated_mapMovingWilds_codec);
      if (IsFeature != false) {
        size += 1 + 1;
      }
      size += dragReelPositionMap_.CalculateSize(_map_dragReelPositionMap_codec);
      size += randomPositionedGems_.CalculateSize(_repeated_randomPositionedGems_codec);
      if (BagLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BagLevel);
      }
      size += bagLevelHistory_.CalculateSize(_repeated_bagLevelHistory_codec);
      size += normalFreeRandomWilds_.CalculateSize(_repeated_normalFreeRandomWilds_codec);
      if (wheel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wheel);
      }
      if (MapFreePreWin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MapFreePreWin);
      }
      if (BagWin != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(BagWin);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            Point = input.ReadUInt32();
            break;
          }
          case 24: {
            MaxPoint = input.ReadUInt32();
            break;
          }
          case 34: {
            mapRandomWilds_.AddEntriesFrom(input, _repeated_mapRandomWilds_codec);
            break;
          }
          case 42:
          case 40: {
            mapMultipliers_.AddEntriesFrom(input, _repeated_mapMultipliers_codec);
            break;
          }
          case 50: {
            mapStickyWilds_.AddEntriesFrom(input, _repeated_mapStickyWilds_codec);
            break;
          }
          case 58: {
            mapMovingWilds_.AddEntriesFrom(input, _repeated_mapMovingWilds_codec);
            break;
          }
          case 64: {
            IsFeature = input.ReadBool();
            break;
          }
          case 74: {
            dragReelPositionMap_.AddEntriesFrom(input, _map_dragReelPositionMap_codec);
            break;
          }
          case 82: {
            randomPositionedGems_.AddEntriesFrom(input, _repeated_randomPositionedGems_codec);
            break;
          }
          case 88: {
            BagLevel = input.ReadUInt32();
            break;
          }
          case 98:
          case 96: {
            bagLevelHistory_.AddEntriesFrom(input, _repeated_bagLevelHistory_codec);
            break;
          }
          case 106: {
            normalFreeRandomWilds_.AddEntriesFrom(input, _repeated_normalFreeRandomWilds_codec);
            break;
          }
          case 114: {
            if (wheel_ == null) {
              wheel_ = new global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Wheel();
            }
            input.ReadMessage(wheel_);
            break;
          }
          case 120: {
            MapFreePreWin = input.ReadUInt64();
            break;
          }
          case 128: {
            BagWin = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EyeOfMedusa3GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class Position : pb::IMessage {
        private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
        public static pb::MessageParser<Position> Parser { get { return _parser; } }

        private uint x_;
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class RepeatedPositions : pb::IMessage {
        private static readonly pb::MessageParser<RepeatedPositions> _parser = new pb::MessageParser<RepeatedPositions>(() => new RepeatedPositions());
        public static pb::MessageParser<RepeatedPositions> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Position> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Position.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Position> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Position>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Position> Items {
          get { return items_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class PositionId : pb::IMessage {
        private static readonly pb::MessageParser<PositionId> _parser = new pb::MessageParser<PositionId>(() => new PositionId());
        public static pb::MessageParser<PositionId> Parser { get { return _parser; } }

        private uint x_;
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        private uint id_;
        /// <summary>
        /// symbol id
        /// </summary>
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
          if (Id != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Id);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
              case 24: {
                Id = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class RepeatedPositionIds : pb::IMessage {
        private static readonly pb::MessageParser<RepeatedPositionIds> _parser = new pb::MessageParser<RepeatedPositionIds>(() => new RepeatedPositionIds());
        public static pb::MessageParser<RepeatedPositionIds> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.PositionId> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.PositionId.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.PositionId> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.PositionId>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.PositionId> Items {
          get { return items_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class MovingPositionId : pb::IMessage {
        private static readonly pb::MessageParser<MovingPositionId> _parser = new pb::MessageParser<MovingPositionId>(() => new MovingPositionId());
        public static pb::MessageParser<MovingPositionId> Parser { get { return _parser; } }

        private bool moving_;
        /// <summary>
        /// 当前位置是否不是新转出来的(可能用词略有歧义，主要区分这一把转出来的和之前转出来的，之前转出来spin之前会moving)；新转出来的sticky moving=false
        /// </summary>
        public bool Moving {
          get { return moving_; }
          set {
            moving_ = value;
          }
        }

        private uint oldX_;
        /// <summary>
        /// 老位置， 注意有可能 老位置==新位置 and moving == true
        /// </summary>
        public uint OldX {
          get { return oldX_; }
          set {
            oldX_ = value;
          }
        }

        private uint oldY_;
        /// <summary>
        /// 老位置  当 moving == false时， 老位置 必定等于 新位置
        /// </summary>
        public uint OldY {
          get { return oldY_; }
          set {
            oldY_ = value;
          }
        }

        private uint x_;
        /// <summary>
        /// 新位置
        /// </summary>
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        /// <summary>
        /// 新位置
        /// </summary>
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        private uint id_;
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Moving != false) {
            output.WriteRawTag(8);
            output.WriteBool(Moving);
          }
          if (OldX != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(OldX);
          }
          if (OldY != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(OldY);
          }
          if (X != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(Y);
          }
          if (Id != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Id);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Moving != false) {
            size += 1 + 1;
          }
          if (OldX != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldX);
          }
          if (OldY != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldY);
          }
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Moving = input.ReadBool();
                break;
              }
              case 16: {
                OldX = input.ReadUInt32();
                break;
              }
              case 24: {
                OldY = input.ReadUInt32();
                break;
              }
              case 32: {
                X = input.ReadUInt32();
                break;
              }
              case 40: {
                Y = input.ReadUInt32();
                break;
              }
              case 48: {
                Id = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class RepeatedMovingPositionIds : pb::IMessage {
        private static readonly pb::MessageParser<RepeatedMovingPositionIds> _parser = new pb::MessageParser<RepeatedMovingPositionIds>(() => new RepeatedMovingPositionIds());
        public static pb::MessageParser<RepeatedMovingPositionIds> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.MovingPositionId> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.MovingPositionId.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.MovingPositionId> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.MovingPositionId>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.MovingPositionId> Items {
          get { return items_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// wheel related
      /// </summary>
      public sealed class Wheel : pb::IMessage {
        private static readonly pb::MessageParser<Wheel> _parser = new pb::MessageParser<Wheel>(() => new Wheel());
        public static pb::MessageParser<Wheel> Parser { get { return _parser; } }

        private ulong bet_;
        /// <summary>
        /// 进入wheel的bet
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private ulong totalWin_;
        /// <summary>
        /// wheel的总赢钱；类似freeSpinInfo.freeSpinTotalWin; 包括触发的线赢甚至同时触发map时，之前map的总赢
        /// </summary>
        public ulong TotalWin {
          get { return totalWin_; }
          set {
            totalWin_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_triggeringPanels_codec
            = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> triggeringPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        /// <summary>
        /// 触发的panel
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> TriggeringPanels {
          get { return triggeringPanels_; }
        }

        private bool started_;
        /// <summary>
        /// 是否开始
        /// </summary>
        public bool Started {
          get { return started_; }
          set {
            started_ = value;
          }
        }

        private bool toSettle_;
        /// <summary>
        /// 是否结算完毕，用于判断是否该调用settle api
        /// </summary>
        public bool ToSettle {
          get { return toSettle_; }
          set {
            toSettle_ = value;
          }
        }

        private uint index_;
        /// <summary>
        /// wheel转出的结果的序号
        /// </summary>
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Wheel.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Wheel.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Wheel.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Wheel.Types.Item>();
        /// <summary>
        /// wheel里每一个item的信息
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.EyeOfMedusa3GameResultExtraInfo.Types.Wheel.Types.Item> Items {
          get { return items_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Bet != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Bet);
          }
          if (TotalWin != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(TotalWin);
          }
          triggeringPanels_.WriteTo(output, _repeated_triggeringPanels_codec);
          if (Started != false) {
            output.WriteRawTag(32);
            output.WriteBool(Started);
          }
          if (ToSettle != false) {
            output.WriteRawTag(40);
            output.WriteBool(ToSettle);
          }
          if (Index != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(Index);
          }
          items_.WriteTo(output, _repeated_items_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (TotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
          }
          size += triggeringPanels_.CalculateSize(_repeated_triggeringPanels_codec);
          if (Started != false) {
            size += 1 + 1;
          }
          if (ToSettle != false) {
            size += 1 + 1;
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          size += items_.CalculateSize(_repeated_items_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Bet = input.ReadUInt64();
                break;
              }
              case 16: {
                TotalWin = input.ReadUInt64();
                break;
              }
              case 26: {
                triggeringPanels_.AddEntriesFrom(input, _repeated_triggeringPanels_codec);
                break;
              }
              case 32: {
                Started = input.ReadBool();
                break;
              }
              case 40: {
                ToSettle = input.ReadBool();
                break;
              }
              case 48: {
                Index = input.ReadUInt32();
                break;
              }
              case 58: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Wheel message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private uint jackpotId_;
            /// <summary>
            /// 非0表示这是jackpot
            /// </summary>
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private bool isFeatureFree_;
            /// <summary>
            /// true表示这是触发belle free
            /// </summary>
            public bool IsFeatureFree {
              get { return isFeatureFree_; }
              set {
                isFeatureFree_ = value;
              }
            }

            private bool isNormalFree_;
            /// <summary>
            /// true表示这是触发普通free
            /// </summary>
            public bool IsNormalFree {
              get { return isNormalFree_; }
              set {
                isNormalFree_ = value;
              }
            }

            private bool isBagBonus_;
            /// <summary>
            /// true表示这是触发Bag
            /// </summary>
            public bool IsBagBonus {
              get { return isBagBonus_; }
              set {
                isBagBonus_ = value;
              }
            }

            private ulong winRate_;
            /// <summary>
            /// 如果是bag，这里是bag的winRate
            /// </summary>
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            private ulong jackpotPay_;
            /// <summary>
            /// 如果是jackpot，这里是jackpot的winRate
            /// </summary>
            public ulong JackpotPay {
              get { return jackpotPay_; }
              set {
                jackpotPay_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (JackpotId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(JackpotId);
              }
              if (IsFeatureFree != false) {
                output.WriteRawTag(16);
                output.WriteBool(IsFeatureFree);
              }
              if (IsNormalFree != false) {
                output.WriteRawTag(24);
                output.WriteBool(IsNormalFree);
              }
              if (IsBagBonus != false) {
                output.WriteRawTag(32);
                output.WriteBool(IsBagBonus);
              }
              if (WinRate != 0UL) {
                output.WriteRawTag(40);
                output.WriteUInt64(WinRate);
              }
              if (JackpotPay != 0UL) {
                output.WriteRawTag(48);
                output.WriteUInt64(JackpotPay);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              if (IsFeatureFree != false) {
                size += 1 + 1;
              }
              if (IsNormalFree != false) {
                size += 1 + 1;
              }
              if (IsBagBonus != false) {
                size += 1 + 1;
              }
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              if (JackpotPay != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    IsFeatureFree = input.ReadBool();
                    break;
                  }
                  case 24: {
                    IsNormalFree = input.ReadBool();
                    break;
                  }
                  case 32: {
                    IsBagBonus = input.ReadBool();
                    break;
                  }
                  case 40: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                  case 48: {
                    JackpotPay = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///*=========================== GorillaEatBanana2 ===============================*/
  /// </summary>
  public sealed class GorillaEatBanana2GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<GorillaEatBanana2GameResultExtraInfo> _parser = new pb::MessageParser<GorillaEatBanana2GameResultExtraInfo>(() => new GorillaEatBanana2GameResultExtraInfo());
    public static pb::MessageParser<GorillaEatBanana2GameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.GorillaEatBanana2GameResultExtraInfo.Types.Banana> _repeated_bananas_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.GorillaEatBanana2GameResultExtraInfo.Types.Banana.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GorillaEatBanana2GameResultExtraInfo.Types.Banana> bananas_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GorillaEatBanana2GameResultExtraInfo.Types.Banana>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.GorillaEatBanana2GameResultExtraInfo.Types.Banana> Bananas {
      get { return bananas_; }
    }

    private static readonly pb::FieldCodec<uint> _repeated_lastEatenPositionIds_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> lastEatenPositionIds_ = new pbc::RepeatedField<uint>();
    public pbc::RepeatedField<uint> LastEatenPositionIds {
      get { return lastEatenPositionIds_; }
    }

    private uint level_;
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      bananas_.WriteTo(output, _repeated_bananas_codec);
      lastEatenPositionIds_.WriteTo(output, _repeated_lastEatenPositionIds_codec);
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += bananas_.CalculateSize(_repeated_bananas_codec);
      size += lastEatenPositionIds_.CalculateSize(_repeated_lastEatenPositionIds_codec);
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            bananas_.AddEntriesFrom(input, _repeated_bananas_codec);
            break;
          }
          case 18:
          case 16: {
            lastEatenPositionIds_.AddEntriesFrom(input, _repeated_lastEatenPositionIds_codec);
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GorillaEatBanana2GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class Banana : pb::IMessage {
        private static readonly pb::MessageParser<Banana> _parser = new pb::MessageParser<Banana>(() => new Banana());
        public static pb::MessageParser<Banana> Parser { get { return _parser; } }

        private uint positionId_;
        public uint PositionId {
          get { return positionId_; }
          set {
            positionId_ = value;
          }
        }

        private ulong winRate_;
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        private uint jackpotId_;
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private ulong jackpotPay_;
        public ulong JackpotPay {
          get { return jackpotPay_; }
          set {
            jackpotPay_ = value;
          }
        }

        private bool isCoin_;
        public bool IsCoin {
          get { return isCoin_; }
          set {
            isCoin_ = value;
          }
        }

        private bool eaten_;
        public bool Eaten {
          get { return eaten_; }
          set {
            eaten_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (PositionId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PositionId);
          }
          if (WinRate != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(WinRate);
          }
          if (JackpotId != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(JackpotId);
          }
          if (JackpotPay != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(JackpotPay);
          }
          if (IsCoin != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsCoin);
          }
          if (Eaten != false) {
            output.WriteRawTag(48);
            output.WriteBool(Eaten);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (PositionId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
          }
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (JackpotPay != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
          }
          if (IsCoin != false) {
            size += 1 + 1;
          }
          if (Eaten != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PositionId = input.ReadUInt32();
                break;
              }
              case 16: {
                WinRate = input.ReadUInt64();
                break;
              }
              case 24: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 32: {
                JackpotPay = input.ReadUInt64();
                break;
              }
              case 40: {
                IsCoin = input.ReadBool();
                break;
              }
              case 48: {
                Eaten = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///*=========================== DragonRising2 ==================================*/
  /// </summary>
  public sealed class DragonRising2GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<DragonRising2GameResultExtraInfo> _parser = new pb::MessageParser<DragonRising2GameResultExtraInfo>(() => new DragonRising2GameResultExtraInfo());
    public static pb::MessageParser<DragonRising2GameResultExtraInfo> Parser { get { return _parser; } }

    private uint level_;
    /// <summary>
    /// free 相关
    /// </summary>
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private bool isMega_;
    /// <summary>
    /// 4, 8级 是mage
    /// </summary>
    public bool IsMega {
      get { return isMega_; }
      set {
        isMega_ = value;
      }
    }

    private bool isSuper_;
    /// <summary>
    /// 16级 是super
    /// </summary>
    public bool IsSuper {
      get { return isSuper_; }
      set {
        isSuper_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.Position> _repeated_randomWilds_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.Position.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.Position> randomWilds_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.Position>();
    /// <summary>
    /// mega的随机wild
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.Position> RandomWilds {
      get { return randomWilds_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.Position> _repeated_stickyWilds_codec
        = pb::FieldCodec.ForMessage(42, global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.Position.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.Position> stickyWilds_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.Position>();
    /// <summary>
    /// super的sticky wild
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.Position> StickyWilds {
      get { return stickyWilds_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.LinkData linkDataLeft_;
    /// <summary>
    /// link数据，左列， positionId 从上到下 0到2
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.LinkData LinkDataLeft {
      get { return linkDataLeft_; }
      set {
        linkDataLeft_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.LinkData linkDataRight_;
    /// <summary>
    /// link数据，右列, positionId 从上到下 0到2
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.LinkData LinkDataRight {
      get { return linkDataRight_; }
      set {
        linkDataRight_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.LinkData linkDataCenter_;
    /// <summary>
    /// link数据，中间, positionId 3列 7行， 从上到下 0到6， 从左到右 0到6 7到13 14到20
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.LinkData LinkDataCenter {
      get { return linkDataCenter_; }
      set {
        linkDataCenter_ = value;
      }
    }

    private uint rowsMoreOld_;
    /// <summary>
    /// 上一轮的 右边加楼层buff
    /// </summary>
    public uint RowsMoreOld {
      get { return rowsMoreOld_; }
      set {
        rowsMoreOld_ = value;
      }
    }

    private uint allWinMultiplierOld_;
    /// <summary>
    /// 上一轮的 左边加倍数buff
    /// </summary>
    public uint AllWinMultiplierOld {
      get { return allWinMultiplierOld_; }
      set {
        allWinMultiplierOld_ = value;
      }
    }

    private uint rowsMore_;
    /// <summary>
    /// 右边加楼层buff
    /// </summary>
    public uint RowsMore {
      get { return rowsMore_; }
      set {
        rowsMore_ = value;
      }
    }

    private uint allWinMultiplier_;
    /// <summary>
    /// 左边加倍数buff
    /// </summary>
    public uint AllWinMultiplier {
      get { return allWinMultiplier_; }
      set {
        allWinMultiplier_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (IsMega != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsMega);
      }
      if (IsSuper != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsSuper);
      }
      randomWilds_.WriteTo(output, _repeated_randomWilds_codec);
      stickyWilds_.WriteTo(output, _repeated_stickyWilds_codec);
      if (linkDataLeft_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LinkDataLeft);
      }
      if (linkDataRight_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LinkDataRight);
      }
      if (linkDataCenter_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LinkDataCenter);
      }
      if (RowsMoreOld != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(RowsMoreOld);
      }
      if (AllWinMultiplierOld != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(AllWinMultiplierOld);
      }
      if (RowsMore != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(RowsMore);
      }
      if (AllWinMultiplier != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(AllWinMultiplier);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (IsMega != false) {
        size += 1 + 1;
      }
      if (IsSuper != false) {
        size += 1 + 1;
      }
      size += randomWilds_.CalculateSize(_repeated_randomWilds_codec);
      size += stickyWilds_.CalculateSize(_repeated_stickyWilds_codec);
      if (linkDataLeft_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkDataLeft);
      }
      if (linkDataRight_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkDataRight);
      }
      if (linkDataCenter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkDataCenter);
      }
      if (RowsMoreOld != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RowsMoreOld);
      }
      if (AllWinMultiplierOld != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllWinMultiplierOld);
      }
      if (RowsMore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RowsMore);
      }
      if (AllWinMultiplier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllWinMultiplier);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            IsMega = input.ReadBool();
            break;
          }
          case 24: {
            IsSuper = input.ReadBool();
            break;
          }
          case 34: {
            randomWilds_.AddEntriesFrom(input, _repeated_randomWilds_codec);
            break;
          }
          case 42: {
            stickyWilds_.AddEntriesFrom(input, _repeated_stickyWilds_codec);
            break;
          }
          case 50: {
            if (linkDataLeft_ == null) {
              linkDataLeft_ = new global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.LinkData();
            }
            input.ReadMessage(linkDataLeft_);
            break;
          }
          case 58: {
            if (linkDataRight_ == null) {
              linkDataRight_ = new global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.LinkData();
            }
            input.ReadMessage(linkDataRight_);
            break;
          }
          case 66: {
            if (linkDataCenter_ == null) {
              linkDataCenter_ = new global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.LinkData();
            }
            input.ReadMessage(linkDataCenter_);
            break;
          }
          case 72: {
            RowsMoreOld = input.ReadUInt32();
            break;
          }
          case 80: {
            AllWinMultiplierOld = input.ReadUInt32();
            break;
          }
          case 88: {
            RowsMore = input.ReadUInt32();
            break;
          }
          case 96: {
            AllWinMultiplier = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DragonRising2GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class Position : pb::IMessage {
        private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
        public static pb::MessageParser<Position> Parser { get { return _parser; } }

        private uint x_;
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// link 相关
      /// 和其他link游戏的区别是：这个游戏的linkData分 左中右三部分返回；gameResult.panels也是左中右给了3个
      /// 注意：随着右边的buff加高度，中间的linkData不会改变positionId的规则；中间未解锁高度不会转出link图标，21个位置的positionId是不会变的；
      /// 例如：右边buff数值rows_more是0时， 中间positionId为 0到2 7到9 14到16 的地方不会转出link图标
      /// 右边buff数值rows_more是1时， 中间positionId为 0到1 7到8 14到15 的地方不会转出link图标
      /// 右边buff数值rows_more是3时， 中间所有地方可能转出link图标
      /// </summary>
      public sealed class LinkData : pb::IMessage {
        private static readonly pb::MessageParser<LinkData> _parser = new pb::MessageParser<LinkData>(() => new LinkData());
        public static pb::MessageParser<LinkData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.LinkData.Types.Item> _repeated_items_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.LinkData.Types.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.LinkData.Types.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.LinkData.Types.Item>();
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.DragonRising2GameResultExtraInfo.Types.LinkData.Types.Item> Items {
          get { return items_; }
        }

        private static readonly pbc::MapField<uint, uint>.Codec _map_reelMapping_codec
            = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt32(16), 18);
        private readonly pbc::MapField<uint, uint> reelMapping_ = new pbc::MapField<uint, uint>();
        /// <summary>
        /// linkReels轴映射
        /// </summary>
        public pbc::MapField<uint, uint> ReelMapping {
          get { return reelMapping_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          items_.WriteTo(output, _repeated_items_codec);
          reelMapping_.WriteTo(output, _map_reelMapping_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += items_.CalculateSize(_repeated_items_codec);
          size += reelMapping_.CalculateSize(_map_reelMapping_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                items_.AddEntriesFrom(input, _repeated_items_codec);
                break;
              }
              case 18: {
                reelMapping_.AddEntriesFrom(input, _map_reelMapping_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the LinkData message type.</summary>
        public static class Types {
          public sealed class Item : pb::IMessage {
            private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
            public static pb::MessageParser<Item> Parser { get { return _parser; } }

            private uint positionId_;
            /// <summary>
            /// 位置
            /// </summary>
            public uint PositionId {
              get { return positionId_; }
              set {
                positionId_ = value;
              }
            }

            private uint symbolId_;
            /// <summary>
            /// 现实图标
            /// </summary>
            public uint SymbolId {
              get { return symbolId_; }
              set {
                symbolId_ = value;
              }
            }

            private ulong winRate_;
            /// <summary>
            /// 赢钱倍率
            /// </summary>
            public ulong WinRate {
              get { return winRate_; }
              set {
                winRate_ = value;
              }
            }

            private uint jackpotId_;
            /// <summary>
            /// jackpot id
            /// </summary>
            public uint JackpotId {
              get { return jackpotId_; }
              set {
                jackpotId_ = value;
              }
            }

            private ulong jackpotPay_;
            /// <summary>
            /// jackpot pay
            /// </summary>
            public ulong JackpotPay {
              get { return jackpotPay_; }
              set {
                jackpotPay_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (PositionId != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(PositionId);
              }
              if (SymbolId != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(SymbolId);
              }
              if (WinRate != 0UL) {
                output.WriteRawTag(24);
                output.WriteUInt64(WinRate);
              }
              if (JackpotId != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(JackpotId);
              }
              if (JackpotPay != 0UL) {
                output.WriteRawTag(40);
                output.WriteUInt64(JackpotPay);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (PositionId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionId);
              }
              if (SymbolId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SymbolId);
              }
              if (WinRate != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
              }
              if (JackpotId != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
              }
              if (JackpotPay != 0UL) {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    PositionId = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    SymbolId = input.ReadUInt32();
                    break;
                  }
                  case 24: {
                    WinRate = input.ReadUInt64();
                    break;
                  }
                  case 32: {
                    JackpotId = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    JackpotPay = input.ReadUInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///*=========================== Zeus2 ==================================*/
  /// </summary>
  public sealed class Zeus2GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<Zeus2GameResultExtraInfo> _parser = new pb::MessageParser<Zeus2GameResultExtraInfo>(() => new Zeus2GameResultExtraInfo());
    public static pb::MessageParser<Zeus2GameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Zeus2GameResultExtraInfo.Types.Position> _repeated_stickyZeusPositions_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Zeus2GameResultExtraInfo.Types.Position.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Zeus2GameResultExtraInfo.Types.Position> stickyZeusPositions_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Zeus2GameResultExtraInfo.Types.Position>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Zeus2GameResultExtraInfo.Types.Position> StickyZeusPositions {
      get { return stickyZeusPositions_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Zeus2GameResultExtraInfo.Types.Position> _repeated_stickyWildPositions_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Zeus2GameResultExtraInfo.Types.Position.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Zeus2GameResultExtraInfo.Types.Position> stickyWildPositions_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Zeus2GameResultExtraInfo.Types.Position>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Zeus2GameResultExtraInfo.Types.Position> StickyWildPositions {
      get { return stickyWildPositions_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Column> _repeated_wildReels_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.Column.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Column> wildReels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Column>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Column> WildReels {
      get { return wildReels_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_finalPanels_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> finalPanels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> FinalPanels {
      get { return finalPanels_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      stickyZeusPositions_.WriteTo(output, _repeated_stickyZeusPositions_codec);
      stickyWildPositions_.WriteTo(output, _repeated_stickyWildPositions_codec);
      wildReels_.WriteTo(output, _repeated_wildReels_codec);
      finalPanels_.WriteTo(output, _repeated_finalPanels_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += stickyZeusPositions_.CalculateSize(_repeated_stickyZeusPositions_codec);
      size += stickyWildPositions_.CalculateSize(_repeated_stickyWildPositions_codec);
      size += wildReels_.CalculateSize(_repeated_wildReels_codec);
      size += finalPanels_.CalculateSize(_repeated_finalPanels_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            stickyZeusPositions_.AddEntriesFrom(input, _repeated_stickyZeusPositions_codec);
            break;
          }
          case 18: {
            stickyWildPositions_.AddEntriesFrom(input, _repeated_stickyWildPositions_codec);
            break;
          }
          case 26: {
            wildReels_.AddEntriesFrom(input, _repeated_wildReels_codec);
            break;
          }
          case 34: {
            finalPanels_.AddEntriesFrom(input, _repeated_finalPanels_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Zeus2GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class Position : pb::IMessage {
        private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
        public static pb::MessageParser<Position> Parser { get { return _parser; } }

        private uint x_;
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///
  ///特殊赢钱线：
  ///1 base下ReSpin满列会返回赢钱线，bonusID=101
  ///2 base收集的特殊赢钱线，bonusId=201, extra中有positioned_credits，看这个特殊赢钱线还有没必要
  ///
  ///商店系统：
  ///商店购买要调用新的special api，参数类似bonus_process api, 告诉要购买的位置
  ///注意商店一个Tab9个物品买完后，触发最后一次最终奖励也要调用special api
  ///
  ///不同freeSpinId意义：
  ///0 普通free
  ///1 shopNormalFree
  ///2 shopSuperFree
  ///3 shopFinalSuper1
  ///4 shopFinalSuper2
  ///5 shopFinalSuper3
  ///6 shopFinalSuper4
  /// </summary>
  public sealed class Chameleon2GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<Chameleon2GameResultExtraInfo> _parser = new pb::MessageParser<Chameleon2GameResultExtraInfo>(() => new Chameleon2GameResultExtraInfo());
    public static pb::MessageParser<Chameleon2GameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.NormalData>.Codec _map_normalDataMap_codec
        = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.NormalData>.Codec(pb::FieldCodec.ForUInt64(8), pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.NormalData.Parser), 10);
    private readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.NormalData> normalDataMap_ = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.NormalData>();
    /// <summary>
    /// base状态下reSpin-link Sticky信息; 是个map,key是bet，每个不同的bet存一份数据
    /// </summary>
    public pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.NormalData> NormalDataMap {
      get { return normalDataMap_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.PositionedCredit> _repeated_positionedCredits_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.PositionedCredit.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.PositionedCredit> positionedCredits_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.PositionedCredit>();
    /// <summary>
    /// base状态本次spin的金币获取信息
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.PositionedCredit> PositionedCredits {
      get { return positionedCredits_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.FreeData freeData_;
    /// <summary>
    /// free的状态下reSpin-link Sticky信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.FreeData FreeData {
      get { return freeData_; }
      set {
        freeData_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Shop shop_;
    /// <summary>
    /// 商店信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Shop Shop {
      get { return shop_; }
      set {
        shop_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.AvgBet avgBet_;
    /// <summary>
    /// average bet统计，策划需求终身制，不会重置， total_bet/spin_count，用于计算各种shop玩法的bet
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.AvgBet AvgBet {
      get { return avgBet_; }
      set {
        avgBet_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      normalDataMap_.WriteTo(output, _map_normalDataMap_codec);
      positionedCredits_.WriteTo(output, _repeated_positionedCredits_codec);
      if (freeData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FreeData);
      }
      if (shop_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Shop);
      }
      if (avgBet_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AvgBet);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += normalDataMap_.CalculateSize(_map_normalDataMap_codec);
      size += positionedCredits_.CalculateSize(_repeated_positionedCredits_codec);
      if (freeData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreeData);
      }
      if (shop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shop);
      }
      if (avgBet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvgBet);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            normalDataMap_.AddEntriesFrom(input, _map_normalDataMap_codec);
            break;
          }
          case 18: {
            positionedCredits_.AddEntriesFrom(input, _repeated_positionedCredits_codec);
            break;
          }
          case 26: {
            if (freeData_ == null) {
              freeData_ = new global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.FreeData();
            }
            input.ReadMessage(freeData_);
            break;
          }
          case 34: {
            if (shop_ == null) {
              shop_ = new global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Shop();
            }
            input.ReadMessage(shop_);
            break;
          }
          case 42: {
            if (avgBet_ == null) {
              avgBet_ = new global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.AvgBet();
            }
            input.ReadMessage(avgBet_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Chameleon2GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class StickyItem : pb::IMessage {
        private static readonly pb::MessageParser<StickyItem> _parser = new pb::MessageParser<StickyItem>(() => new StickyItem());
        public static pb::MessageParser<StickyItem> Parser { get { return _parser; } }

        private uint x_;
        /// <summary>
        /// 位置x
        /// </summary>
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        /// <summary>
        /// 位置y
        /// </summary>
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        private uint id_;
        /// <summary>
        /// symbol id
        /// </summary>
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        private ulong winRate_;
        /// <summary>
        /// winRate奖励
        /// </summary>
        public ulong WinRate {
          get { return winRate_; }
          set {
            winRate_ = value;
          }
        }

        private uint jackpotId_;
        /// <summary>
        /// jackpot id 不是jackpot取0
        /// </summary>
        public uint JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private ulong jackpotPay_;
        /// <summary>
        /// jackpot 奖励的winRate
        /// </summary>
        public ulong JackpotPay {
          get { return jackpotPay_; }
          set {
            jackpotPay_ = value;
          }
        }

        private uint multiplier_;
        /// <summary>
        /// 转盘倍数，正常是1
        /// </summary>
        public uint Multiplier {
          get { return multiplier_; }
          set {
            multiplier_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
          if (Id != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Id);
          }
          if (WinRate != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(WinRate);
          }
          if (JackpotId != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(JackpotId);
          }
          if (JackpotPay != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(JackpotPay);
          }
          if (Multiplier != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(Multiplier);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (WinRate != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
          }
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JackpotId);
          }
          if (JackpotPay != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(JackpotPay);
          }
          if (Multiplier != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Multiplier);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
              case 24: {
                Id = input.ReadUInt32();
                break;
              }
              case 32: {
                WinRate = input.ReadUInt64();
                break;
              }
              case 40: {
                JackpotId = input.ReadUInt32();
                break;
              }
              case 48: {
                JackpotPay = input.ReadUInt64();
                break;
              }
              case 56: {
                Multiplier = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class Position : pb::IMessage {
        private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
        public static pb::MessageParser<Position> Parser { get { return _parser; } }

        private uint x_;
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class NormalData : pb::IMessage {
        private static readonly pb::MessageParser<NormalData> _parser = new pb::MessageParser<NormalData>(() => new NormalData());
        public static pb::MessageParser<NormalData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.StickyItem> _repeated_stickyItems_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.StickyItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.StickyItem> stickyItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.StickyItem>();
        /// <summary>
        /// 每个sticky item信息
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.StickyItem> StickyItems {
          get { return stickyItems_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Position> _repeated_stickyAnticipation_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Position.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Position> stickyAnticipation_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Position>();
        /// <summary>
        /// 差一个sticky item的时候会出anti
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Position> StickyAnticipation {
          get { return stickyAnticipation_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_stickyColumnReSpinCounts_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> stickyColumnReSpinCounts_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 每一列的reSpin的数字
        /// </summary>
        public pbc::RepeatedField<uint> StickyColumnReSpinCounts {
          get { return stickyColumnReSpinCounts_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Panel> _repeated_panels_codec
            = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> panels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel>();
        /// <summary>
        /// panel
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Panel> Panels {
          get { return panels_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_fullIndexes_codec
            = pb::FieldCodec.ForUInt32(42);
        private readonly pbc::RepeatedField<uint> fullIndexes_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 因为满变成0的列
        /// </summary>
        public pbc::RepeatedField<uint> FullIndexes {
          get { return fullIndexes_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_failedIndexes_codec
            = pb::FieldCodec.ForUInt32(50);
        private readonly pbc::RepeatedField<uint> failedIndexes_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 自然减到0的列
        /// </summary>
        public pbc::RepeatedField<uint> FailedIndexes {
          get { return failedIndexes_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          stickyItems_.WriteTo(output, _repeated_stickyItems_codec);
          stickyAnticipation_.WriteTo(output, _repeated_stickyAnticipation_codec);
          stickyColumnReSpinCounts_.WriteTo(output, _repeated_stickyColumnReSpinCounts_codec);
          panels_.WriteTo(output, _repeated_panels_codec);
          fullIndexes_.WriteTo(output, _repeated_fullIndexes_codec);
          failedIndexes_.WriteTo(output, _repeated_failedIndexes_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += stickyItems_.CalculateSize(_repeated_stickyItems_codec);
          size += stickyAnticipation_.CalculateSize(_repeated_stickyAnticipation_codec);
          size += stickyColumnReSpinCounts_.CalculateSize(_repeated_stickyColumnReSpinCounts_codec);
          size += panels_.CalculateSize(_repeated_panels_codec);
          size += fullIndexes_.CalculateSize(_repeated_fullIndexes_codec);
          size += failedIndexes_.CalculateSize(_repeated_failedIndexes_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                stickyItems_.AddEntriesFrom(input, _repeated_stickyItems_codec);
                break;
              }
              case 18: {
                stickyAnticipation_.AddEntriesFrom(input, _repeated_stickyAnticipation_codec);
                break;
              }
              case 26:
              case 24: {
                stickyColumnReSpinCounts_.AddEntriesFrom(input, _repeated_stickyColumnReSpinCounts_codec);
                break;
              }
              case 34: {
                panels_.AddEntriesFrom(input, _repeated_panels_codec);
                break;
              }
              case 42:
              case 40: {
                fullIndexes_.AddEntriesFrom(input, _repeated_fullIndexes_codec);
                break;
              }
              case 50:
              case 48: {
                failedIndexes_.AddEntriesFrom(input, _repeated_failedIndexes_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class PositionedCredit : pb::IMessage {
        private static readonly pb::MessageParser<PositionedCredit> _parser = new pb::MessageParser<PositionedCredit>(() => new PositionedCredit());
        public static pb::MessageParser<PositionedCredit> Parser { get { return _parser; } }

        private uint x_;
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        private uint y_;
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        private ulong credit_;
        /// <summary>
        /// 这个位置的金币数
        /// </summary>
        public ulong Credit {
          get { return credit_; }
          set {
            credit_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Y);
          }
          if (Credit != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Credit);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          if (Credit != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Credit);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                X = input.ReadUInt32();
                break;
              }
              case 16: {
                Y = input.ReadUInt32();
                break;
              }
              case 24: {
                Credit = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class FreeData : pb::IMessage {
        private static readonly pb::MessageParser<FreeData> _parser = new pb::MessageParser<FreeData>(() => new FreeData());
        public static pb::MessageParser<FreeData> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.StickyItem> _repeated_stickyItems_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.StickyItem.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.StickyItem> stickyItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.StickyItem>();
        /// <summary>
        /// 每个sticky item信息
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.StickyItem> StickyItems {
          get { return stickyItems_; }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Position> _repeated_stickyAnticipation_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Position.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Position> stickyAnticipation_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Position>();
        /// <summary>
        /// 差一个sticky item的时候会出anti
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Position> StickyAnticipation {
          get { return stickyAnticipation_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_multipliers_codec
            = pb::FieldCodec.ForUInt32(26);
        private readonly pbc::RepeatedField<uint> multipliers_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 列满之后，这一列的wheel转盘结果
        /// </summary>
        public pbc::RepeatedField<uint> Multipliers {
          get { return multipliers_; }
        }

        private bool isSuper_;
        /// <summary>
        /// 这个free是否是super free，super free的转盘multiplier会乘以2
        /// </summary>
        public bool IsSuper {
          get { return isSuper_; }
          set {
            isSuper_ = value;
          }
        }

        private static readonly pb::FieldCodec<uint> _repeated_newFullIndexes_codec
            = pb::FieldCodec.ForUInt32(42);
        private readonly pbc::RepeatedField<uint> newFullIndexes_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 刚满的列
        /// </summary>
        public pbc::RepeatedField<uint> NewFullIndexes {
          get { return newFullIndexes_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          stickyItems_.WriteTo(output, _repeated_stickyItems_codec);
          stickyAnticipation_.WriteTo(output, _repeated_stickyAnticipation_codec);
          multipliers_.WriteTo(output, _repeated_multipliers_codec);
          if (IsSuper != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsSuper);
          }
          newFullIndexes_.WriteTo(output, _repeated_newFullIndexes_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += stickyItems_.CalculateSize(_repeated_stickyItems_codec);
          size += stickyAnticipation_.CalculateSize(_repeated_stickyAnticipation_codec);
          size += multipliers_.CalculateSize(_repeated_multipliers_codec);
          if (IsSuper != false) {
            size += 1 + 1;
          }
          size += newFullIndexes_.CalculateSize(_repeated_newFullIndexes_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                stickyItems_.AddEntriesFrom(input, _repeated_stickyItems_codec);
                break;
              }
              case 18: {
                stickyAnticipation_.AddEntriesFrom(input, _repeated_stickyAnticipation_codec);
                break;
              }
              case 26:
              case 24: {
                multipliers_.AddEntriesFrom(input, _repeated_multipliers_codec);
                break;
              }
              case 32: {
                IsSuper = input.ReadBool();
                break;
              }
              case 42:
              case 40: {
                newFullIndexes_.AddEntriesFrom(input, _repeated_newFullIndexes_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class Shop : pb::IMessage {
        private static readonly pb::MessageParser<Shop> _parser = new pb::MessageParser<Shop>(() => new Shop());
        public static pb::MessageParser<Shop> Parser { get { return _parser; } }

        private ulong credits_;
        /// <summary>
        /// 累积分数
        /// </summary>
        public ulong Credits {
          get { return credits_; }
          set {
            credits_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Shop.Types.ShopTable> _repeated_tables_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Shop.Types.ShopTable.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Shop.Types.ShopTable> tables_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Shop.Types.ShopTable>();
        /// <summary>
        /// shop每一个tab的信息
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Shop.Types.ShopTable> Tables {
          get { return tables_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Credits != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Credits);
          }
          tables_.WriteTo(output, _repeated_tables_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Credits != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Credits);
          }
          size += tables_.CalculateSize(_repeated_tables_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Credits = input.ReadUInt64();
                break;
              }
              case 18: {
                tables_.AddEntriesFrom(input, _repeated_tables_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Shop message type.</summary>
        public static class Types {
          public sealed class ShopTable : pb::IMessage {
            private static readonly pb::MessageParser<ShopTable> _parser = new pb::MessageParser<ShopTable>(() => new ShopTable());
            public static pb::MessageParser<ShopTable> Parser { get { return _parser; } }

            private bool available_;
            /// <summary>
            /// 这一tab是否解锁
            /// </summary>
            public bool Available {
              get { return available_; }
              set {
                available_ = value;
              }
            }

            private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Shop.Types.ShopTable.Types.ShopItem> _repeated_items_codec
                = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Shop.Types.ShopTable.Types.ShopItem.Parser);
            private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Shop.Types.ShopTable.Types.ShopItem> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Shop.Types.ShopTable.Types.ShopItem>();
            /// <summary>
            /// 这一tab的所有购买项
            /// </summary>
            public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Chameleon2GameResultExtraInfo.Types.Shop.Types.ShopTable.Types.ShopItem> Items {
              get { return items_; }
            }

            private bool superTriggered_;
            /// <summary>
            /// 这一tab的最终奖励是否领取
            /// </summary>
            public bool SuperTriggered {
              get { return superTriggered_; }
              set {
                superTriggered_ = value;
              }
            }

            private bool superReady_;
            /// <summary>
            /// 这一tab的最终奖励是否准备好1
            /// </summary>
            public bool SuperReady {
              get { return superReady_; }
              set {
                superReady_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (Available != false) {
                output.WriteRawTag(8);
                output.WriteBool(Available);
              }
              items_.WriteTo(output, _repeated_items_codec);
              if (SuperTriggered != false) {
                output.WriteRawTag(24);
                output.WriteBool(SuperTriggered);
              }
              if (SuperReady != false) {
                output.WriteRawTag(32);
                output.WriteBool(SuperReady);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (Available != false) {
                size += 1 + 1;
              }
              size += items_.CalculateSize(_repeated_items_codec);
              if (SuperTriggered != false) {
                size += 1 + 1;
              }
              if (SuperReady != false) {
                size += 1 + 1;
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Available = input.ReadBool();
                    break;
                  }
                  case 18: {
                    items_.AddEntriesFrom(input, _repeated_items_codec);
                    break;
                  }
                  case 24: {
                    SuperTriggered = input.ReadBool();
                    break;
                  }
                  case 32: {
                    SuperReady = input.ReadBool();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the ShopTable message type.</summary>
            public static class Types {
              public sealed class ShopItem : pb::IMessage {
                private static readonly pb::MessageParser<ShopItem> _parser = new pb::MessageParser<ShopItem>(() => new ShopItem());
                public static pb::MessageParser<ShopItem> Parser { get { return _parser; } }

                private bool open_;
                /// <summary>
                /// 是否已经购买
                /// </summary>
                public bool Open {
                  get { return open_; }
                  set {
                    open_ = value;
                  }
                }

                private ulong price_;
                /// <summary>
                /// 消耗多少credit购买
                /// </summary>
                public ulong Price {
                  get { return price_; }
                  set {
                    price_ = value;
                  }
                }

                private ulong winRate_;
                /// <summary>
                /// 奖励的winRate
                /// </summary>
                public ulong WinRate {
                  get { return winRate_; }
                  set {
                    winRate_ = value;
                  }
                }

                private bool isFree_;
                /// <summary>
                /// 奖励的是否是free
                /// </summary>
                public bool IsFree {
                  get { return isFree_; }
                  set {
                    isFree_ = value;
                  }
                }

                private bool isSuper_;
                /// <summary>
                /// 奖励的free是不是super free
                /// </summary>
                public bool IsSuper {
                  get { return isSuper_; }
                  set {
                    isSuper_ = value;
                  }
                }

                private ulong totalWin_;
                /// <summary>
                /// 实际领了多少钱
                /// </summary>
                public ulong TotalWin {
                  get { return totalWin_; }
                  set {
                    totalWin_ = value;
                  }
                }

                public void WriteTo(pb::CodedOutputStream output) {
                  if (Open != false) {
                    output.WriteRawTag(8);
                    output.WriteBool(Open);
                  }
                  if (Price != 0UL) {
                    output.WriteRawTag(16);
                    output.WriteUInt64(Price);
                  }
                  if (WinRate != 0UL) {
                    output.WriteRawTag(24);
                    output.WriteUInt64(WinRate);
                  }
                  if (IsFree != false) {
                    output.WriteRawTag(32);
                    output.WriteBool(IsFree);
                  }
                  if (IsSuper != false) {
                    output.WriteRawTag(40);
                    output.WriteBool(IsSuper);
                  }
                  if (TotalWin != 0UL) {
                    output.WriteRawTag(48);
                    output.WriteUInt64(TotalWin);
                  }
                }

                public int CalculateSize() {
                  int size = 0;
                  if (Open != false) {
                    size += 1 + 1;
                  }
                  if (Price != 0UL) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Price);
                  }
                  if (WinRate != 0UL) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WinRate);
                  }
                  if (IsFree != false) {
                    size += 1 + 1;
                  }
                  if (IsSuper != false) {
                    size += 1 + 1;
                  }
                  if (TotalWin != 0UL) {
                    size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
                  }
                  return size;
                }

                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        input.SkipLastField();
                        break;
                      case 8: {
                        Open = input.ReadBool();
                        break;
                      }
                      case 16: {
                        Price = input.ReadUInt64();
                        break;
                      }
                      case 24: {
                        WinRate = input.ReadUInt64();
                        break;
                      }
                      case 32: {
                        IsFree = input.ReadBool();
                        break;
                      }
                      case 40: {
                        IsSuper = input.ReadBool();
                        break;
                      }
                      case 48: {
                        TotalWin = input.ReadUInt64();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

      public sealed class AvgBet : pb::IMessage {
        private static readonly pb::MessageParser<AvgBet> _parser = new pb::MessageParser<AvgBet>(() => new AvgBet());
        public static pb::MessageParser<AvgBet> Parser { get { return _parser; } }

        private ulong spinCount_;
        public ulong SpinCount {
          get { return spinCount_; }
          set {
            spinCount_ = value;
          }
        }

        private ulong totalBet_;
        public ulong TotalBet {
          get { return totalBet_; }
          set {
            totalBet_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (SpinCount != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(SpinCount);
          }
          if (TotalBet != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(TotalBet);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (SpinCount != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SpinCount);
          }
          if (TotalBet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalBet);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                SpinCount = input.ReadUInt64();
                break;
              }
              case 16: {
                TotalBet = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///================= WinsOPlenty2 ====================================
  /// </summary>
  public sealed class WinsOPlenty2GameResultExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<WinsOPlenty2GameResultExtraInfo> _parser = new pb::MessageParser<WinsOPlenty2GameResultExtraInfo>(() => new WinsOPlenty2GameResultExtraInfo());
    public static pb::MessageParser<WinsOPlenty2GameResultExtraInfo> Parser { get { return _parser; } }

    private static readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlenty2GameResultExtraInfo.Types.WildTitle>.Codec _map_wildTitleMap_codec
        = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlenty2GameResultExtraInfo.Types.WildTitle>.Codec(pb::FieldCodec.ForUInt64(8), pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlenty2GameResultExtraInfo.Types.WildTitle.Parser), 10);
    private readonly pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlenty2GameResultExtraInfo.Types.WildTitle> wildTitleMap_ = new pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlenty2GameResultExtraInfo.Types.WildTitle>();
    /// <summary>
    /// 小辣椒信息
    /// </summary>
    public pbc::MapField<ulong, global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlenty2GameResultExtraInfo.Types.WildTitle> WildTitleMap {
      get { return wildTitleMap_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlenty2GameResultExtraInfo.Types.WheelBonusInfo wheelBonusInfo_;
    /// <summary>
    /// 轮盘信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlenty2GameResultExtraInfo.Types.WheelBonusInfo WheelBonusInfo {
      get { return wheelBonusInfo_; }
      set {
        wheelBonusInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      wildTitleMap_.WriteTo(output, _map_wildTitleMap_codec);
      if (wheelBonusInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WheelBonusInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += wildTitleMap_.CalculateSize(_map_wildTitleMap_codec);
      if (wheelBonusInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WheelBonusInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            wildTitleMap_.AddEntriesFrom(input, _map_wildTitleMap_codec);
            break;
          }
          case 18: {
            if (wheelBonusInfo_ == null) {
              wheelBonusInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.WinsOPlenty2GameResultExtraInfo.Types.WheelBonusInfo();
            }
            input.ReadMessage(wheelBonusInfo_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WinsOPlenty2GameResultExtraInfo message type.</summary>
    public static class Types {
      public sealed class WildTitle : pb::IMessage {
        private static readonly pb::MessageParser<WildTitle> _parser = new pb::MessageParser<WildTitle>(() => new WildTitle());
        public static pb::MessageParser<WildTitle> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<uint> _repeated_lastTitle_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> lastTitle_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 上一轮每一列小辣椒数量
        /// </summary>
        public pbc::RepeatedField<uint> LastTitle {
          get { return lastTitle_; }
        }

        private static readonly pb::FieldCodec<uint> _repeated_currentTitle_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> currentTitle_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// 本轮每一列小辣椒数量
        /// </summary>
        public pbc::RepeatedField<uint> CurrentTitle {
          get { return currentTitle_; }
        }

        private static readonly pb::FieldCodec<bool> _repeated_activeTitle_codec
            = pb::FieldCodec.ForBool(26);
        private readonly pbc::RepeatedField<bool> activeTitle_ = new pbc::RepeatedField<bool>();
        /// <summary>
        /// 本轮每一列是否是sticky wild模式
        /// </summary>
        public pbc::RepeatedField<bool> ActiveTitle {
          get { return activeTitle_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          lastTitle_.WriteTo(output, _repeated_lastTitle_codec);
          currentTitle_.WriteTo(output, _repeated_currentTitle_codec);
          activeTitle_.WriteTo(output, _repeated_activeTitle_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += lastTitle_.CalculateSize(_repeated_lastTitle_codec);
          size += currentTitle_.CalculateSize(_repeated_currentTitle_codec);
          size += activeTitle_.CalculateSize(_repeated_activeTitle_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 8: {
                lastTitle_.AddEntriesFrom(input, _repeated_lastTitle_codec);
                break;
              }
              case 18:
              case 16: {
                currentTitle_.AddEntriesFrom(input, _repeated_currentTitle_codec);
                break;
              }
              case 26:
              case 24: {
                activeTitle_.AddEntriesFrom(input, _repeated_activeTitle_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class WheelBonusInfo : pb::IMessage {
        private static readonly pb::MessageParser<WheelBonusInfo> _parser = new pb::MessageParser<WheelBonusInfo>(() => new WheelBonusInfo());
        public static pb::MessageParser<WheelBonusInfo> Parser { get { return _parser; } }

        private bool chosen_;
        /// <summary>
        /// 轮盘是否选过
        /// </summary>
        public bool Chosen {
          get { return chosen_; }
          set {
            chosen_ = value;
          }
        }

        private int choice_;
        /// <summary>
        /// 轮盘结果
        /// </summary>
        public int Choice {
          get { return choice_; }
          set {
            choice_ = value;
          }
        }

        private ulong bet_;
        /// <summary>
        /// 进入轮盘的下注
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private int jackpotId_;
        /// <summary>
        /// jackpot_id
        /// </summary>
        public int JackpotId {
          get { return jackpotId_; }
          set {
            jackpotId_ = value;
          }
        }

        private int freeSpinCount_;
        /// <summary>
        /// free spi count
        /// </summary>
        public int FreeSpinCount {
          get { return freeSpinCount_; }
          set {
            freeSpinCount_ = value;
          }
        }

        private bool settled_;
        /// <summary>
        /// wheel bonus是否settle
        /// </summary>
        public bool Settled {
          get { return settled_; }
          set {
            settled_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Chosen != false) {
            output.WriteRawTag(8);
            output.WriteBool(Chosen);
          }
          if (Choice != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Choice);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Bet);
          }
          if (JackpotId != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(JackpotId);
          }
          if (FreeSpinCount != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(FreeSpinCount);
          }
          if (Settled != false) {
            output.WriteRawTag(48);
            output.WriteBool(Settled);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Chosen != false) {
            size += 1 + 1;
          }
          if (Choice != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Choice);
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (JackpotId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(JackpotId);
          }
          if (FreeSpinCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeSpinCount);
          }
          if (Settled != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Chosen = input.ReadBool();
                break;
              }
              case 16: {
                Choice = input.ReadInt32();
                break;
              }
              case 24: {
                Bet = input.ReadUInt64();
                break;
              }
              case 32: {
                JackpotId = input.ReadInt32();
                break;
              }
              case 40: {
                FreeSpinCount = input.ReadInt32();
                break;
              }
              case 48: {
                Settled = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
