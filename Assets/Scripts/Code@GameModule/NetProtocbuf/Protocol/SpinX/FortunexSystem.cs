// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortunex_system.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Enums
  public enum SystemType {
    DailyBonus = 0,
    DailyMission = 1,
    MissionPass = 2,
    PiggyBank = 3,
    TimerBonus = 4,
  }

  #endregion

  #region Messages
  public sealed class Reward : pb::IMessage {
    private static readonly pb::MessageParser<Reward> _parser = new pb::MessageParser<Reward>(() => new Reward());
    public static pb::MessageParser<Reward> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Item.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> Items {
      get { return items_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class Vip : pb::IMessage {
    private static readonly pb::MessageParser<Vip> _parser = new pb::MessageParser<Vip>(() => new Vip());
    public static pb::MessageParser<Vip> Parser { get { return _parser; } }

    private ulong level_;
    public ulong Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private ulong point_;
    public ulong Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    private ulong total_;
    public ulong Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Level);
      }
      if (Point != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Point);
      }
      if (Total != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Total);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Level != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Level);
      }
      if (Point != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Point);
      }
      if (Total != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Total);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt64();
            break;
          }
          case 16: {
            Point = input.ReadUInt64();
            break;
          }
          case 24: {
            Total = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// GiftBox内容
  /// </summary>
  public sealed class GiftBox : pb::IMessage {
    private static readonly pb::MessageParser<GiftBox> _parser = new pb::MessageParser<GiftBox>(() => new GiftBox());
    public static pb::MessageParser<GiftBox> Parser { get { return _parser; } }

    private uint countdownTime_;
    /// <summary>
    /// 倒计时(秒)
    /// </summary>
    public uint CountdownTime {
      get { return countdownTime_; }
      set {
        countdownTime_ = value;
      }
    }

    private uint progressMax_;
    /// <summary>
    /// 总体目标
    /// </summary>
    public uint ProgressMax {
      get { return progressMax_; }
      set {
        progressMax_ = value;
      }
    }

    private uint progressNow_;
    /// <summary>
    /// 当前目标
    /// </summary>
    public uint ProgressNow {
      get { return progressNow_; }
      set {
        progressNow_ = value;
      }
    }

    private ulong accumulateCoins_;
    /// <summary>
    /// 当前累积的coin
    /// </summary>
    public ulong AccumulateCoins {
      get { return accumulateCoins_; }
      set {
        accumulateCoins_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CountdownTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CountdownTime);
      }
      if (ProgressMax != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ProgressMax);
      }
      if (ProgressNow != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ProgressNow);
      }
      if (AccumulateCoins != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(AccumulateCoins);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CountdownTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CountdownTime);
      }
      if (ProgressMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProgressMax);
      }
      if (ProgressNow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProgressNow);
      }
      if (AccumulateCoins != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AccumulateCoins);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CountdownTime = input.ReadUInt32();
            break;
          }
          case 16: {
            ProgressMax = input.ReadUInt32();
            break;
          }
          case 24: {
            ProgressNow = input.ReadUInt32();
            break;
          }
          case 32: {
            AccumulateCoins = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class LevelRushGameInfo : pb::IMessage {
    private static readonly pb::MessageParser<LevelRushGameInfo> _parser = new pb::MessageParser<LevelRushGameInfo>(() => new LevelRushGameInfo());
    public static pb::MessageParser<LevelRushGameInfo> Parser { get { return _parser; } }

    private string key_ = "";
    /// <summary>
    /// 游戏标识，用于获取游戏页面信息及play，（可能为空字符串，纯展示用）
    /// </summary>
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward gameCoinsMax_;
    /// <summary>
    /// 小游戏中能领取的最大奖励
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward GameCoinsMax {
      get { return gameCoinsMax_; }
      set {
        gameCoinsMax_ = value;
      }
    }

    private uint maxOdds_;
    /// <summary>
    /// 最大乘倍
    /// </summary>
    public uint MaxOdds {
      get { return maxOdds_; }
      set {
        maxOdds_ = value;
      }
    }

    private float price_;
    /// <summary>
    /// 游戏价格，单位美元 默认为0
    /// </summary>
    public float Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo.Types.BallConfig> _repeated_ballsConfig_codec
        = pb::FieldCodec.ForMessage(42, global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo.Types.BallConfig.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo.Types.BallConfig> ballsConfig_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo.Types.BallConfig>();
    /// <summary>
    /// 乐透游戏的小球配置
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo.Types.BallConfig> BallsConfig {
      get { return ballsConfig_; }
    }

    private static readonly pb::FieldCodec<string> _repeated_paramsSend_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> paramsSend_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 传递的参数，客户端无需关注
    /// </summary>
    public pbc::RepeatedField<string> ParamsSend {
      get { return paramsSend_; }
    }

    private ulong coinBase_;
    /// <summary>
    /// 金币基值，用于显示在play按钮所在页面
    /// </summary>
    public ulong CoinBase {
      get { return coinBase_; }
      set {
        coinBase_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (gameCoinsMax_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GameCoinsMax);
      }
      if (MaxOdds != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxOdds);
      }
      if (Price != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Price);
      }
      ballsConfig_.WriteTo(output, _repeated_ballsConfig_codec);
      paramsSend_.WriteTo(output, _repeated_paramsSend_codec);
      if (CoinBase != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(CoinBase);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (gameCoinsMax_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameCoinsMax);
      }
      if (MaxOdds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxOdds);
      }
      if (Price != 0F) {
        size += 1 + 4;
      }
      size += ballsConfig_.CalculateSize(_repeated_ballsConfig_codec);
      size += paramsSend_.CalculateSize(_repeated_paramsSend_codec);
      if (CoinBase != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CoinBase);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            if (gameCoinsMax_ == null) {
              gameCoinsMax_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(gameCoinsMax_);
            break;
          }
          case 24: {
            MaxOdds = input.ReadUInt32();
            break;
          }
          case 37: {
            Price = input.ReadFloat();
            break;
          }
          case 42: {
            ballsConfig_.AddEntriesFrom(input, _repeated_ballsConfig_codec);
            break;
          }
          case 50: {
            paramsSend_.AddEntriesFrom(input, _repeated_paramsSend_codec);
            break;
          }
          case 56: {
            CoinBase = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LevelRushGameInfo message type.</summary>
    public static class Types {
      public sealed class BallConfig : pb::IMessage {
        private static readonly pb::MessageParser<BallConfig> _parser = new pb::MessageParser<BallConfig>(() => new BallConfig());
        public static pb::MessageParser<BallConfig> Parser { get { return _parser; } }

        private uint num_;
        /// <summary>
        /// 编号
        /// </summary>
        public uint Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        private uint count_;
        /// <summary>
        /// 数量
        /// </summary>
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Num != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Num);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Num = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class LevelRushGameResult : pb::IMessage {
    private static readonly pb::MessageParser<LevelRushGameResult> _parser = new pb::MessageParser<LevelRushGameResult>(() => new LevelRushGameResult());
    public static pb::MessageParser<LevelRushGameResult> Parser { get { return _parser; } }

    private ulong coinBase_;
    /// <summary>
    /// 基础钱数 
    /// </summary>
    public ulong CoinBase {
      get { return coinBase_; }
      set {
        coinBase_ = value;
      }
    }

    private ulong odds_;
    /// <summary>
    ///开出的倍数
    /// </summary>
    public ulong Odds {
      get { return odds_; }
      set {
        odds_ = value;
      }
    }

    private ulong vipBonusPercentage_;
    /// <summary>
    ///vip 加成百分数
    /// </summary>
    public ulong VipBonusPercentage {
      get { return vipBonusPercentage_; }
      set {
        vipBonusPercentage_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
    /// <summary>
    ///开出的最终奖励
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CoinBase != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CoinBase);
      }
      if (Odds != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Odds);
      }
      if (VipBonusPercentage != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(VipBonusPercentage);
      }
      if (reward_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Reward);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CoinBase != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CoinBase);
      }
      if (Odds != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Odds);
      }
      if (VipBonusPercentage != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VipBonusPercentage);
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CoinBase = input.ReadUInt64();
            break;
          }
          case 16: {
            Odds = input.ReadUInt64();
            break;
          }
          case 24: {
            VipBonusPercentage = input.ReadUInt64();
            break;
          }
          case 34: {
            if (reward_ == null) {
              reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(reward_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// levelrush 付费lotto游戏道具
  /// </summary>
  public sealed class LevelRushPaidGameInItem : pb::IMessage {
    private static readonly pb::MessageParser<LevelRushPaidGameInItem> _parser = new pb::MessageParser<LevelRushPaidGameInItem>(() => new LevelRushPaidGameInItem());
    public static pb::MessageParser<LevelRushPaidGameInItem> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo gameInfoBeforePlay_;
    public global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo GameInfoBeforePlay {
      get { return gameInfoBeforePlay_; }
      set {
        gameInfoBeforePlay_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameResult gameResult_;
    public global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameResult GameResult {
      get { return gameResult_; }
      set {
        gameResult_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (gameInfoBeforePlay_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameInfoBeforePlay);
      }
      if (gameResult_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GameResult);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (gameInfoBeforePlay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfoBeforePlay);
      }
      if (gameResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameResult);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameInfoBeforePlay_ == null) {
              gameInfoBeforePlay_ = new global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo();
            }
            input.ReadMessage(gameInfoBeforePlay_);
            break;
          }
          case 18: {
            if (gameResult_ == null) {
              gameResult_ = new global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameResult();
            }
            input.ReadMessage(gameResult_);
            break;
          }
        }
      }
    }

  }

  public sealed class SuperSpinXGameInItem : pb::IMessage {
    private static readonly pb::MessageParser<SuperSpinXGameInItem> _parser = new pb::MessageParser<SuperSpinXGameInItem>(() => new SuperSpinXGameInItem());
    public static pb::MessageParser<SuperSpinXGameInItem> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<uint> _repeated_wordIds_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> wordIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 滚轴的字母id列表
    /// </summary>
    public pbc::RepeatedField<uint> WordIds {
      get { return wordIds_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SuperSpinXGameInItem.Types.SpinXGameRule> _repeated_ruleList_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.SuperSpinXGameInItem.Types.SpinXGameRule.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SuperSpinXGameInItem.Types.SpinXGameRule> ruleList_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SuperSpinXGameInItem.Types.SpinXGameRule>();
    /// <summary>
    /// 奖励规则配置
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SuperSpinXGameInItem.Types.SpinXGameRule> RuleList {
      get { return ruleList_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward cardRewardExtra_;
    /// <summary>
    /// 额外送卡，该值不为null说明送卡活动开了并且可以送卡
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward CardRewardExtra {
      get { return cardRewardExtra_; }
      set {
        cardRewardExtra_ = value;
      }
    }

    private float oddsMax_;
    /// <summary>
    /// 展示的最高乘倍
    /// </summary>
    public float OddsMax {
      get { return oddsMax_; }
      set {
        oddsMax_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.SuperSpinXGameInItem.Types.SpinXGameResult result_;
    /// <summary>
    /// 游戏结果
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.SuperSpinXGameInItem.Types.SpinXGameResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_paramsSend_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> paramsSend_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 参数，客户端忽略
    /// </summary>
    public pbc::RepeatedField<string> ParamsSend {
      get { return paramsSend_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      wordIds_.WriteTo(output, _repeated_wordIds_codec);
      ruleList_.WriteTo(output, _repeated_ruleList_codec);
      if (cardRewardExtra_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CardRewardExtra);
      }
      if (OddsMax != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(OddsMax);
      }
      if (result_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Result);
      }
      paramsSend_.WriteTo(output, _repeated_paramsSend_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += wordIds_.CalculateSize(_repeated_wordIds_codec);
      size += ruleList_.CalculateSize(_repeated_ruleList_codec);
      if (cardRewardExtra_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardRewardExtra);
      }
      if (OddsMax != 0F) {
        size += 1 + 4;
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      size += paramsSend_.CalculateSize(_repeated_paramsSend_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            wordIds_.AddEntriesFrom(input, _repeated_wordIds_codec);
            break;
          }
          case 18: {
            ruleList_.AddEntriesFrom(input, _repeated_ruleList_codec);
            break;
          }
          case 26: {
            if (cardRewardExtra_ == null) {
              cardRewardExtra_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(cardRewardExtra_);
            break;
          }
          case 37: {
            OddsMax = input.ReadFloat();
            break;
          }
          case 42: {
            if (result_ == null) {
              result_ = new global::DragonU3DSDK.Network.API.ILProtocol.SuperSpinXGameInItem.Types.SpinXGameResult();
            }
            input.ReadMessage(result_);
            break;
          }
          case 50: {
            paramsSend_.AddEntriesFrom(input, _repeated_paramsSend_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SuperSpinXGameInItem message type.</summary>
    public static class Types {
      public sealed class SpinXGameRule : pb::IMessage {
        private static readonly pb::MessageParser<SpinXGameRule> _parser = new pb::MessageParser<SpinXGameRule>(() => new SpinXGameRule());
        public static pb::MessageParser<SpinXGameRule> Parser { get { return _parser; } }

        private uint wordId_;
        /// <summary>
        /// 字母id
        /// </summary>
        public uint WordId {
          get { return wordId_; }
          set {
            wordId_ = value;
          }
        }

        private uint count_;
        /// <summary>
        /// 几个
        /// </summary>
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        private float odds_;
        /// <summary>
        /// 奖多少倍
        /// </summary>
        public float Odds {
          get { return odds_; }
          set {
            odds_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (WordId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(WordId);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
          if (Odds != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Odds);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (WordId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WordId);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          if (Odds != 0F) {
            size += 1 + 4;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                WordId = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
              case 29: {
                Odds = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed class SpinXGameResult : pb::IMessage {
        private static readonly pb::MessageParser<SpinXGameResult> _parser = new pb::MessageParser<SpinXGameResult>(() => new SpinXGameResult());
        public static pb::MessageParser<SpinXGameResult> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<uint> _repeated_wordIdsResult_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> wordIdsResult_ = new pbc::RepeatedField<uint>();
        /// <summary>
        ///最终滚到的字母编号 0-7
        /// </summary>
        public pbc::RepeatedField<uint> WordIdsResult {
          get { return wordIdsResult_; }
        }

        private ulong coinsBase_;
        /// <summary>
        /// 基础金币
        /// </summary>
        public ulong CoinsBase {
          get { return coinsBase_; }
          set {
            coinsBase_ = value;
          }
        }

        private float odds_;
        /// <summary>
        /// 乘倍
        /// </summary>
        public float Odds {
          get { return odds_; }
          set {
            odds_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
        /// <summary>
        /// 获得的奖励
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
          get { return reward_; }
          set {
            reward_ = value;
          }
        }

        private uint ruleIndex_;
        /// <summary>
        /// 适用的规则序号（rule_list的下表）
        /// </summary>
        public uint RuleIndex {
          get { return ruleIndex_; }
          set {
            ruleIndex_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          wordIdsResult_.WriteTo(output, _repeated_wordIdsResult_codec);
          if (CoinsBase != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(CoinsBase);
          }
          if (Odds != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Odds);
          }
          if (reward_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Reward);
          }
          if (RuleIndex != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(RuleIndex);
          }
        }

        public int CalculateSize() {
          int size = 0;
          size += wordIdsResult_.CalculateSize(_repeated_wordIdsResult_codec);
          if (CoinsBase != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CoinsBase);
          }
          if (Odds != 0F) {
            size += 1 + 4;
          }
          if (reward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
          }
          if (RuleIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RuleIndex);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 8: {
                wordIdsResult_.AddEntriesFrom(input, _repeated_wordIdsResult_codec);
                break;
              }
              case 16: {
                CoinsBase = input.ReadUInt64();
                break;
              }
              case 29: {
                Odds = input.ReadFloat();
                break;
              }
              case 34: {
                if (reward_ == null) {
                  reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
                }
                input.ReadMessage(reward_);
                break;
              }
              case 40: {
                RuleIndex = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class Item : pb::IMessage {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    private uint id_;
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Type type_ = 0;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Coin coin_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Coin Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ShopCoin shopCoin_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ShopCoin ShopCoin {
      get { return shopCoin_; }
      set {
        shopCoin_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ShopEmerald shopEmerald_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ShopEmerald ShopEmerald {
      get { return shopEmerald_; }
      set {
        shopEmerald_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ShopBoost shopBoost_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ShopBoost ShopBoost {
      get { return shopBoost_; }
      set {
        shopBoost_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ShopGiftBox shopGiftBox_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ShopGiftBox ShopGiftBox {
      get { return shopGiftBox_; }
      set {
        shopGiftBox_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.VipPoints vipPoints_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.VipPoints VipPoints {
      get { return vipPoints_; }
      set {
        vipPoints_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Emerald emerald_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Emerald Emerald {
      get { return emerald_; }
      set {
        emerald_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.LevelUpBurst levelUpBurst_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.LevelUpBurst LevelUpBurst {
      get { return levelUpBurst_; }
      set {
        levelUpBurst_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SuperWheel superWheel_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SuperWheel SuperWheel {
      get { return superWheel_; }
      set {
        superWheel_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MissionPoints missionPoints_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MissionPoints MissionPoints {
      get { return missionPoints_; }
      set {
        missionPoints_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MissionStar missionStar_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MissionStar MissionStar {
      get { return missionStar_; }
      set {
        missionStar_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.PayWheelBonus payWheelBonus_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.PayWheelBonus PayWheelBonus {
      get { return payWheelBonus_; }
      set {
        payWheelBonus_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.DoubleExp doubleExp_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.DoubleExp DoubleExp {
      get { return doubleExp_; }
      set {
        doubleExp_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CashBackBuff cashBackBuff_;
    /// <summary>
    ///返利BUFF：buff结束时通过邮件返回期间win|nowin|bet 的x%
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CashBackBuff CashBackBuff {
      get { return cashBackBuff_; }
      set {
        cashBackBuff_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.BonusCoupon bonusCoupon_;
    /// <summary>
    ///用户的加成券
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.BonusCoupon BonusCoupon {
      get { return bonusCoupon_; }
      set {
        bonusCoupon_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SeasonQuestStar seasonQuestStar_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SeasonQuestStar SeasonQuestStar {
      get { return seasonQuestStar_; }
      set {
        seasonQuestStar_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SeasonQuestStarBoost seasonQuestStarBoost_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SeasonQuestStarBoost SeasonQuestStarBoost {
      get { return seasonQuestStarBoost_; }
      set {
        seasonQuestStarBoost_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SeasonQuestComplete seasonQuestComplete_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SeasonQuestComplete SeasonQuestComplete {
      get { return seasonQuestComplete_; }
      set {
        seasonQuestComplete_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ValentineActivityPoint valentineActivityPoint_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ValentineActivityPoint ValentineActivityPoint {
      get { return valentineActivityPoint_; }
      set {
        valentineActivityPoint_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SilverHammer silverHammer_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SilverHammer SilverHammer {
      get { return silverHammer_; }
      set {
        silverHammer_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.GoldHammer goldHammer_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.GoldHammer GoldHammer {
      get { return goldHammer_; }
      set {
        goldHammer_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Card card_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Card Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CardPackage cardPackage_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CardPackage CardPackage {
      get { return cardPackage_; }
      set {
        cardPackage_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Avatar avatar_;
    /// <summary>
    /// 头像
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Avatar Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.NewbieQuestBoost newbieQuestBoost_;
    /// <summary>
    /// 新手加速
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.NewbieQuestBoost NewbieQuestBoost {
      get { return newbieQuestBoost_; }
      set {
        newbieQuestBoost_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyActivityTicket monopolyActivityTicket_;
    /// <summary>
    /// 大富翁活动的票
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyActivityTicket MonopolyActivityTicket {
      get { return monopolyActivityTicket_; }
      set {
        monopolyActivityTicket_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyActivityBuffMoreTicket monopolyActivityBuffMoreTicket_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyActivityBuffMoreTicket MonopolyActivityBuffMoreTicket {
      get { return monopolyActivityBuffMoreTicket_; }
      set {
        monopolyActivityBuffMoreTicket_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyActivityBuffMoreDamage monopolyActivityBuffMoreDamage_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyActivityBuffMoreDamage MonopolyActivityBuffMoreDamage {
      get { return monopolyActivityBuffMoreDamage_; }
      set {
        monopolyActivityBuffMoreDamage_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyActivityPortal monopolyActivityPortal_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyActivityPortal MonopolyActivityPortal {
      get { return monopolyActivityPortal_; }
      set {
        monopolyActivityPortal_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.LevelRushGame levelRushGame_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.LevelRushGame LevelRushGame {
      get { return levelRushGame_; }
      set {
        levelRushGame_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.LevelRushPaidGame levelRushPaidGame_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.LevelRushPaidGame LevelRushPaidGame {
      get { return levelRushPaidGame_; }
      set {
        levelRushPaidGame_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.IndependenceActivityPoint independenceActivityPoint_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.IndependenceActivityPoint IndependenceActivityPoint {
      get { return independenceActivityPoint_; }
      set {
        independenceActivityPoint_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SuperSpinXGame superSpinxGame_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SuperSpinXGame SuperSpinxGame {
      get { return superSpinxGame_; }
      set {
        superSpinxGame_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyPuzzleFragment monopolyPuzzleFragment_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyPuzzleFragment MonopolyPuzzleFragment {
      get { return monopolyPuzzleFragment_; }
      set {
        monopolyPuzzleFragment_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (coin_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Coin);
      }
      if (shopCoin_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ShopCoin);
      }
      if (shopEmerald_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ShopEmerald);
      }
      if (shopBoost_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ShopBoost);
      }
      if (shopGiftBox_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ShopGiftBox);
      }
      if (vipPoints_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(VipPoints);
      }
      if (emerald_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Emerald);
      }
      if (levelUpBurst_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(LevelUpBurst);
      }
      if (superWheel_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SuperWheel);
      }
      if (missionPoints_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(MissionPoints);
      }
      if (missionStar_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(MissionStar);
      }
      if (payWheelBonus_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(PayWheelBonus);
      }
      if (doubleExp_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(DoubleExp);
      }
      if (cashBackBuff_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(CashBackBuff);
      }
      if (bonusCoupon_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(BonusCoupon);
      }
      if (seasonQuestStar_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SeasonQuestStar);
      }
      if (seasonQuestStarBoost_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(SeasonQuestStarBoost);
      }
      if (seasonQuestComplete_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SeasonQuestComplete);
      }
      if (valentineActivityPoint_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ValentineActivityPoint);
      }
      if (silverHammer_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(SilverHammer);
      }
      if (goldHammer_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(GoldHammer);
      }
      if (card_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Card);
      }
      if (cardPackage_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(CardPackage);
      }
      if (avatar_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(Avatar);
      }
      if (newbieQuestBoost_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(NewbieQuestBoost);
      }
      if (monopolyActivityTicket_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(MonopolyActivityTicket);
      }
      if (monopolyActivityBuffMoreTicket_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(MonopolyActivityBuffMoreTicket);
      }
      if (monopolyActivityBuffMoreDamage_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(MonopolyActivityBuffMoreDamage);
      }
      if (monopolyActivityPortal_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(MonopolyActivityPortal);
      }
      if (levelRushGame_ != null) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(LevelRushGame);
      }
      if (levelRushPaidGame_ != null) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(LevelRushPaidGame);
      }
      if (independenceActivityPoint_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(IndependenceActivityPoint);
      }
      if (superSpinxGame_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(SuperSpinxGame);
      }
      if (monopolyPuzzleFragment_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(MonopolyPuzzleFragment);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (coin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coin);
      }
      if (shopCoin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShopCoin);
      }
      if (shopEmerald_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShopEmerald);
      }
      if (shopBoost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShopBoost);
      }
      if (shopGiftBox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShopGiftBox);
      }
      if (vipPoints_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VipPoints);
      }
      if (emerald_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Emerald);
      }
      if (levelUpBurst_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelUpBurst);
      }
      if (superWheel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SuperWheel);
      }
      if (missionPoints_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MissionPoints);
      }
      if (missionStar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MissionStar);
      }
      if (payWheelBonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PayWheelBonus);
      }
      if (doubleExp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DoubleExp);
      }
      if (cashBackBuff_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CashBackBuff);
      }
      if (bonusCoupon_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BonusCoupon);
      }
      if (seasonQuestStar_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SeasonQuestStar);
      }
      if (seasonQuestStarBoost_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SeasonQuestStarBoost);
      }
      if (seasonQuestComplete_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SeasonQuestComplete);
      }
      if (valentineActivityPoint_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ValentineActivityPoint);
      }
      if (silverHammer_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SilverHammer);
      }
      if (goldHammer_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GoldHammer);
      }
      if (card_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (cardPackage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CardPackage);
      }
      if (avatar_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (newbieQuestBoost_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NewbieQuestBoost);
      }
      if (monopolyActivityTicket_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonopolyActivityTicket);
      }
      if (monopolyActivityBuffMoreTicket_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonopolyActivityBuffMoreTicket);
      }
      if (monopolyActivityBuffMoreDamage_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonopolyActivityBuffMoreDamage);
      }
      if (monopolyActivityPortal_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonopolyActivityPortal);
      }
      if (levelRushGame_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LevelRushGame);
      }
      if (levelRushPaidGame_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LevelRushPaidGame);
      }
      if (independenceActivityPoint_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IndependenceActivityPoint);
      }
      if (superSpinxGame_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SuperSpinxGame);
      }
      if (monopolyPuzzleFragment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonopolyPuzzleFragment);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            type_ = (global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Type) input.ReadEnum();
            break;
          }
          case 26: {
            if (coin_ == null) {
              coin_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Coin();
            }
            input.ReadMessage(coin_);
            break;
          }
          case 34: {
            if (shopCoin_ == null) {
              shopCoin_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ShopCoin();
            }
            input.ReadMessage(shopCoin_);
            break;
          }
          case 42: {
            if (shopEmerald_ == null) {
              shopEmerald_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ShopEmerald();
            }
            input.ReadMessage(shopEmerald_);
            break;
          }
          case 50: {
            if (shopBoost_ == null) {
              shopBoost_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ShopBoost();
            }
            input.ReadMessage(shopBoost_);
            break;
          }
          case 58: {
            if (shopGiftBox_ == null) {
              shopGiftBox_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ShopGiftBox();
            }
            input.ReadMessage(shopGiftBox_);
            break;
          }
          case 66: {
            if (vipPoints_ == null) {
              vipPoints_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.VipPoints();
            }
            input.ReadMessage(vipPoints_);
            break;
          }
          case 74: {
            if (emerald_ == null) {
              emerald_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Emerald();
            }
            input.ReadMessage(emerald_);
            break;
          }
          case 82: {
            if (levelUpBurst_ == null) {
              levelUpBurst_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.LevelUpBurst();
            }
            input.ReadMessage(levelUpBurst_);
            break;
          }
          case 90: {
            if (superWheel_ == null) {
              superWheel_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SuperWheel();
            }
            input.ReadMessage(superWheel_);
            break;
          }
          case 98: {
            if (missionPoints_ == null) {
              missionPoints_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MissionPoints();
            }
            input.ReadMessage(missionPoints_);
            break;
          }
          case 106: {
            if (missionStar_ == null) {
              missionStar_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MissionStar();
            }
            input.ReadMessage(missionStar_);
            break;
          }
          case 114: {
            if (payWheelBonus_ == null) {
              payWheelBonus_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.PayWheelBonus();
            }
            input.ReadMessage(payWheelBonus_);
            break;
          }
          case 122: {
            if (doubleExp_ == null) {
              doubleExp_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.DoubleExp();
            }
            input.ReadMessage(doubleExp_);
            break;
          }
          case 130: {
            if (cashBackBuff_ == null) {
              cashBackBuff_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CashBackBuff();
            }
            input.ReadMessage(cashBackBuff_);
            break;
          }
          case 138: {
            if (bonusCoupon_ == null) {
              bonusCoupon_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.BonusCoupon();
            }
            input.ReadMessage(bonusCoupon_);
            break;
          }
          case 146: {
            if (seasonQuestStar_ == null) {
              seasonQuestStar_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SeasonQuestStar();
            }
            input.ReadMessage(seasonQuestStar_);
            break;
          }
          case 154: {
            if (seasonQuestStarBoost_ == null) {
              seasonQuestStarBoost_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SeasonQuestStarBoost();
            }
            input.ReadMessage(seasonQuestStarBoost_);
            break;
          }
          case 162: {
            if (seasonQuestComplete_ == null) {
              seasonQuestComplete_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SeasonQuestComplete();
            }
            input.ReadMessage(seasonQuestComplete_);
            break;
          }
          case 170: {
            if (valentineActivityPoint_ == null) {
              valentineActivityPoint_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.ValentineActivityPoint();
            }
            input.ReadMessage(valentineActivityPoint_);
            break;
          }
          case 178: {
            if (silverHammer_ == null) {
              silverHammer_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SilverHammer();
            }
            input.ReadMessage(silverHammer_);
            break;
          }
          case 186: {
            if (goldHammer_ == null) {
              goldHammer_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.GoldHammer();
            }
            input.ReadMessage(goldHammer_);
            break;
          }
          case 194: {
            if (card_ == null) {
              card_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Card();
            }
            input.ReadMessage(card_);
            break;
          }
          case 202: {
            if (cardPackage_ == null) {
              cardPackage_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CardPackage();
            }
            input.ReadMessage(cardPackage_);
            break;
          }
          case 210: {
            if (avatar_ == null) {
              avatar_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Avatar();
            }
            input.ReadMessage(avatar_);
            break;
          }
          case 218: {
            if (newbieQuestBoost_ == null) {
              newbieQuestBoost_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.NewbieQuestBoost();
            }
            input.ReadMessage(newbieQuestBoost_);
            break;
          }
          case 226: {
            if (monopolyActivityTicket_ == null) {
              monopolyActivityTicket_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyActivityTicket();
            }
            input.ReadMessage(monopolyActivityTicket_);
            break;
          }
          case 234: {
            if (monopolyActivityBuffMoreTicket_ == null) {
              monopolyActivityBuffMoreTicket_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyActivityBuffMoreTicket();
            }
            input.ReadMessage(monopolyActivityBuffMoreTicket_);
            break;
          }
          case 242: {
            if (monopolyActivityBuffMoreDamage_ == null) {
              monopolyActivityBuffMoreDamage_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyActivityBuffMoreDamage();
            }
            input.ReadMessage(monopolyActivityBuffMoreDamage_);
            break;
          }
          case 250: {
            if (monopolyActivityPortal_ == null) {
              monopolyActivityPortal_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyActivityPortal();
            }
            input.ReadMessage(monopolyActivityPortal_);
            break;
          }
          case 258: {
            if (levelRushGame_ == null) {
              levelRushGame_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.LevelRushGame();
            }
            input.ReadMessage(levelRushGame_);
            break;
          }
          case 266: {
            if (levelRushPaidGame_ == null) {
              levelRushPaidGame_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.LevelRushPaidGame();
            }
            input.ReadMessage(levelRushPaidGame_);
            break;
          }
          case 274: {
            if (independenceActivityPoint_ == null) {
              independenceActivityPoint_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.IndependenceActivityPoint();
            }
            input.ReadMessage(independenceActivityPoint_);
            break;
          }
          case 282: {
            if (superSpinxGame_ == null) {
              superSpinxGame_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.SuperSpinXGame();
            }
            input.ReadMessage(superSpinxGame_);
            break;
          }
          case 290: {
            if (monopolyPuzzleFragment_ == null) {
              monopolyPuzzleFragment_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.MonopolyPuzzleFragment();
            }
            input.ReadMessage(monopolyPuzzleFragment_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Item message type.</summary>
    public static class Types {
      public enum Type {
        Coin = 0,
        Emerald = 1,
        VipPoints = 2,
        ShopCoin = 3,
        ShopEmerald = 4,
        ShopBoost = 5,
        ShopGiftBox = 6,
        LevelUpBurst = 7,
        SuperWheel = 8,
        MissionPoints = 9,
        MissionStar = 10,
        MissionPass = 11,
        PayWheelBonus = 12,
        DoubleExp = 13,
        CashBackBuffsWin = 14,
        CashBackBuffsNowin = 15,
        CashBackBuffsBet = 16,
        BonusCoupon = 17,
        SeasonQuestStar = 18,
        SeasonQuestStarBoost = 19,
        SeasonQuestComplete = 20,
        ValentineActivityPoint = 21,
        SilverHammer = 22,
        GoldHammer = 23,
        Card = 24,
        CardPackage = 25,
        Avatar = 26,
        NewbieQuestBoost = 27,
        MonopolyActivityTicket = 28,
        MonopolyActivityBuffMoreTicket = 29,
        MonopolyActivityBuffMoreDamage = 30,
        MonopolyActivityPortal = 31,
        /// <summary>
        ///一次levelrush的免费游戏
        /// </summary>
        LevelRushGame = 32,
        /// <summary>
        /// 一次levelrush的付费游戏
        /// </summary>
        LevelRushPaidGame = 33,
        /// <summary>
        /// 独立日活动的星星
        /// </summary>
        IndependenceDayActivityPoint = 34,
        /// <summary>
        /// superspinx的游戏
        /// </summary>
        SuperSpinxGame = 35,
        /// <summary>
        /// 大富翁拼图碎片
        /// </summary>
        MonopolyPuzzleFragment = 36,
      }

      public sealed class Coin : pb::IMessage {
        private static readonly pb::MessageParser<Coin> _parser = new pb::MessageParser<Coin>(() => new Coin());
        public static pb::MessageParser<Coin> Parser { get { return _parser; } }

        private ulong amount_;
        public ulong Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 商店物品-金币
      /// </summary>
      public sealed class ShopCoin : pb::IMessage {
        private static readonly pb::MessageParser<ShopCoin> _parser = new pb::MessageParser<ShopCoin>(() => new ShopCoin());
        public static pb::MessageParser<ShopCoin> Parser { get { return _parser; } }

        private ulong amount_;
        /// <summary>
        /// 数量
        /// </summary>
        public ulong Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private ulong additionAmount_;
        /// <summary>
        /// 加成后数量
        /// </summary>
        public ulong AdditionAmount {
          get { return additionAmount_; }
          set {
            additionAmount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Amount);
          }
          if (AdditionAmount != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(AdditionAmount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Amount);
          }
          if (AdditionAmount != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AdditionAmount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt64();
                break;
              }
              case 16: {
                AdditionAmount = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 商店物品-钻石
      /// </summary>
      public sealed class ShopEmerald : pb::IMessage {
        private static readonly pb::MessageParser<ShopEmerald> _parser = new pb::MessageParser<ShopEmerald>(() => new ShopEmerald());
        public static pb::MessageParser<ShopEmerald> Parser { get { return _parser; } }

        private ulong amount_;
        public ulong Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private ulong additionAmount_;
        /// <summary>
        /// 加成后数量
        /// </summary>
        public ulong AdditionAmount {
          get { return additionAmount_; }
          set {
            additionAmount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Amount);
          }
          if (AdditionAmount != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(AdditionAmount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Amount);
          }
          if (AdditionAmount != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AdditionAmount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt64();
                break;
              }
              case 16: {
                AdditionAmount = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 商店物品-boost
      /// </summary>
      public sealed class ShopBoost : pb::IMessage {
        private static readonly pb::MessageParser<ShopBoost> _parser = new pb::MessageParser<ShopBoost>(() => new ShopBoost());
        public static pb::MessageParser<ShopBoost> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 商店物品-giftBox
      /// </summary>
      public sealed class ShopGiftBox : pb::IMessage {
        private static readonly pb::MessageParser<ShopGiftBox> _parser = new pb::MessageParser<ShopGiftBox>(() => new ShopGiftBox());
        public static pb::MessageParser<ShopGiftBox> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.GiftBox giftBox_;
        public global::DragonU3DSDK.Network.API.ILProtocol.GiftBox GiftBox {
          get { return giftBox_; }
          set {
            giftBox_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
          if (giftBox_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(GiftBox);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          if (giftBox_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GiftBox);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
              case 18: {
                if (giftBox_ == null) {
                  giftBox_ = new global::DragonU3DSDK.Network.API.ILProtocol.GiftBox();
                }
                input.ReadMessage(giftBox_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 奖励物品-vipPoints
      /// </summary>
      public sealed class VipPoints : pb::IMessage {
        private static readonly pb::MessageParser<VipPoints> _parser = new pb::MessageParser<VipPoints>(() => new VipPoints());
        public static pb::MessageParser<VipPoints> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Item> _repeated_levelUpRewardItems_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Item.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> levelUpRewardItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item>();
        /// <summary>
        /// 因为vip升级带来的奖励放这里
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> LevelUpRewardItems {
          get { return levelUpRewardItems_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
          levelUpRewardItems_.WriteTo(output, _repeated_levelUpRewardItems_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          size += levelUpRewardItems_.CalculateSize(_repeated_levelUpRewardItems_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
              case 18: {
                levelUpRewardItems_.AddEntriesFrom(input, _repeated_levelUpRewardItems_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 奖励物品-emerald(钻石)
      /// </summary>
      public sealed class Emerald : pb::IMessage {
        private static readonly pb::MessageParser<Emerald> _parser = new pb::MessageParser<Emerald>(() => new Emerald());
        public static pb::MessageParser<Emerald> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// levelup-boost
      /// </summary>
      public sealed class LevelUpBurst : pb::IMessage {
        private static readonly pb::MessageParser<LevelUpBurst> _parser = new pb::MessageParser<LevelUpBurst>(() => new LevelUpBurst());
        public static pb::MessageParser<LevelUpBurst> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// super whell-boost
      /// </summary>
      public sealed class SuperWheel : pb::IMessage {
        private static readonly pb::MessageParser<SuperWheel> _parser = new pb::MessageParser<SuperWheel>(() => new SuperWheel());
        public static pb::MessageParser<SuperWheel> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 每日任务积分
      /// </summary>
      public sealed class MissionPoints : pb::IMessage {
        private static readonly pb::MessageParser<MissionPoints> _parser = new pb::MessageParser<MissionPoints>(() => new MissionPoints());
        public static pb::MessageParser<MissionPoints> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 每日任务星星，给通行证积分
      /// </summary>
      public sealed class MissionStar : pb::IMessage {
        private static readonly pb::MessageParser<MissionStar> _parser = new pb::MessageParser<MissionStar>(() => new MissionStar());
        public static pb::MessageParser<MissionStar> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 付费wheel的奖励
      /// </summary>
      public sealed class PayWheelBonus : pb::IMessage {
        private static readonly pb::MessageParser<PayWheelBonus> _parser = new pb::MessageParser<PayWheelBonus>(() => new PayWheelBonus());
        public static pb::MessageParser<PayWheelBonus> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<uint> _repeated_hitWedgeIds_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> hitWedgeIds_ = new pbc::RepeatedField<uint>();
        public pbc::RepeatedField<uint> HitWedgeIds {
          get { return hitWedgeIds_; }
        }

        private ulong userBuffGodenOdds_;
        /// <summary>
        /// 用户buff引起的金币加成，仅用于客户端显示；
        /// </summary>
        public ulong UserBuffGodenOdds {
          get { return userBuffGodenOdds_; }
          set {
            userBuffGodenOdds_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          hitWedgeIds_.WriteTo(output, _repeated_hitWedgeIds_codec);
          if (UserBuffGodenOdds != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(UserBuffGodenOdds);
          }
        }

        public int CalculateSize() {
          int size = 0;
          size += hitWedgeIds_.CalculateSize(_repeated_hitWedgeIds_codec);
          if (UserBuffGodenOdds != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserBuffGodenOdds);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 8: {
                hitWedgeIds_.AddEntriesFrom(input, _repeated_hitWedgeIds_codec);
                break;
              }
              case 16: {
                UserBuffGodenOdds = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 双倍经验物品
      /// </summary>
      public sealed class DoubleExp : pb::IMessage {
        private static readonly pb::MessageParser<DoubleExp> _parser = new pb::MessageParser<DoubleExp>(() => new DoubleExp());
        public static pb::MessageParser<DoubleExp> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class CashBackBuff : pb::IMessage {
        private static readonly pb::MessageParser<CashBackBuff> _parser = new pb::MessageParser<CashBackBuff>(() => new CashBackBuff());
        public static pb::MessageParser<CashBackBuff> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private uint buffType_;
        /// <summary>
        ///buff类型 0 win 1 nowin 2 bet
        /// </summary>
        public uint BuffType {
          get { return buffType_; }
          set {
            buffType_ = value;
          }
        }

        private float backPercentage_;
        /// <summary>
        ///返还百分比，如3表 3%
        /// </summary>
        public float BackPercentage {
          get { return backPercentage_; }
          set {
            backPercentage_ = value;
          }
        }

        private long backLimitedBaseValue_;
        /// <summary>
        ///返还金币上限的基础值
        /// </summary>
        public long BackLimitedBaseValue {
          get { return backLimitedBaseValue_; }
          set {
            backLimitedBaseValue_ = value;
          }
        }

        private uint rewardMode_;
        /// <summary>
        ///发放奖励模式
        /// </summary>
        public uint RewardMode {
          get { return rewardMode_; }
          set {
            rewardMode_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
          if (BuffType != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(BuffType);
          }
          if (BackPercentage != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(BackPercentage);
          }
          if (BackLimitedBaseValue != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(BackLimitedBaseValue);
          }
          if (RewardMode != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(RewardMode);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          if (BuffType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffType);
          }
          if (BackPercentage != 0F) {
            size += 1 + 4;
          }
          if (BackLimitedBaseValue != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(BackLimitedBaseValue);
          }
          if (RewardMode != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardMode);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
              case 16: {
                BuffType = input.ReadUInt32();
                break;
              }
              case 29: {
                BackPercentage = input.ReadFloat();
                break;
              }
              case 32: {
                BackLimitedBaseValue = input.ReadInt64();
                break;
              }
              case 40: {
                RewardMode = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CashBackBuff message type.</summary>
        public static class Types {
          public enum CashBackBuffRewardMode {
            /// <summary>
            ///buff时间结束后立刻发奖
            /// </summary>
            EndMail = 0,
            /// <summary>
            ///buff时间结束后第二天发奖
            /// </summary>
            NextDayMail = 1,
          }

        }
        #endregion

      }

      public sealed class BonusCoupon : pb::IMessage {
        private static readonly pb::MessageParser<BonusCoupon> _parser = new pb::MessageParser<BonusCoupon>(() => new BonusCoupon());
        public static pb::MessageParser<BonusCoupon> Parser { get { return _parser; } }

        private uint amount_;
        /// <summary>
        /// 数量
        /// </summary>
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private uint type_;
        /// <summary>
        ///类型 1普通 2节日
        /// </summary>
        public uint Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        private uint itemIdTarget_;
        /// <summary>
        /// 影响的道具ID
        /// </summary>
        public uint ItemIdTarget {
          get { return itemIdTarget_; }
          set {
            itemIdTarget_ = value;
          }
        }

        private uint bonusPercentage_;
        /// <summary>
        /// 对应道具在支付后，获取时的增幅百分比，如50 表50%
        /// </summary>
        public uint BonusPercentage {
          get { return bonusPercentage_; }
          set {
            bonusPercentage_ = value;
          }
        }

        private uint effectiveTime_;
        /// <summary>
        /// 有效时长，单位秒
        /// </summary>
        public uint EffectiveTime {
          get { return effectiveTime_; }
          set {
            effectiveTime_ = value;
          }
        }

        private string linkedActivityId_ = "";
        /// <summary>
        /// 关联的活动ID，默认为空字符串
        /// </summary>
        public string LinkedActivityId {
          get { return linkedActivityId_; }
          set {
            linkedActivityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Type);
          }
          if (ItemIdTarget != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(ItemIdTarget);
          }
          if (BonusPercentage != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(BonusPercentage);
          }
          if (EffectiveTime != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(EffectiveTime);
          }
          if (LinkedActivityId.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(LinkedActivityId);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
          }
          if (ItemIdTarget != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemIdTarget);
          }
          if (BonusPercentage != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BonusPercentage);
          }
          if (EffectiveTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EffectiveTime);
          }
          if (LinkedActivityId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LinkedActivityId);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
              case 16: {
                Type = input.ReadUInt32();
                break;
              }
              case 24: {
                ItemIdTarget = input.ReadUInt32();
                break;
              }
              case 32: {
                BonusPercentage = input.ReadUInt32();
                break;
              }
              case 40: {
                EffectiveTime = input.ReadUInt32();
                break;
              }
              case 50: {
                LinkedActivityId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed class SeasonQuestStar : pb::IMessage {
        private static readonly pb::MessageParser<SeasonQuestStar> _parser = new pb::MessageParser<SeasonQuestStar>(() => new SeasonQuestStar());
        public static pb::MessageParser<SeasonQuestStar> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class SeasonQuestStarBoost : pb::IMessage {
        private static readonly pb::MessageParser<SeasonQuestStarBoost> _parser = new pb::MessageParser<SeasonQuestStarBoost>(() => new SeasonQuestStarBoost());
        public static pb::MessageParser<SeasonQuestStarBoost> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class SeasonQuestComplete : pb::IMessage {
        private static readonly pb::MessageParser<SeasonQuestComplete> _parser = new pb::MessageParser<SeasonQuestComplete>(() => new SeasonQuestComplete());
        public static pb::MessageParser<SeasonQuestComplete> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class ValentineActivityPoint : pb::IMessage {
        private static readonly pb::MessageParser<ValentineActivityPoint> _parser = new pb::MessageParser<ValentineActivityPoint>(() => new ValentineActivityPoint());
        public static pb::MessageParser<ValentineActivityPoint> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class SilverHammer : pb::IMessage {
        private static readonly pb::MessageParser<SilverHammer> _parser = new pb::MessageParser<SilverHammer>(() => new SilverHammer());
        public static pb::MessageParser<SilverHammer> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class GoldHammer : pb::IMessage {
        private static readonly pb::MessageParser<GoldHammer> _parser = new pb::MessageParser<GoldHammer>(() => new GoldHammer());
        public static pb::MessageParser<GoldHammer> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///卡牌
      /// </summary>
      public sealed class Card : pb::IMessage {
        private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
        public static pb::MessageParser<Card> Parser { get { return _parser; } }

        private uint cardId_;
        public uint CardId {
          get { return cardId_; }
          set {
            cardId_ = value;
          }
        }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private uint cardSetId_;
        public uint CardSetId {
          get { return cardSetId_; }
          set {
            cardSetId_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (CardId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(CardId);
          }
          if (Amount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Amount);
          }
          if (CardSetId != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(CardSetId);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (CardId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
          }
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          if (CardSetId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardSetId);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                CardId = input.ReadUInt32();
                break;
              }
              case 16: {
                Amount = input.ReadUInt32();
                break;
              }
              case 24: {
                CardSetId = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///表示一个卡包
      /// </summary>
      public sealed class CardPackage : pb::IMessage {
        private static readonly pb::MessageParser<CardPackage> _parser = new pb::MessageParser<CardPackage>(() => new CardPackage());
        public static pb::MessageParser<CardPackage> Parser { get { return _parser; } }

        private uint packageId_;
        public uint PackageId {
          get { return packageId_; }
          set {
            packageId_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CardPackage.Types.CardPackageType packageType_ = 0;
        /// <summary>
        ///卡包类型
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CardPackage.Types.CardPackageType PackageType {
          get { return packageType_; }
          set {
            packageType_ = value;
          }
        }

        private uint amount_;
        /// <summary>
        ///此处为1
        /// </summary>
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Card> _repeated_cardsIncludes_codec
            = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Card.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Card> cardsIncludes_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Card>();
        /// <summary>
        ///卡包内包含的卡牌
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.Card> CardsIncludes {
          get { return cardsIncludes_; }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CardPackage.Types.CardPackageConfig packageConfig_;
        /// <summary>
        /// 卡包配置
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CardPackage.Types.CardPackageConfig PackageConfig {
          get { return packageConfig_; }
          set {
            packageConfig_ = value;
          }
        }

        private uint luckySpinNewAddCount_;
        /// <summary>
        ///开卡获得luckyspin的次数
        /// </summary>
        public uint LuckySpinNewAddCount {
          get { return luckySpinNewAddCount_; }
          set {
            luckySpinNewAddCount_ = value;
          }
        }

        private uint luckyChallengeRewardCount_;
        /// <summary>
        ///开卡导致的获得 lucky challenge奖励的次数
        /// </summary>
        public uint LuckyChallengeRewardCount {
          get { return luckyChallengeRewardCount_; }
          set {
            luckyChallengeRewardCount_ = value;
          }
        }

        private uint luckyChallengeNewProgress_;
        /// <summary>
        ///lucky challenge 目前的最新进度
        /// </summary>
        public uint LuckyChallengeNewProgress {
          get { return luckyChallengeNewProgress_; }
          set {
            luckyChallengeNewProgress_ = value;
          }
        }

        private uint cardLuckySpinCount_;
        /// <summary>
        ///开卡后lucky spin 的总次数    
        /// </summary>
        public uint CardLuckySpinCount {
          get { return cardLuckySpinCount_; }
          set {
            cardLuckySpinCount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (PackageId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PackageId);
          }
          if (PackageType != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) PackageType);
          }
          if (Amount != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Amount);
          }
          cardsIncludes_.WriteTo(output, _repeated_cardsIncludes_codec);
          if (packageConfig_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(PackageConfig);
          }
          if (LuckySpinNewAddCount != 0) {
            output.WriteRawTag(48);
            output.WriteUInt32(LuckySpinNewAddCount);
          }
          if (LuckyChallengeRewardCount != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(LuckyChallengeRewardCount);
          }
          if (LuckyChallengeNewProgress != 0) {
            output.WriteRawTag(64);
            output.WriteUInt32(LuckyChallengeNewProgress);
          }
          if (CardLuckySpinCount != 0) {
            output.WriteRawTag(72);
            output.WriteUInt32(CardLuckySpinCount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (PackageId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PackageId);
          }
          if (PackageType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PackageType);
          }
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          size += cardsIncludes_.CalculateSize(_repeated_cardsIncludes_codec);
          if (packageConfig_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PackageConfig);
          }
          if (LuckySpinNewAddCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LuckySpinNewAddCount);
          }
          if (LuckyChallengeRewardCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LuckyChallengeRewardCount);
          }
          if (LuckyChallengeNewProgress != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LuckyChallengeNewProgress);
          }
          if (CardLuckySpinCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardLuckySpinCount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PackageId = input.ReadUInt32();
                break;
              }
              case 16: {
                packageType_ = (global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CardPackage.Types.CardPackageType) input.ReadEnum();
                break;
              }
              case 24: {
                Amount = input.ReadUInt32();
                break;
              }
              case 34: {
                cardsIncludes_.AddEntriesFrom(input, _repeated_cardsIncludes_codec);
                break;
              }
              case 42: {
                if (packageConfig_ == null) {
                  packageConfig_ = new global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CardPackage.Types.CardPackageConfig();
                }
                input.ReadMessage(packageConfig_);
                break;
              }
              case 48: {
                LuckySpinNewAddCount = input.ReadUInt32();
                break;
              }
              case 56: {
                LuckyChallengeRewardCount = input.ReadUInt32();
                break;
              }
              case 64: {
                LuckyChallengeNewProgress = input.ReadUInt32();
                break;
              }
              case 72: {
                CardLuckySpinCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CardPackage message type.</summary>
        public static class Types {
          public enum CardPackageType {
            Normal = 0,
            Golden = 1,
            Lucky = 2,
          }

          public sealed class CardPackageConfig : pb::IMessage {
            private static readonly pb::MessageParser<CardPackageConfig> _parser = new pb::MessageParser<CardPackageConfig>(() => new CardPackageConfig());
            public static pb::MessageParser<CardPackageConfig> Parser { get { return _parser; } }

            private uint id_;
            public uint Id {
              get { return id_; }
              set {
                id_ = value;
              }
            }

            private global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CardPackage.Types.CardPackageType cardPackageType_ = 0;
            public global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CardPackage.Types.CardPackageType CardPackageType {
              get { return cardPackageType_; }
              set {
                cardPackageType_ = value;
              }
            }

            private uint specialCardStar_;
            public uint SpecialCardStar {
              get { return specialCardStar_; }
              set {
                specialCardStar_ = value;
              }
            }

            private uint cardCount_;
            public uint CardCount {
              get { return cardCount_; }
              set {
                cardCount_ = value;
              }
            }

            private uint maxStar_;
            public uint MaxStar {
              get { return maxStar_; }
              set {
                maxStar_ = value;
              }
            }

            private uint miniStar_;
            public uint MiniStar {
              get { return miniStar_; }
              set {
                miniStar_ = value;
              }
            }

            private uint miniStarCount_;
            public uint MiniStarCount {
              get { return miniStarCount_; }
              set {
                miniStarCount_ = value;
              }
            }

            private uint typeForShow_;
            public uint TypeForShow {
              get { return typeForShow_; }
              set {
                typeForShow_ = value;
              }
            }

            public void WriteTo(pb::CodedOutputStream output) {
              if (Id != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(Id);
              }
              if (CardPackageType != 0) {
                output.WriteRawTag(16);
                output.WriteEnum((int) CardPackageType);
              }
              if (SpecialCardStar != 0) {
                output.WriteRawTag(24);
                output.WriteUInt32(SpecialCardStar);
              }
              if (CardCount != 0) {
                output.WriteRawTag(32);
                output.WriteUInt32(CardCount);
              }
              if (MaxStar != 0) {
                output.WriteRawTag(40);
                output.WriteUInt32(MaxStar);
              }
              if (MiniStar != 0) {
                output.WriteRawTag(48);
                output.WriteUInt32(MiniStar);
              }
              if (MiniStarCount != 0) {
                output.WriteRawTag(56);
                output.WriteUInt32(MiniStarCount);
              }
              if (TypeForShow != 0) {
                output.WriteRawTag(64);
                output.WriteUInt32(TypeForShow);
              }
            }

            public int CalculateSize() {
              int size = 0;
              if (Id != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
              }
              if (CardPackageType != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CardPackageType);
              }
              if (SpecialCardStar != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecialCardStar);
              }
              if (CardCount != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardCount);
              }
              if (MaxStar != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxStar);
              }
              if (MiniStar != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MiniStar);
              }
              if (MiniStarCount != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MiniStarCount);
              }
              if (TypeForShow != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TypeForShow);
              }
              return size;
            }

            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    input.SkipLastField();
                    break;
                  case 8: {
                    Id = input.ReadUInt32();
                    break;
                  }
                  case 16: {
                    cardPackageType_ = (global::DragonU3DSDK.Network.API.ILProtocol.Item.Types.CardPackage.Types.CardPackageType) input.ReadEnum();
                    break;
                  }
                  case 24: {
                    SpecialCardStar = input.ReadUInt32();
                    break;
                  }
                  case 32: {
                    CardCount = input.ReadUInt32();
                    break;
                  }
                  case 40: {
                    MaxStar = input.ReadUInt32();
                    break;
                  }
                  case 48: {
                    MiniStar = input.ReadUInt32();
                    break;
                  }
                  case 56: {
                    MiniStarCount = input.ReadUInt32();
                    break;
                  }
                  case 64: {
                    TypeForShow = input.ReadUInt32();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed class Avatar : pb::IMessage {
        private static readonly pb::MessageParser<Avatar> _parser = new pb::MessageParser<Avatar>(() => new Avatar());
        public static pb::MessageParser<Avatar> Parser { get { return _parser; } }

        private uint id_;
        /// <summary>
        /// 头像ID，与item表中的ID一致
        /// </summary>
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        private uint count_;
        /// <summary>
        /// 数量，最大为1
        /// </summary>
        public uint Count {
          get { return count_; }
          set {
            count_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Count != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Count);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Count = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class NewbieQuestBoost : pb::IMessage {
        private static readonly pb::MessageParser<NewbieQuestBoost> _parser = new pb::MessageParser<NewbieQuestBoost>(() => new NewbieQuestBoost());
        public static pb::MessageParser<NewbieQuestBoost> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class MonopolyActivityTicket : pb::IMessage {
        private static readonly pb::MessageParser<MonopolyActivityTicket> _parser = new pb::MessageParser<MonopolyActivityTicket>(() => new MonopolyActivityTicket());
        public static pb::MessageParser<MonopolyActivityTicket> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class MonopolyActivityBuffMoreTicket : pb::IMessage {
        private static readonly pb::MessageParser<MonopolyActivityBuffMoreTicket> _parser = new pb::MessageParser<MonopolyActivityBuffMoreTicket>(() => new MonopolyActivityBuffMoreTicket());
        public static pb::MessageParser<MonopolyActivityBuffMoreTicket> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private uint moreTicket_;
        /// <summary>
        /// 能量条满之后附加获得多少票
        /// </summary>
        public uint MoreTicket {
          get { return moreTicket_; }
          set {
            moreTicket_ = value;
          }
        }

        private uint amountWhenNoAddition_;
        /// <summary>
        /// 当无加成时的值，该值!=amount时 显示 x% more(x= (amount - amount_when_no_addition)/amount*100)
        /// </summary>
        public uint AmountWhenNoAddition {
          get { return amountWhenNoAddition_; }
          set {
            amountWhenNoAddition_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
          if (MoreTicket != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(MoreTicket);
          }
          if (AmountWhenNoAddition != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(AmountWhenNoAddition);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          if (MoreTicket != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoreTicket);
          }
          if (AmountWhenNoAddition != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AmountWhenNoAddition);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
              case 16: {
                MoreTicket = input.ReadUInt32();
                break;
              }
              case 24: {
                AmountWhenNoAddition = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class MonopolyActivityBuffMoreDamage : pb::IMessage {
        private static readonly pb::MessageParser<MonopolyActivityBuffMoreDamage> _parser = new pb::MessageParser<MonopolyActivityBuffMoreDamage>(() => new MonopolyActivityBuffMoreDamage());
        public static pb::MessageParser<MonopolyActivityBuffMoreDamage> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private uint moreDamage_;
        /// <summary>
        /// 火炮附加伤害加成百分数 100表增加伤害100%
        /// </summary>
        public uint MoreDamage {
          get { return moreDamage_; }
          set {
            moreDamage_ = value;
          }
        }

        private uint amountWhenNoAddition_;
        /// <summary>
        /// 当无加成时的值，该值!=amount时 显示 x% more(x= (amount - amount_when_no_addition)/amount*100)
        /// </summary>
        public uint AmountWhenNoAddition {
          get { return amountWhenNoAddition_; }
          set {
            amountWhenNoAddition_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
          if (MoreDamage != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(MoreDamage);
          }
          if (AmountWhenNoAddition != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(AmountWhenNoAddition);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          if (MoreDamage != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoreDamage);
          }
          if (AmountWhenNoAddition != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AmountWhenNoAddition);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
              case 16: {
                MoreDamage = input.ReadUInt32();
                break;
              }
              case 24: {
                AmountWhenNoAddition = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class MonopolyActivityPortal : pb::IMessage {
        private static readonly pb::MessageParser<MonopolyActivityPortal> _parser = new pb::MessageParser<MonopolyActivityPortal>(() => new MonopolyActivityPortal());
        public static pb::MessageParser<MonopolyActivityPortal> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private uint amountWhenNoAddition_;
        /// <summary>
        /// 当无加成时的值，该值!=amount时 显示 x% more(x= (amount - amount_when_no_addition)/amount*100)
        /// </summary>
        public uint AmountWhenNoAddition {
          get { return amountWhenNoAddition_; }
          set {
            amountWhenNoAddition_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
          if (AmountWhenNoAddition != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(AmountWhenNoAddition);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          if (AmountWhenNoAddition != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AmountWhenNoAddition);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
              case 16: {
                AmountWhenNoAddition = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class LevelRushGame : pb::IMessage {
        private static readonly pb::MessageParser<LevelRushGame> _parser = new pb::MessageParser<LevelRushGame>(() => new LevelRushGame());
        public static pb::MessageParser<LevelRushGame> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class LevelRushPaidGame : pb::IMessage {
        private static readonly pb::MessageParser<LevelRushPaidGame> _parser = new pb::MessageParser<LevelRushPaidGame>(() => new LevelRushPaidGame());
        public static pb::MessageParser<LevelRushPaidGame> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPaidGameInItem gameInfo_;
        public global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPaidGameInItem GameInfo {
          get { return gameInfo_; }
          set {
            gameInfo_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
          if (gameInfo_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(GameInfo);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          if (gameInfo_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
              case 18: {
                if (gameInfo_ == null) {
                  gameInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPaidGameInItem();
                }
                input.ReadMessage(gameInfo_);
                break;
              }
            }
          }
        }

      }

      public sealed class IndependenceActivityPoint : pb::IMessage {
        private static readonly pb::MessageParser<IndependenceActivityPoint> _parser = new pb::MessageParser<IndependenceActivityPoint>(() => new IndependenceActivityPoint());
        public static pb::MessageParser<IndependenceActivityPoint> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class SuperSpinXGame : pb::IMessage {
        private static readonly pb::MessageParser<SuperSpinXGame> _parser = new pb::MessageParser<SuperSpinXGame>(() => new SuperSpinXGame());
        public static pb::MessageParser<SuperSpinXGame> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.SuperSpinXGameInItem gameInfo_;
        public global::DragonU3DSDK.Network.API.ILProtocol.SuperSpinXGameInItem GameInfo {
          get { return gameInfo_; }
          set {
            gameInfo_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
          if (gameInfo_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(GameInfo);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          if (gameInfo_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
              case 18: {
                if (gameInfo_ == null) {
                  gameInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.SuperSpinXGameInItem();
                }
                input.ReadMessage(gameInfo_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 大富翁拼图碎片
      /// </summary>
      public sealed class MonopolyPuzzleFragment : pb::IMessage {
        private static readonly pb::MessageParser<MonopolyPuzzleFragment> _parser = new pb::MessageParser<MonopolyPuzzleFragment>(() => new MonopolyPuzzleFragment());
        public static pb::MessageParser<MonopolyPuzzleFragment> Parser { get { return _parser; } }

        private uint amount_;
        public uint Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private uint position_;
        /// <summary>
        /// 在拼图内的碎片序号 从0开始
        /// </summary>
        public uint Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Amount != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Amount);
          }
          if (Position != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Position);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Amount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
          }
          if (Position != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Amount = input.ReadUInt32();
                break;
              }
              case 16: {
                Position = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class Mission : pb::IMessage {
    private static readonly pb::MessageParser<Mission> _parser = new pb::MessageParser<Mission>(() => new Mission());
    public static pb::MessageParser<Mission> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.Mission.Types.Type type_ = 0;
    /// <summary>
    /// 类型
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Mission.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private ulong currentCoin_;
    /// <summary>
    /// 当前任务金币累计进度
    /// </summary>
    public ulong CurrentCoin {
      get { return currentCoin_; }
      set {
        currentCoin_ = value;
      }
    }

    private ulong targetCoin_;
    /// <summary>
    /// 当前任务金币目标
    /// </summary>
    public ulong TargetCoin {
      get { return targetCoin_; }
      set {
        targetCoin_ = value;
      }
    }

    private uint currentTimes_;
    /// <summary>
    /// 当前任务次数进度
    /// </summary>
    public uint CurrentTimes {
      get { return currentTimes_; }
      set {
        currentTimes_ = value;
      }
    }

    private uint times_;
    /// <summary>
    /// 当前任务次数目标
    /// </summary>
    public uint Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    private uint difficulty_;
    /// <summary>
    /// 当前任务难度， 普通是 1 2 3， 荣誉任务目前大于3
    /// </summary>
    public uint Difficulty {
      get { return difficulty_; }
      set {
        difficulty_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_machineLimited_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> machineLimited_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 机台限制
    /// </summary>
    public pbc::RepeatedField<string> MachineLimited {
      get { return machineLimited_; }
    }

    private bool finished_;
    /// <summary>
    /// 任务是否完成，可以领取
    /// </summary>
    public bool Finished {
      get { return finished_; }
      set {
        finished_ = value;
      }
    }

    private bool collected_;
    /// <summary>
    /// 奖励是否领取
    /// </summary>
    public bool Collected {
      get { return collected_; }
      set {
        collected_ = value;
      }
    }

    private ulong diamond_;
    /// <summary>
    /// 快速完成钻石消耗
    /// </summary>
    public ulong Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(90, global::DragonU3DSDK.Network.API.ILProtocol.Item.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> items_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item>();
    /// <summary>
    /// 奖励列表
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> Items {
      get { return items_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Item> _repeated_diamondExtraItems_codec
        = pb::FieldCodec.ForMessage(98, global::DragonU3DSDK.Network.API.ILProtocol.Item.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> diamondExtraItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item>();
    /// <summary>
    /// 钻石完成额外奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> DiamondExtraItems {
      get { return diamondExtraItems_; }
    }

    private string ui_ = "";
    /// <summary>
    /// ui
    /// </summary>
    public string Ui {
      get { return ui_; }
      set {
        ui_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private ulong expectedBet_;
    /// <summary>
    /// bet约束
    /// </summary>
    public ulong ExpectedBet {
      get { return expectedBet_; }
      set {
        expectedBet_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (CurrentCoin != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(CurrentCoin);
      }
      if (TargetCoin != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TargetCoin);
      }
      if (CurrentTimes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CurrentTimes);
      }
      if (Times != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Times);
      }
      if (Difficulty != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Difficulty);
      }
      machineLimited_.WriteTo(output, _repeated_machineLimited_codec);
      if (Finished != false) {
        output.WriteRawTag(64);
        output.WriteBool(Finished);
      }
      if (Collected != false) {
        output.WriteRawTag(72);
        output.WriteBool(Collected);
      }
      if (Diamond != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(Diamond);
      }
      items_.WriteTo(output, _repeated_items_codec);
      diamondExtraItems_.WriteTo(output, _repeated_diamondExtraItems_codec);
      if (Ui.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Ui);
      }
      if (ExpectedBet != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(ExpectedBet);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (CurrentCoin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CurrentCoin);
      }
      if (TargetCoin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetCoin);
      }
      if (CurrentTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentTimes);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Times);
      }
      if (Difficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Difficulty);
      }
      size += machineLimited_.CalculateSize(_repeated_machineLimited_codec);
      if (Finished != false) {
        size += 1 + 1;
      }
      if (Collected != false) {
        size += 1 + 1;
      }
      if (Diamond != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Diamond);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      size += diamondExtraItems_.CalculateSize(_repeated_diamondExtraItems_codec);
      if (Ui.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ui);
      }
      if (ExpectedBet != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpectedBet);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::DragonU3DSDK.Network.API.ILProtocol.Mission.Types.Type) input.ReadEnum();
            break;
          }
          case 16: {
            CurrentCoin = input.ReadUInt64();
            break;
          }
          case 24: {
            TargetCoin = input.ReadUInt64();
            break;
          }
          case 32: {
            CurrentTimes = input.ReadUInt32();
            break;
          }
          case 40: {
            Times = input.ReadUInt32();
            break;
          }
          case 48: {
            Difficulty = input.ReadUInt32();
            break;
          }
          case 58: {
            machineLimited_.AddEntriesFrom(input, _repeated_machineLimited_codec);
            break;
          }
          case 64: {
            Finished = input.ReadBool();
            break;
          }
          case 72: {
            Collected = input.ReadBool();
            break;
          }
          case 80: {
            Diamond = input.ReadUInt64();
            break;
          }
          case 90: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 98: {
            diamondExtraItems_.AddEntriesFrom(input, _repeated_diamondExtraItems_codec);
            break;
          }
          case 106: {
            Ui = input.ReadString();
            break;
          }
          case 112: {
            ExpectedBet = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Mission message type.</summary>
    public static class Types {
      public enum Type {
        None = 0,
        WinXTimesInARow = 1,
        SpinXTimes = 2,
        WinXTimes = 3,
        WinXCoinsInASingleSpinYTimes = 4,
        BetATotalOfXCoins = 5,
        WinATotalOfXCoins = 6,
        WinXCoinsInYSpins = 7,
        WinXCoinsInYFreeSpins = 8,
        GetBigWinXTimes = 9,
        GetHugeWinXTimes = 10,
        Get5OfAKindXTimes = 11,
        LevelUpXTimes = 12,
        GetLockItLinkXTimes = 13,
        GetFreeGameXTimes = 14,
        WinXTimesWithMinimumBetOfY = 15,
        BetXCoinsWithMinimumBetOfY = 16,
        WinXCoinsInLinkFeature = 17,
        WinXCoinsInBingo = 18,
        WinXCoinsInFeature = 19,
      }

    }
    #endregion

  }

  /// <summary>
  /// 商城计费点配置信息
  /// </summary>
  public sealed class ShopItemConfig : pb::IMessage {
    private static readonly pb::MessageParser<ShopItemConfig> _parser = new pb::MessageParser<ShopItemConfig>(() => new ShopItemConfig());
    public static pb::MessageParser<ShopItemConfig> Parser { get { return _parser; } }

    private string productId_ = "";
    /// <summary>
    /// 商品在GooglePlay/AppStore内的id
    /// </summary>
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint paymentId_;
    /// <summary>
    /// 对应的payment_id(实际商品)
    /// </summary>
    public uint PaymentId {
      get { return paymentId_; }
      set {
        paymentId_ = value;
      }
    }

    private string productType_ = "";
    /// <summary>
    /// 商品类型(coin/diamond/boost)
    /// </summary>
    public string ProductType {
      get { return productType_; }
      set {
        productType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string shopType_ = "";
    /// <summary>
    /// 计费点触发类型
    /// </summary>
    public string ShopType {
      get { return shopType_; }
      set {
        shopType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string name_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string description_ = "";
    /// <summary>
    /// 描述
    /// </summary>
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string image_ = "";
    /// <summary>
    /// 商品图片(对应priority的值)
    /// </summary>
    public string Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private float price_;
    /// <summary>
    /// 美元价格
    /// </summary>
    public float Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    private bool bestValue_;
    /// <summary>
    /// 最有价值
    /// </summary>
    public bool BestValue {
      get { return bestValue_; }
      set {
        bestValue_ = value;
      }
    }

    private bool mostPopular_;
    /// <summary>
    /// 最受欢迎
    /// </summary>
    public bool MostPopular {
      get { return mostPopular_; }
      set {
        mostPopular_ = value;
      }
    }

    private bool onSale_;
    /// <summary>
    /// 限时促销
    /// </summary>
    public bool OnSale {
      get { return onSale_; }
      set {
        onSale_ = value;
      }
    }

    private uint onSaleTime_;
    /// <summary>
    /// 限时促销倒计时(秒)
    /// </summary>
    public uint OnSaleTime {
      get { return onSaleTime_; }
      set {
        onSaleTime_ = value;
      }
    }

    private float showDiscount_;
    /// <summary>
    /// 显示折扣
    /// </summary>
    public float ShowDiscount {
      get { return showDiscount_; }
      set {
        showDiscount_ = value;
      }
    }

    private float oldPrice_;
    /// <summary>
    /// 如果显示打折价格,这里是打折前的价格
    /// </summary>
    public float OldPrice {
      get { return oldPrice_; }
      set {
        oldPrice_ = value;
      }
    }

    private string extra_ = "";
    /// <summary>
    /// 扩展信息
    /// </summary>
    public string Extra {
      get { return extra_; }
      set {
        extra_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Item> _repeated_subItemList_codec
        = pb::FieldCodec.ForMessage(130, global::DragonU3DSDK.Network.API.ILProtocol.Item.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> subItemList_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item>();
    /// <summary>
    /// 实际物品信息
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> SubItemList {
      get { return subItemList_; }
    }

    private uint mailTemplateId_;
    public uint MailTemplateId {
      get { return mailTemplateId_; }
      set {
        mailTemplateId_ = value;
      }
    }

    private float showDiscountCoupon_;
    /// <summary>
    /// 显示优惠券折扣
    /// </summary>
    public float ShowDiscountCoupon {
      get { return showDiscountCoupon_; }
      set {
        showDiscountCoupon_ = value;
      }
    }

    private bool superSpinBehind_;
    /// <summary>
    /// 支付该项后，是否会引发superspin,该值为true时，在该项支付成功后去获取superspin的支付项信息
    /// </summary>
    public bool SuperSpinBehind {
      get { return superSpinBehind_; }
      set {
        superSpinBehind_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ProductId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductId);
      }
      if (PaymentId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PaymentId);
      }
      if (ProductType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductType);
      }
      if (ShopType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ShopType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Image);
      }
      if (Price != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Price);
      }
      if (BestValue != false) {
        output.WriteRawTag(72);
        output.WriteBool(BestValue);
      }
      if (MostPopular != false) {
        output.WriteRawTag(80);
        output.WriteBool(MostPopular);
      }
      if (OnSale != false) {
        output.WriteRawTag(88);
        output.WriteBool(OnSale);
      }
      if (OnSaleTime != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(OnSaleTime);
      }
      if (ShowDiscount != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(ShowDiscount);
      }
      if (OldPrice != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(OldPrice);
      }
      if (Extra.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Extra);
      }
      subItemList_.WriteTo(output, _repeated_subItemList_codec);
      if (MailTemplateId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(MailTemplateId);
      }
      if (ShowDiscountCoupon != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(ShowDiscountCoupon);
      }
      if (SuperSpinBehind != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(SuperSpinBehind);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (PaymentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PaymentId);
      }
      if (ProductType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductType);
      }
      if (ShopType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShopType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Image);
      }
      if (Price != 0F) {
        size += 1 + 4;
      }
      if (BestValue != false) {
        size += 1 + 1;
      }
      if (MostPopular != false) {
        size += 1 + 1;
      }
      if (OnSale != false) {
        size += 1 + 1;
      }
      if (OnSaleTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnSaleTime);
      }
      if (ShowDiscount != 0F) {
        size += 1 + 4;
      }
      if (OldPrice != 0F) {
        size += 1 + 4;
      }
      if (Extra.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Extra);
      }
      size += subItemList_.CalculateSize(_repeated_subItemList_codec);
      if (MailTemplateId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MailTemplateId);
      }
      if (ShowDiscountCoupon != 0F) {
        size += 2 + 4;
      }
      if (SuperSpinBehind != false) {
        size += 2 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProductId = input.ReadString();
            break;
          }
          case 16: {
            PaymentId = input.ReadUInt32();
            break;
          }
          case 26: {
            ProductType = input.ReadString();
            break;
          }
          case 34: {
            ShopType = input.ReadString();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 58: {
            Image = input.ReadString();
            break;
          }
          case 69: {
            Price = input.ReadFloat();
            break;
          }
          case 72: {
            BestValue = input.ReadBool();
            break;
          }
          case 80: {
            MostPopular = input.ReadBool();
            break;
          }
          case 88: {
            OnSale = input.ReadBool();
            break;
          }
          case 96: {
            OnSaleTime = input.ReadUInt32();
            break;
          }
          case 109: {
            ShowDiscount = input.ReadFloat();
            break;
          }
          case 117: {
            OldPrice = input.ReadFloat();
            break;
          }
          case 122: {
            Extra = input.ReadString();
            break;
          }
          case 130: {
            subItemList_.AddEntriesFrom(input, _repeated_subItemList_codec);
            break;
          }
          case 136: {
            MailTemplateId = input.ReadUInt32();
            break;
          }
          case 149: {
            ShowDiscountCoupon = input.ReadFloat();
            break;
          }
          case 152: {
            SuperSpinBehind = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 支付流程verify对应的extraInfo数据
  /// </summary>
  public sealed class VerifyExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<VerifyExtraInfo> _parser = new pb::MessageParser<VerifyExtraInfo>(() => new VerifyExtraInfo());
    public static pb::MessageParser<VerifyExtraInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig item_;
    public global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (item_ == null) {
              item_ = new global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig();
            }
            input.ReadMessage(item_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 支付流程fulfill对应的extraInfo
  /// </summary>
  public sealed class FulfillExtraInfo : pb::IMessage {
    private static readonly pb::MessageParser<FulfillExtraInfo> _parser = new pb::MessageParser<FulfillExtraInfo>(() => new FulfillExtraInfo());
    public static pb::MessageParser<FulfillExtraInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Item> _repeated_rewardItems_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Item.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> rewardItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> RewardItems {
      get { return rewardItems_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      rewardItems_.WriteTo(output, _repeated_rewardItems_codec);
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += rewardItems_.CalculateSize(_repeated_rewardItems_codec);
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rewardItems_.AddEntriesFrom(input, _repeated_rewardItems_codec);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 升级信息
  /// </summary>
  public sealed class LevelUpInfo : pb::IMessage {
    private static readonly pb::MessageParser<LevelUpInfo> _parser = new pb::MessageParser<LevelUpInfo>(() => new LevelUpInfo());
    public static pb::MessageParser<LevelUpInfo> Parser { get { return _parser; } }

    private uint level_;
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Item> _repeated_rewardItems_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Item.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> rewardItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Item> RewardItems {
      get { return rewardItems_; }
    }

    private ulong maxBet_;
    public ulong MaxBet {
      get { return maxBet_; }
      set {
        maxBet_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_unlockedMachines_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> unlockedMachines_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> UnlockedMachines {
      get { return unlockedMachines_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SystemType> _repeated_unlockedSystems_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::DragonU3DSDK.Network.API.ILProtocol.SystemType) x);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SystemType> unlockedSystems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SystemType>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SystemType> UnlockedSystems {
      get { return unlockedSystems_; }
    }

    private uint ui_;
    public uint Ui {
      get { return ui_; }
      set {
        ui_ = value;
      }
    }

    private uint rewardMultiplier_;
    public uint RewardMultiplier {
      get { return rewardMultiplier_; }
      set {
        rewardMultiplier_ = value;
      }
    }

    private uint showDeal_;
    public uint ShowDeal {
      get { return showDeal_; }
      set {
        showDeal_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      rewardItems_.WriteTo(output, _repeated_rewardItems_codec);
      if (MaxBet != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxBet);
      }
      unlockedMachines_.WriteTo(output, _repeated_unlockedMachines_codec);
      unlockedSystems_.WriteTo(output, _repeated_unlockedSystems_codec);
      if (Ui != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Ui);
      }
      if (RewardMultiplier != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RewardMultiplier);
      }
      if (ShowDeal != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ShowDeal);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      size += rewardItems_.CalculateSize(_repeated_rewardItems_codec);
      if (MaxBet != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxBet);
      }
      size += unlockedMachines_.CalculateSize(_repeated_unlockedMachines_codec);
      size += unlockedSystems_.CalculateSize(_repeated_unlockedSystems_codec);
      if (Ui != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ui);
      }
      if (RewardMultiplier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardMultiplier);
      }
      if (ShowDeal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShowDeal);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 18: {
            rewardItems_.AddEntriesFrom(input, _repeated_rewardItems_codec);
            break;
          }
          case 24: {
            MaxBet = input.ReadUInt64();
            break;
          }
          case 34: {
            unlockedMachines_.AddEntriesFrom(input, _repeated_unlockedMachines_codec);
            break;
          }
          case 42:
          case 40: {
            unlockedSystems_.AddEntriesFrom(input, _repeated_unlockedSystems_codec);
            break;
          }
          case 48: {
            Ui = input.ReadUInt32();
            break;
          }
          case 56: {
            RewardMultiplier = input.ReadUInt32();
            break;
          }
          case 64: {
            ShowDeal = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
