// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spinx_debug.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Messages
  /// <summary>
  /// 设置金币数
  /// </summary>
  public sealed class CSetCoins : pb::IMessage {
    private static readonly pb::MessageParser<CSetCoins> _parser = new pb::MessageParser<CSetCoins>(() => new CSetCoins());
    public static pb::MessageParser<CSetCoins> Parser { get { return _parser; } }

    private ulong coins_;
    public ulong Coins {
      get { return coins_; }
      set {
        coins_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Coins != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Coins);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Coins != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Coins);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Coins = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class SSetCoins : pb::IMessage {
    private static readonly pb::MessageParser<SSetCoins> _parser = new pb::MessageParser<SSetCoins>(() => new SSetCoins());
    public static pb::MessageParser<SSetCoins> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 更新任务进度
  /// </summary>
  public sealed class CUpdateQuestProgress : pb::IMessage {
    private static readonly pb::MessageParser<CUpdateQuestProgress> _parser = new pb::MessageParser<CUpdateQuestProgress>(() => new CUpdateQuestProgress());
    public static pb::MessageParser<CUpdateQuestProgress> Parser { get { return _parser; } }

    private string questId_ = "";
    public string QuestId {
      get { return questId_; }
      set {
        questId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint increment_;
    public uint Increment {
      get { return increment_; }
      set {
        increment_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (QuestId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(QuestId);
      }
      if (Increment != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Increment);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (QuestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QuestId);
      }
      if (Increment != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Increment);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            QuestId = input.ReadString();
            break;
          }
          case 16: {
            Increment = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SUpdateQuestProgress : pb::IMessage {
    private static readonly pb::MessageParser<SUpdateQuestProgress> _parser = new pb::MessageParser<SUpdateQuestProgress>(() => new SUpdateQuestProgress());
    public static pb::MessageParser<SUpdateQuestProgress> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 购买奖杯任务
  /// </summary>
  public sealed class CBuyCupsQuest : pb::IMessage {
    private static readonly pb::MessageParser<CBuyCupsQuest> _parser = new pb::MessageParser<CBuyCupsQuest>(() => new CBuyCupsQuest());
    public static pb::MessageParser<CBuyCupsQuest> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SBuyCupsQuest : pb::IMessage {
    private static readonly pb::MessageParser<SBuyCupsQuest> _parser = new pb::MessageParser<SBuyCupsQuest>(() => new SBuyCupsQuest());
    public static pb::MessageParser<SBuyCupsQuest> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 购买任务付费转盘
  /// </summary>
  public sealed class CBuyDailyQuestWheel : pb::IMessage {
    private static readonly pb::MessageParser<CBuyDailyQuestWheel> _parser = new pb::MessageParser<CBuyDailyQuestWheel>(() => new CBuyDailyQuestWheel());
    public static pb::MessageParser<CBuyDailyQuestWheel> Parser { get { return _parser; } }

    private uint wheelId_;
    public uint WheelId {
      get { return wheelId_; }
      set {
        wheelId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (WheelId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(WheelId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (WheelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WheelId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WheelId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SBuyDailyQuestWheel : pb::IMessage {
    private static readonly pb::MessageParser<SBuyDailyQuestWheel> _parser = new pb::MessageParser<SBuyDailyQuestWheel>(() => new SBuyDailyQuestWheel());
    public static pb::MessageParser<SBuyDailyQuestWheel> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// ---------- 商城测试协议
  /// </summary>
  public sealed class CDebugPreparePayment : pb::IMessage {
    private static readonly pb::MessageParser<CDebugPreparePayment> _parser = new pb::MessageParser<CDebugPreparePayment>(() => new CDebugPreparePayment());
    public static pb::MessageParser<CDebugPreparePayment> Parser { get { return _parser; } }

    private string productId_ = "";
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ProductId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProductId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProductId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SDebugPreparePayment : pb::IMessage {
    private static readonly pb::MessageParser<SDebugPreparePayment> _parser = new pb::MessageParser<SDebugPreparePayment>(() => new SDebugPreparePayment());
    public static pb::MessageParser<SDebugPreparePayment> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CDebugVerifyPayment : pb::IMessage {
    private static readonly pb::MessageParser<CDebugVerifyPayment> _parser = new pb::MessageParser<CDebugVerifyPayment>(() => new CDebugVerifyPayment());
    public static pb::MessageParser<CDebugVerifyPayment> Parser { get { return _parser; } }

    private string paymentId_ = "";
    public string PaymentId {
      get { return paymentId_; }
      set {
        paymentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string transactionId_ = "";
    public string TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string productId_ = "";
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PaymentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PaymentId);
      }
      if (TransactionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TransactionId);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PaymentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentId);
      }
      if (TransactionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionId);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PaymentId = input.ReadString();
            break;
          }
          case 18: {
            TransactionId = input.ReadString();
            break;
          }
          case 26: {
            ProductId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SDebugVerifyPayment : pb::IMessage {
    private static readonly pb::MessageParser<SDebugVerifyPayment> _parser = new pb::MessageParser<SDebugVerifyPayment>(() => new SDebugVerifyPayment());
    public static pb::MessageParser<SDebugVerifyPayment> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CDebugFulfillPayment : pb::IMessage {
    private static readonly pb::MessageParser<CDebugFulfillPayment> _parser = new pb::MessageParser<CDebugFulfillPayment>(() => new CDebugFulfillPayment());
    public static pb::MessageParser<CDebugFulfillPayment> Parser { get { return _parser; } }

    private string paymentId_ = "";
    public string PaymentId {
      get { return paymentId_; }
      set {
        paymentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PaymentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PaymentId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PaymentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PaymentId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SDebugFulfillPayment : pb::IMessage {
    private static readonly pb::MessageParser<SDebugFulfillPayment> _parser = new pb::MessageParser<SDebugFulfillPayment>(() => new SDebugFulfillPayment());
    public static pb::MessageParser<SDebugFulfillPayment> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
