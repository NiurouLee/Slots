// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortunex_advertisement.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Enums
  /// <summary>
  /// 广告类型
  /// </summary>
  public enum AdvertisementType {
    Quickmachine = 0,
    Quicksystem = 1,
    Deal = 2,
    Commingsoon = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///广告位
  /// </summary>
  public sealed class Advertisement : pb::IMessage {
    private static readonly pb::MessageParser<Advertisement> _parser = new pb::MessageParser<Advertisement>(() => new Advertisement());
    public static pb::MessageParser<Advertisement> Parser { get { return _parser; } }

    private uint id_;
    /// <summary>
    ///用于获取广告详情
    /// </summary>
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private string advertisement_ = "";
    public string Advertisement_ {
      get { return advertisement_; }
      set {
        advertisement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint position_;
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.AdvertisementType type_ = 0;
    public global::DragonU3DSDK.Network.API.ILProtocol.AdvertisementType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private uint paymentId_;
    /// <summary>
    /// 对应advertisementPurchase表中的paymentId
    /// </summary>
    public uint PaymentId {
      get { return paymentId_; }
      set {
        paymentId_ = value;
      }
    }

    private uint dealId_;
    public uint DealId {
      get { return dealId_; }
      set {
        dealId_ = value;
      }
    }

    private string desc_ = "";
    /// <summary>
    /// uint32 gameId = 7;
    /// </summary>
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string startTime_ = "";
    /// <summary>
    /// 配置开始时间（北京时间）
    /// </summary>
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint startTimestamp_;
    /// <summary>
    /// 配置开始时间戳
    /// </summary>
    public uint StartTimestamp {
      get { return startTimestamp_; }
      set {
        startTimestamp_ = value;
      }
    }

    private string endTime_ = "";
    /// <summary>
    /// 配置结束时间（北京时间）
    /// </summary>
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint endTimestamp_;
    /// <summary>
    /// 配置结束时间戳
    /// </summary>
    public uint EndTimestamp {
      get { return endTimestamp_; }
      set {
        endTimestamp_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.DealInfo dealInfo_;
    /// <summary>
    /// deal信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.DealInfo DealInfo {
      get { return dealInfo_; }
      set {
        dealInfo_ = value;
      }
    }

    private string productId_ = "";
    /// <summary>
    ///用于发起支付
    /// </summary>
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string productIdIos_ = "";
    /// <summary>
    ///用于发起支付
    /// </summary>
    public string ProductIdIos {
      get { return productIdIos_; }
      set {
        productIdIos_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string jump_ = "";
    /// <summary>
    /// 跳转参数1
    /// </summary>
    public string Jump {
      get { return jump_; }
      set {
        jump_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string jump2_ = "";
    /// <summary>
    /// 跳转参数2
    /// </summary>
    public string Jump2 {
      get { return jump2_; }
      set {
        jump2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint mutuallyExclusiveGroup_;
    /// <summary>
    /// 互斥组ID， 组ID相同的Advertisement，同时只能显示一个； 默认为0
    /// </summary>
    public uint MutuallyExclusiveGroup {
      get { return mutuallyExclusiveGroup_; }
      set {
        mutuallyExclusiveGroup_ = value;
      }
    }

    private uint mutuallyExclusivePriority_;
    /// <summary>
    /// 互斥组内优先级，值越大优先级越高
    /// </summary>
    public uint MutuallyExclusivePriority {
      get { return mutuallyExclusivePriority_; }
      set {
        mutuallyExclusivePriority_ = value;
      }
    }

    private static readonly pb::FieldCodec<uint> _repeated_mutuallyExclusiveMachineIds_codec
        = pb::FieldCodec.ForUInt32(162);
    private readonly pbc::RepeatedField<uint> mutuallyExclusiveMachineIds_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 机台限制，数组内的机台才显示该Advertisement，默认为空数组
    /// </summary>
    public pbc::RepeatedField<uint> MutuallyExclusiveMachineIds {
      get { return mutuallyExclusiveMachineIds_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Advertisement_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Advertisement_);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Position);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (PaymentId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PaymentId);
      }
      if (DealId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DealId);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Desc);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(StartTime);
      }
      if (StartTimestamp != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(StartTimestamp);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(EndTime);
      }
      if (EndTimestamp != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(EndTimestamp);
      }
      if (dealInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(DealInfo);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ProductId);
      }
      if (ProductIdIos.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(ProductIdIos);
      }
      if (Jump.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Jump);
      }
      if (Jump2.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Jump2);
      }
      if (MutuallyExclusiveGroup != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(MutuallyExclusiveGroup);
      }
      if (MutuallyExclusivePriority != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(MutuallyExclusivePriority);
      }
      mutuallyExclusiveMachineIds_.WriteTo(output, _repeated_mutuallyExclusiveMachineIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Advertisement_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Advertisement_);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (PaymentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PaymentId);
      }
      if (DealId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DealId);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (StartTimestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTimestamp);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (EndTimestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTimestamp);
      }
      if (dealInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DealInfo);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (ProductIdIos.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductIdIos);
      }
      if (Jump.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Jump);
      }
      if (Jump2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Jump2);
      }
      if (MutuallyExclusiveGroup != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MutuallyExclusiveGroup);
      }
      if (MutuallyExclusivePriority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MutuallyExclusivePriority);
      }
      size += mutuallyExclusiveMachineIds_.CalculateSize(_repeated_mutuallyExclusiveMachineIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Advertisement_ = input.ReadString();
            break;
          }
          case 24: {
            Position = input.ReadUInt32();
            break;
          }
          case 32: {
            type_ = (global::DragonU3DSDK.Network.API.ILProtocol.AdvertisementType) input.ReadEnum();
            break;
          }
          case 40: {
            PaymentId = input.ReadUInt32();
            break;
          }
          case 48: {
            DealId = input.ReadUInt32();
            break;
          }
          case 66: {
            Desc = input.ReadString();
            break;
          }
          case 74: {
            StartTime = input.ReadString();
            break;
          }
          case 80: {
            StartTimestamp = input.ReadUInt32();
            break;
          }
          case 90: {
            EndTime = input.ReadString();
            break;
          }
          case 96: {
            EndTimestamp = input.ReadUInt32();
            break;
          }
          case 106: {
            if (dealInfo_ == null) {
              dealInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.DealInfo();
            }
            input.ReadMessage(dealInfo_);
            break;
          }
          case 114: {
            ProductId = input.ReadString();
            break;
          }
          case 122: {
            ProductIdIos = input.ReadString();
            break;
          }
          case 130: {
            Jump = input.ReadString();
            break;
          }
          case 138: {
            Jump2 = input.ReadString();
            break;
          }
          case 144: {
            MutuallyExclusiveGroup = input.ReadUInt32();
            break;
          }
          case 152: {
            MutuallyExclusivePriority = input.ReadUInt32();
            break;
          }
          case 162:
          case 160: {
            mutuallyExclusiveMachineIds_.AddEntriesFrom(input, _repeated_mutuallyExclusiveMachineIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// deal信息及用户状态，在dealConfig表的基础上增加三个字段
  /// </summary>
  public sealed class DealInfo : pb::IMessage {
    private static readonly pb::MessageParser<DealInfo> _parser = new pb::MessageParser<DealInfo>(() => new DealInfo());
    public static pb::MessageParser<DealInfo> Parser { get { return _parser; } }

    private uint id_;
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private uint purchase_;
    public uint Purchase {
      get { return purchase_; }
      set {
        purchase_ = value;
      }
    }

    private string desc_ = "";
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint priority_;
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    private int interval_;
    public int Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    private uint userLevelMin_;
    public uint UserLevelMin {
      get { return userLevelMin_; }
      set {
        userLevelMin_ = value;
      }
    }

    private uint userLevelMax_;
    public uint UserLevelMax {
      get { return userLevelMax_; }
      set {
        userLevelMax_ = value;
      }
    }

    private uint userLifeTimeLimited_;
    public uint UserLifeTimeLimited {
      get { return userLifeTimeLimited_; }
      set {
        userLifeTimeLimited_ = value;
      }
    }

    private uint totalpayMin_;
    public uint TotalpayMin {
      get { return totalpayMin_; }
      set {
        totalpayMin_ = value;
      }
    }

    private uint totalpayMax_;
    public uint TotalpayMax {
      get { return totalpayMax_; }
      set {
        totalpayMax_ = value;
      }
    }

    private uint lastPopAt_;
    /// <summary>
    /// 最后一次弹出的时间(北京时间），默认为0
    /// </summary>
    public uint LastPopAt {
      get { return lastPopAt_; }
      set {
        lastPopAt_ = value;
      }
    }

    private uint hiddenCountDown_;
    /// <summary>
    /// 弹出后，倒计时的毫秒数，最小为0，仅lastPopAt不为空字符串时读取该字段
    /// </summary>
    public uint HiddenCountDown {
      get { return hiddenCountDown_; }
      set {
        hiddenCountDown_ = value;
      }
    }

    private uint buyCount_;
    /// <summary>
    /// deal对应商品的支付次数
    /// </summary>
    public uint BuyCount {
      get { return buyCount_; }
      set {
        buyCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Purchase != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Purchase);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      if (Priority != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Priority);
      }
      if (Interval != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Interval);
      }
      if (UserLevelMin != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(UserLevelMin);
      }
      if (UserLevelMax != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(UserLevelMax);
      }
      if (UserLifeTimeLimited != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(UserLifeTimeLimited);
      }
      if (TotalpayMin != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(TotalpayMin);
      }
      if (TotalpayMax != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(TotalpayMax);
      }
      if (LastPopAt != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(LastPopAt);
      }
      if (HiddenCountDown != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(HiddenCountDown);
      }
      if (BuyCount != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(BuyCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Purchase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Purchase);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (Interval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Interval);
      }
      if (UserLevelMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserLevelMin);
      }
      if (UserLevelMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserLevelMax);
      }
      if (UserLifeTimeLimited != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserLifeTimeLimited);
      }
      if (TotalpayMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalpayMin);
      }
      if (TotalpayMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalpayMax);
      }
      if (LastPopAt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastPopAt);
      }
      if (HiddenCountDown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HiddenCountDown);
      }
      if (BuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuyCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Purchase = input.ReadUInt32();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
          case 32: {
            Priority = input.ReadUInt32();
            break;
          }
          case 40: {
            Interval = input.ReadInt32();
            break;
          }
          case 48: {
            UserLevelMin = input.ReadUInt32();
            break;
          }
          case 56: {
            UserLevelMax = input.ReadUInt32();
            break;
          }
          case 64: {
            UserLifeTimeLimited = input.ReadUInt32();
            break;
          }
          case 72: {
            TotalpayMin = input.ReadUInt32();
            break;
          }
          case 80: {
            TotalpayMax = input.ReadUInt32();
            break;
          }
          case 88: {
            LastPopAt = input.ReadUInt32();
            break;
          }
          case 96: {
            HiddenCountDown = input.ReadUInt32();
            break;
          }
          case 104: {
            BuyCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端发起
  /// </summary>
  public sealed class CGetAdvertisement : pb::IMessage {
    private static readonly pb::MessageParser<CGetAdvertisement> _parser = new pb::MessageParser<CGetAdvertisement>(() => new CGetAdvertisement());
    public static pb::MessageParser<CGetAdvertisement> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class AdvertisementInfoList : pb::IMessage {
    private static readonly pb::MessageParser<AdvertisementInfoList> _parser = new pb::MessageParser<AdvertisementInfoList>(() => new AdvertisementInfoList());
    public static pb::MessageParser<AdvertisementInfoList> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Advertisement> _repeated_advs_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Advertisement.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Advertisement> advs_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Advertisement>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Advertisement> Advs {
      get { return advs_; }
    }

    private ulong now_;
    /// <summary>
    ///服务器当前时间，单位秒
    /// </summary>
    public ulong Now {
      get { return now_; }
      set {
        now_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      advs_.WriteTo(output, _repeated_advs_codec);
      if (Now != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Now);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += advs_.CalculateSize(_repeated_advs_codec);
      if (Now != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Now);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            advs_.AddEntriesFrom(input, _repeated_advs_codec);
            break;
          }
          case 24: {
            Now = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class SGetAdvertisement : pb::IMessage {
    private static readonly pb::MessageParser<SGetAdvertisement> _parser = new pb::MessageParser<SGetAdvertisement>(() => new SGetAdvertisement());
    public static pb::MessageParser<SGetAdvertisement> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.AdvertisementInfoList advsInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.AdvertisementInfoList AdvsInfo {
      get { return advsInfo_; }
      set {
        advsInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (advsInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AdvsInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (advsInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdvsInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (advsInfo_ == null) {
              advsInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.AdvertisementInfoList();
            }
            input.ReadMessage(advsInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端在弹框之前发起
  /// </summary>
  public sealed class CGetAdvertisementItem : pb::IMessage {
    private static readonly pb::MessageParser<CGetAdvertisementItem> _parser = new pb::MessageParser<CGetAdvertisementItem>(() => new CGetAdvertisementItem());
    public static pb::MessageParser<CGetAdvertisementItem> Parser { get { return _parser; } }

    private uint advertId_;
    /// <summary>
    /// Advertisement.id
    /// </summary>
    public uint AdvertId {
      get { return advertId_; }
      set {
        advertId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (AdvertId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AdvertId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (AdvertId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AdvertId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AdvertId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器返回的广告详情信息
  /// </summary>
  public sealed class SGetAdvertisementItem : pb::IMessage {
    private static readonly pb::MessageParser<SGetAdvertisementItem> _parser = new pb::MessageParser<SGetAdvertisementItem>(() => new SGetAdvertisementItem());
    public static pb::MessageParser<SGetAdvertisementItem> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.Advertisement adv_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Advertisement Adv {
      get { return adv_; }
      set {
        adv_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig dealPayItem_;
    public global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig DealPayItem {
      get { return dealPayItem_; }
      set {
        dealPayItem_ = value;
      }
    }

    private ulong now_;
    /// <summary>
    ///服务器当前时间，单位秒
    /// </summary>
    public ulong Now {
      get { return now_; }
      set {
        now_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (adv_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Adv);
      }
      if (dealPayItem_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DealPayItem);
      }
      if (Now != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Now);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (adv_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Adv);
      }
      if (dealPayItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DealPayItem);
      }
      if (Now != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Now);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (adv_ == null) {
              adv_ = new global::DragonU3DSDK.Network.API.ILProtocol.Advertisement();
            }
            input.ReadMessage(adv_);
            break;
          }
          case 18: {
            if (dealPayItem_ == null) {
              dealPayItem_ = new global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig();
            }
            input.ReadMessage(dealPayItem_);
            break;
          }
          case 24: {
            Now = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取广告位奖励
  /// </summary>
  public sealed class CClaimAdReward : pb::IMessage {
    private static readonly pb::MessageParser<CClaimAdReward> _parser = new pb::MessageParser<CClaimAdReward>(() => new CClaimAdReward());
    public static pb::MessageParser<CClaimAdReward> Parser { get { return _parser; } }

    private ulong placeId_;
    /// <summary>
    /// 广告位ID,为AD表，Rules sheet,placeId列的值
    /// </summary>
    public ulong PlaceId {
      get { return placeId_; }
      set {
        placeId_ = value;
      }
    }

    private static readonly pb::FieldCodec<ulong> _repeated_itemIdList_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> itemIdList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///道具ID列表,为item表的ID列的值
    /// </summary>
    public pbc::RepeatedField<ulong> ItemIdList {
      get { return itemIdList_; }
    }

    private static readonly pb::FieldCodec<ulong> _repeated_itemCountList_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> itemCountList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///道具数量列表
    /// </summary>
    public pbc::RepeatedField<ulong> ItemCountList {
      get { return itemCountList_; }
    }

    private string userGroup_ = "";
    /// <summary>
    ///用户的广告分组
    /// </summary>
    public string UserGroup {
      get { return userGroup_; }
      set {
        userGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlaceId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlaceId);
      }
      itemIdList_.WriteTo(output, _repeated_itemIdList_codec);
      itemCountList_.WriteTo(output, _repeated_itemCountList_codec);
      if (UserGroup.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserGroup);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PlaceId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlaceId);
      }
      size += itemIdList_.CalculateSize(_repeated_itemIdList_codec);
      size += itemCountList_.CalculateSize(_repeated_itemCountList_codec);
      if (UserGroup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserGroup);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlaceId = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            itemIdList_.AddEntriesFrom(input, _repeated_itemIdList_codec);
            break;
          }
          case 26:
          case 24: {
            itemCountList_.AddEntriesFrom(input, _repeated_itemCountList_codec);
            break;
          }
          case 34: {
            UserGroup = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SClaimAdReward : pb::IMessage {
    private static readonly pb::MessageParser<SClaimAdReward> _parser = new pb::MessageParser<SClaimAdReward>(() => new SClaimAdReward());
    public static pb::MessageParser<SClaimAdReward> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> rewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 奖励列表
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> Rewards {
      get { return rewards_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// userProfile信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取RV广告配置
  /// </summary>
  public sealed class CGetRVAdvertisingConfig : pb::IMessage {
    private static readonly pb::MessageParser<CGetRVAdvertisingConfig> _parser = new pb::MessageParser<CGetRVAdvertisingConfig>(() => new CGetRVAdvertisingConfig());
    public static pb::MessageParser<CGetRVAdvertisingConfig> Parser { get { return _parser; } }

    private string userGroup_ = "";
    /// <summary>
    ///用户的广告分组
    /// </summary>
    public string UserGroup {
      get { return userGroup_; }
      set {
        userGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserGroup.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserGroup);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserGroup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserGroup);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserGroup = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SGetRVAdvertisingConfig : pb::IMessage {
    private static readonly pb::MessageParser<SGetRVAdvertisingConfig> _parser = new pb::MessageParser<SGetRVAdvertisingConfig>(() => new SGetRVAdvertisingConfig());
    public static pb::MessageParser<SGetRVAdvertisingConfig> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.SGetRVAdvertisingConfig.Types.AdTaskInfo adTaskInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.SGetRVAdvertisingConfig.Types.AdTaskInfo AdTaskInfo {
      get { return adTaskInfo_; }
      set {
        adTaskInfo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.SGetRVAdvertisingConfig.Types.MysteryGiftInfo mysteryGiftInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.SGetRVAdvertisingConfig.Types.MysteryGiftInfo MysteryGiftInfo {
      get { return mysteryGiftInfo_; }
      set {
        mysteryGiftInfo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.SGetRVAdvertisingConfig.Types.MysteryBoxInfo mysteryBoxInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.SGetRVAdvertisingConfig.Types.MysteryBoxInfo MysteryBoxInfo {
      get { return mysteryBoxInfo_; }
      set {
        mysteryBoxInfo_ = value;
      }
    }

    private ulong now_;
    /// <summary>
    ///服务器当前时间，单位秒
    /// </summary>
    public ulong Now {
      get { return now_; }
      set {
        now_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (adTaskInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AdTaskInfo);
      }
      if (mysteryGiftInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MysteryGiftInfo);
      }
      if (mysteryBoxInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MysteryBoxInfo);
      }
      if (Now != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Now);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (adTaskInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdTaskInfo);
      }
      if (mysteryGiftInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MysteryGiftInfo);
      }
      if (mysteryBoxInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MysteryBoxInfo);
      }
      if (Now != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Now);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (adTaskInfo_ == null) {
              adTaskInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.SGetRVAdvertisingConfig.Types.AdTaskInfo();
            }
            input.ReadMessage(adTaskInfo_);
            break;
          }
          case 18: {
            if (mysteryGiftInfo_ == null) {
              mysteryGiftInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.SGetRVAdvertisingConfig.Types.MysteryGiftInfo();
            }
            input.ReadMessage(mysteryGiftInfo_);
            break;
          }
          case 26: {
            if (mysteryBoxInfo_ == null) {
              mysteryBoxInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.SGetRVAdvertisingConfig.Types.MysteryBoxInfo();
            }
            input.ReadMessage(mysteryBoxInfo_);
            break;
          }
          case 32: {
            Now = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SGetRVAdvertisingConfig message type.</summary>
    public static class Types {
      /// <summary>
      /// RV_AdTask
      /// </summary>
      public sealed class AdTaskInfo : pb::IMessage {
        private static readonly pb::MessageParser<AdTaskInfo> _parser = new pb::MessageParser<AdTaskInfo>(() => new AdTaskInfo());
        public static pb::MessageParser<AdTaskInfo> Parser { get { return _parser; } }

        private uint placeId_;
        /// <summary>
        /// 用于领奖
        /// </summary>
        public uint PlaceId {
          get { return placeId_; }
          set {
            placeId_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_rewards_codec
            = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> rewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
        /// <summary>
        /// 数组中的每项代表第index次广告的奖励
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> Rewards {
          get { return rewards_; }
        }

        private uint taskStep_;
        /// <summary>
        /// 用户当日完成观看的次数
        /// </summary>
        public uint TaskStep {
          get { return taskStep_; }
          set {
            taskStep_ = value;
          }
        }

        private uint lastTaskStepUpdate_;
        /// <summary>
        /// 最后一次完成观看的时间，单位秒
        /// </summary>
        public uint LastTaskStepUpdate {
          get { return lastTaskStepUpdate_; }
          set {
            lastTaskStepUpdate_ = value;
          }
        }

        private uint nextRefreshCountDown_;
        /// <summary>
        /// 下一次刷新任务的事件，单位秒
        /// </summary>
        public uint NextRefreshCountDown {
          get { return nextRefreshCountDown_; }
          set {
            nextRefreshCountDown_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (PlaceId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PlaceId);
          }
          rewards_.WriteTo(output, _repeated_rewards_codec);
          if (TaskStep != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(TaskStep);
          }
          if (LastTaskStepUpdate != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(LastTaskStepUpdate);
          }
          if (NextRefreshCountDown != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(NextRefreshCountDown);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (PlaceId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlaceId);
          }
          size += rewards_.CalculateSize(_repeated_rewards_codec);
          if (TaskStep != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskStep);
          }
          if (LastTaskStepUpdate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastTaskStepUpdate);
          }
          if (NextRefreshCountDown != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextRefreshCountDown);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PlaceId = input.ReadUInt32();
                break;
              }
              case 18: {
                rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
                break;
              }
              case 24: {
                TaskStep = input.ReadUInt32();
                break;
              }
              case 32: {
                LastTaskStepUpdate = input.ReadUInt32();
                break;
              }
              case 40: {
                NextRefreshCountDown = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// RV_AdMysteryGift
      /// </summary>
      public sealed class MysteryGiftInfo : pb::IMessage {
        private static readonly pb::MessageParser<MysteryGiftInfo> _parser = new pb::MessageParser<MysteryGiftInfo>(() => new MysteryGiftInfo());
        public static pb::MessageParser<MysteryGiftInfo> Parser { get { return _parser; } }

        private uint placeId_;
        /// <summary>
        /// 用于领奖
        /// </summary>
        public uint PlaceId {
          get { return placeId_; }
          set {
            placeId_ = value;
          }
        }

        private uint limitPerDay_;
        /// <summary>
        /// 每日限制次数
        /// </summary>
        public uint LimitPerDay {
          get { return limitPerDay_; }
          set {
            limitPerDay_ = value;
          }
        }

        private uint interval_;
        /// <summary>
        /// 广告间隔时间，单位秒
        /// </summary>
        public uint Interval {
          get { return interval_; }
          set {
            interval_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (PlaceId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PlaceId);
          }
          if (LimitPerDay != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(LimitPerDay);
          }
          if (Interval != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Interval);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (PlaceId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlaceId);
          }
          if (LimitPerDay != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LimitPerDay);
          }
          if (Interval != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Interval);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PlaceId = input.ReadUInt32();
                break;
              }
              case 16: {
                LimitPerDay = input.ReadUInt32();
                break;
              }
              case 24: {
                Interval = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// RV_AdMysteryBox
      /// </summary>
      public sealed class MysteryBoxInfo : pb::IMessage {
        private static readonly pb::MessageParser<MysteryBoxInfo> _parser = new pb::MessageParser<MysteryBoxInfo>(() => new MysteryBoxInfo());
        public static pb::MessageParser<MysteryBoxInfo> Parser { get { return _parser; } }

        private uint placeId_;
        /// <summary>
        /// 用于领奖
        /// </summary>
        public uint PlaceId {
          get { return placeId_; }
          set {
            placeId_ = value;
          }
        }

        private uint limitPerDay_;
        /// <summary>
        /// 每日限制次数
        /// </summary>
        public uint LimitPerDay {
          get { return limitPerDay_; }
          set {
            limitPerDay_ = value;
          }
        }

        private uint interval_;
        /// <summary>
        /// 广告间隔时间，单位秒
        /// </summary>
        public uint Interval {
          get { return interval_; }
          set {
            interval_ = value;
          }
        }

        private uint showTime_;
        /// <summary>
        /// 广告展示时间，单位秒
        /// </summary>
        public uint ShowTime {
          get { return showTime_; }
          set {
            showTime_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (PlaceId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PlaceId);
          }
          if (LimitPerDay != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(LimitPerDay);
          }
          if (Interval != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Interval);
          }
          if (ShowTime != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(ShowTime);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (PlaceId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlaceId);
          }
          if (LimitPerDay != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LimitPerDay);
          }
          if (Interval != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Interval);
          }
          if (ShowTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShowTime);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                PlaceId = input.ReadUInt32();
                break;
              }
              case 16: {
                LimitPerDay = input.ReadUInt32();
                break;
              }
              case 24: {
                Interval = input.ReadUInt32();
                break;
              }
              case 32: {
                ShowTime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
