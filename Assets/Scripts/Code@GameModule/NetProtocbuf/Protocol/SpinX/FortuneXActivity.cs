// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortune_x_activity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Messages
  /// <summary>
  /// cashback
  /// </summary>
  public sealed class CashBackActivityConfig : pb::IMessage {
    private static readonly pb::MessageParser<CashBackActivityConfig> _parser = new pb::MessageParser<CashBackActivityConfig>(() => new CashBackActivityConfig());
    public static pb::MessageParser<CashBackActivityConfig> Parser { get { return _parser; } }

    private string id_ = "";
    /// <summary>
    /// 
    /// </summary>
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_paymentIdLimited_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> paymentIdLimited_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// # 需要满足的payment_id,-1为任意计费点
    /// </summary>
    public pbc::RepeatedField<int> PaymentIdLimited {
      get { return paymentIdLimited_; }
    }

    private long backType_;
    /// <summary>
    /// # CashBack类型，0-Win返还，1-NoWin返还，2-Bet返还
    /// </summary>
    public long BackType {
      get { return backType_; }
      set {
        backType_ = value;
      }
    }

    private float return_;
    /// <summary>
    /// # 每次返还百分比
    /// </summary>
    public float Return {
      get { return return_; }
      set {
        return_ = value;
      }
    }

    private long returnLimited_;
    /// <summary>
    /// # 上限值，受到LevelStore和VIPLevelStore的加成
    /// </summary>
    public long ReturnLimited {
      get { return returnLimited_; }
      set {
        returnLimited_ = value;
      }
    }

    private string resource_ = "";
    /// <summary>
    /// 
    /// </summary>
    public string Resource {
      get { return resource_; }
      set {
        resource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long time_;
    /// <summary>
    /// 
    /// </summary>
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    private string startTime_ = "";
    /// <summary>
    /// 
    /// </summary>
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long startTimestamp_;
    /// <summary>
    /// 
    /// </summary>
    public long StartTimestamp {
      get { return startTimestamp_; }
      set {
        startTimestamp_ = value;
      }
    }

    private string endTime_ = "";
    /// <summary>
    /// 
    /// </summary>
    public string EndTime {
      get { return endTime_; }
      set {
        endTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long endTimestamp_;
    /// <summary>
    /// 
    /// </summary>
    public long EndTimestamp {
      get { return endTimestamp_; }
      set {
        endTimestamp_ = value;
      }
    }

    private string note_ = "";
    /// <summary>
    ///  
    /// </summary>
    public string Note {
      get { return note_; }
      set {
        note_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long levelLimited_;
    /// <summary>
    /// </summary>
    public long LevelLimited {
      get { return levelLimited_; }
      set {
        levelLimited_ = value;
      }
    }

    private long getBuffEndTimestamp_;
    public long GetBuffEndTimestamp {
      get { return getBuffEndTimestamp_; }
      set {
        getBuffEndTimestamp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      paymentIdLimited_.WriteTo(output, _repeated_paymentIdLimited_codec);
      if (BackType != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BackType);
      }
      if (Return != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Return);
      }
      if (ReturnLimited != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ReturnLimited);
      }
      if (Resource.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Resource);
      }
      if (Time != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Time);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(StartTime);
      }
      if (StartTimestamp != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(StartTimestamp);
      }
      if (EndTime.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(EndTime);
      }
      if (EndTimestamp != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(EndTimestamp);
      }
      if (Note.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Note);
      }
      if (LevelLimited != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(LevelLimited);
      }
      if (GetBuffEndTimestamp != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(GetBuffEndTimestamp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += paymentIdLimited_.CalculateSize(_repeated_paymentIdLimited_codec);
      if (BackType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BackType);
      }
      if (Return != 0F) {
        size += 1 + 4;
      }
      if (ReturnLimited != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReturnLimited);
      }
      if (Resource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resource);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (StartTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimestamp);
      }
      if (EndTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EndTime);
      }
      if (EndTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTimestamp);
      }
      if (Note.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Note);
      }
      if (LevelLimited != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LevelLimited);
      }
      if (GetBuffEndTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GetBuffEndTimestamp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            paymentIdLimited_.AddEntriesFrom(input, _repeated_paymentIdLimited_codec);
            break;
          }
          case 24: {
            BackType = input.ReadInt64();
            break;
          }
          case 37: {
            Return = input.ReadFloat();
            break;
          }
          case 40: {
            ReturnLimited = input.ReadInt64();
            break;
          }
          case 50: {
            Resource = input.ReadString();
            break;
          }
          case 56: {
            Time = input.ReadInt64();
            break;
          }
          case 66: {
            StartTime = input.ReadString();
            break;
          }
          case 72: {
            StartTimestamp = input.ReadInt64();
            break;
          }
          case 82: {
            EndTime = input.ReadString();
            break;
          }
          case 88: {
            EndTimestamp = input.ReadInt64();
            break;
          }
          case 98: {
            Note = input.ReadString();
            break;
          }
          case 104: {
            LevelLimited = input.ReadInt64();
            break;
          }
          case 112: {
            GetBuffEndTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class BuffCashBack : pb::IMessage {
    private static readonly pb::MessageParser<BuffCashBack> _parser = new pb::MessageParser<BuffCashBack>(() => new BuffCashBack());
    public static pb::MessageParser<BuffCashBack> Parser { get { return _parser; } }

    private uint buffType_;
    /// <summary>
    ///buff类型  0 win  1 nowin 2 bet
    /// </summary>
    public uint BuffType {
      get { return buffType_; }
      set {
        buffType_ = value;
      }
    }

    private float backPercentage_;
    /// <summary>
    ///返还的百分比
    /// </summary>
    public float BackPercentage {
      get { return backPercentage_; }
      set {
        backPercentage_ = value;
      }
    }

    private uint expire_;
    /// <summary>
    ///buff截止时间，单位秒
    /// </summary>
    public uint Expire {
      get { return expire_; }
      set {
        expire_ = value;
      }
    }

    private uint backCoin_;
    /// <summary>
    ///截止目前为止，用户可返还的金额
    /// </summary>
    public uint BackCoin {
      get { return backCoin_; }
      set {
        backCoin_ = value;
      }
    }

    private string key_ = "";
    /// <summary>
    ///buff时间截止后，用该字段获取奖励
    /// </summary>
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint returnLimited_;
    /// <summary>
    ///用户可返还的金额上限
    /// </summary>
    public uint ReturnLimited {
      get { return returnLimited_; }
      set {
        returnLimited_ = value;
      }
    }

    private uint rewardAt_;
    /// <summary>
    /// 领奖时间（客户端根据这个发送领奖励邮件的请求）
    /// </summary>
    public uint RewardAt {
      get { return rewardAt_; }
      set {
        rewardAt_ = value;
      }
    }

    private uint rewardMode_;
    /// <summary>
    /// 领奖规则 0 buff失效领奖 1 buff失效后第二天领奖
    /// </summary>
    public uint RewardMode {
      get { return rewardMode_; }
      set {
        rewardMode_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BuffType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BuffType);
      }
      if (BackPercentage != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BackPercentage);
      }
      if (Expire != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Expire);
      }
      if (BackCoin != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BackCoin);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Key);
      }
      if (ReturnLimited != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ReturnLimited);
      }
      if (RewardAt != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RewardAt);
      }
      if (RewardMode != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(RewardMode);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BuffType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuffType);
      }
      if (BackPercentage != 0F) {
        size += 1 + 4;
      }
      if (Expire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expire);
      }
      if (BackCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BackCoin);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (ReturnLimited != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReturnLimited);
      }
      if (RewardAt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardAt);
      }
      if (RewardMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardMode);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BuffType = input.ReadUInt32();
            break;
          }
          case 21: {
            BackPercentage = input.ReadFloat();
            break;
          }
          case 24: {
            Expire = input.ReadUInt32();
            break;
          }
          case 32: {
            BackCoin = input.ReadUInt32();
            break;
          }
          case 42: {
            Key = input.ReadString();
            break;
          }
          case 48: {
            ReturnLimited = input.ReadUInt32();
            break;
          }
          case 56: {
            RewardAt = input.ReadUInt32();
            break;
          }
          case 64: {
            RewardMode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CashBackActivityData : pb::IMessage {
    private static readonly pb::MessageParser<CashBackActivityData> _parser = new pb::MessageParser<CashBackActivityData>(() => new CashBackActivityData());
    public static pb::MessageParser<CashBackActivityData> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BuffCashBack> _repeated_cashBackBuffs_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.BuffCashBack.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BuffCashBack> cashBackBuffs_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BuffCashBack>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BuffCashBack> CashBackBuffs {
      get { return cashBackBuffs_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      cashBackBuffs_.WriteTo(output, _repeated_cashBackBuffs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += cashBackBuffs_.CalculateSize(_repeated_cashBackBuffs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cashBackBuffs_.AddEntriesFrom(input, _repeated_cashBackBuffs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// bonus coupon
  /// </summary>
  public sealed class BonusCouponActivityConfig : pb::IMessage {
    private static readonly pb::MessageParser<BonusCouponActivityConfig> _parser = new pb::MessageParser<BonusCouponActivityConfig>(() => new BonusCouponActivityConfig());
    public static pb::MessageParser<BonusCouponActivityConfig> Parser { get { return _parser; } }

    private string id_ = "";
    /// <summary>
    /// 
    /// </summary>
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long levelLimited_;
    /// <summary>
    /// </summary>
    public long LevelLimited {
      get { return levelLimited_; }
      set {
        levelLimited_ = value;
      }
    }

    private long couponType_;
    /// <summary>
    /// 发放的优惠券类型 1普通优惠券 2活动优惠券
    /// </summary>
    public long CouponType {
      get { return couponType_; }
      set {
        couponType_ = value;
      }
    }

    private long itemIdTarget_;
    /// <summary>
    /// 道具ID列表，包含在数组内的道具，会在支付后获取时受到加成，4商店金币，8商店绿宝石
    /// </summary>
    public long ItemIdTarget {
      get { return itemIdTarget_; }
      set {
        itemIdTarget_ = value;
      }
    }

    private long bonusPersentage_;
    /// <summary>
    /// 加成百分数 如50
    /// </summary>
    public long BonusPersentage {
      get { return bonusPersentage_; }
      set {
        bonusPersentage_ = value;
      }
    }

    private long effectiveTime_;
    /// <summary>
    /// 优惠券有效时长（单位秒），从获得时开始算
    /// </summary>
    public long EffectiveTime {
      get { return effectiveTime_; }
      set {
        effectiveTime_ = value;
      }
    }

    private long startTimestamp_;
    /// <summary>
    /// 
    /// </summary>
    public long StartTimestamp {
      get { return startTimestamp_; }
      set {
        startTimestamp_ = value;
      }
    }

    private long endTimestamp_;
    /// <summary>
    /// 
    /// </summary>
    public long EndTimestamp {
      get { return endTimestamp_; }
      set {
        endTimestamp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (LevelLimited != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LevelLimited);
      }
      if (CouponType != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CouponType);
      }
      if (ItemIdTarget != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ItemIdTarget);
      }
      if (BonusPersentage != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(BonusPersentage);
      }
      if (EffectiveTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EffectiveTime);
      }
      if (StartTimestamp != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(StartTimestamp);
      }
      if (EndTimestamp != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(EndTimestamp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (LevelLimited != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LevelLimited);
      }
      if (CouponType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CouponType);
      }
      if (ItemIdTarget != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemIdTarget);
      }
      if (BonusPersentage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BonusPersentage);
      }
      if (EffectiveTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EffectiveTime);
      }
      if (StartTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimestamp);
      }
      if (EndTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTimestamp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            LevelLimited = input.ReadInt64();
            break;
          }
          case 24: {
            CouponType = input.ReadInt64();
            break;
          }
          case 32: {
            ItemIdTarget = input.ReadInt64();
            break;
          }
          case 40: {
            BonusPersentage = input.ReadInt64();
            break;
          }
          case 48: {
            EffectiveTime = input.ReadInt64();
            break;
          }
          case 56: {
            StartTimestamp = input.ReadInt64();
            break;
          }
          case 64: {
            EndTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class BonusCouponActivityData : pb::IMessage {
    private static readonly pb::MessageParser<BonusCouponActivityData> _parser = new pb::MessageParser<BonusCouponActivityData>(() => new BonusCouponActivityData());
    public static pb::MessageParser<BonusCouponActivityData> Parser { get { return _parser; } }

    private bool couponBinded_;
    /// <summary>
    ///是否绑定过主城
    /// </summary>
    public bool CouponBinded {
      get { return couponBinded_; }
      set {
        couponBinded_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CouponBinded != false) {
        output.WriteRawTag(8);
        output.WriteBool(CouponBinded);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CouponBinded != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CouponBinded = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取用户的优惠券列表
  /// </summary>
  public sealed class CGetUserCoupons : pb::IMessage {
    private static readonly pb::MessageParser<CGetUserCoupons> _parser = new pb::MessageParser<CGetUserCoupons>(() => new CGetUserCoupons());
    public static pb::MessageParser<CGetUserCoupons> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SGetUserCoupons : pb::IMessage {
    private static readonly pb::MessageParser<SGetUserCoupons> _parser = new pb::MessageParser<SGetUserCoupons>(() => new SGetUserCoupons());
    public static pb::MessageParser<SGetUserCoupons> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SGetUserCoupons.Types.UserCoupon> _repeated_userCoupons_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.SGetUserCoupons.Types.UserCoupon.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetUserCoupons.Types.UserCoupon> userCoupons_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetUserCoupons.Types.UserCoupon>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetUserCoupons.Types.UserCoupon> UserCoupons {
      get { return userCoupons_; }
    }

    private uint serverTimeSeconds_;
    public uint ServerTimeSeconds {
      get { return serverTimeSeconds_; }
      set {
        serverTimeSeconds_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      userCoupons_.WriteTo(output, _repeated_userCoupons_codec);
      if (ServerTimeSeconds != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ServerTimeSeconds);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += userCoupons_.CalculateSize(_repeated_userCoupons_codec);
      if (ServerTimeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTimeSeconds);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            userCoupons_.AddEntriesFrom(input, _repeated_userCoupons_codec);
            break;
          }
          case 16: {
            ServerTimeSeconds = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SGetUserCoupons message type.</summary>
    public static class Types {
      public enum CouponType {
        /// <summary>
        /// 普通优惠券
        /// </summary>
        Normal = 0,
        /// <summary>
        /// 节日优惠券
        /// </summary>
        Holiday = 1,
      }

      public sealed class UserCoupon : pb::IMessage {
        private static readonly pb::MessageParser<UserCoupon> _parser = new pb::MessageParser<UserCoupon>(() => new UserCoupon());
        public static pb::MessageParser<UserCoupon> Parser { get { return _parser; } }

        private string id_ = "";
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.SGetUserCoupons.Types.CouponType type_ = 0;
        public global::DragonU3DSDK.Network.API.ILProtocol.SGetUserCoupons.Types.CouponType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        private uint itemIdTarget_;
        /// <summary>
        /// 加成的道具ID，对应的道具会在支付后获取时受到加成
        /// </summary>
        public uint ItemIdTarget {
          get { return itemIdTarget_; }
          set {
            itemIdTarget_ = value;
          }
        }

        private uint bonusPersentage_;
        /// <summary>
        /// 加成百分数
        /// </summary>
        public uint BonusPersentage {
          get { return bonusPersentage_; }
          set {
            bonusPersentage_ = value;
          }
        }

        private uint expireAt_;
        /// <summary>
        /// 截止时间，单位秒 默认为0（表永久有效)
        /// </summary>
        public uint ExpireAt {
          get { return expireAt_; }
          set {
            expireAt_ = value;
          }
        }

        private string linkedActivityId_ = "";
        /// <summary>
        /// 关联的activityId，默认为空字符串
        /// </summary>
        public string LinkedActivityId {
          get { return linkedActivityId_; }
          set {
            linkedActivityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (ItemIdTarget != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(ItemIdTarget);
          }
          if (BonusPersentage != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(BonusPersentage);
          }
          if (ExpireAt != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(ExpireAt);
          }
          if (LinkedActivityId.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(LinkedActivityId);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (ItemIdTarget != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemIdTarget);
          }
          if (BonusPersentage != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BonusPersentage);
          }
          if (ExpireAt != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireAt);
          }
          if (LinkedActivityId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LinkedActivityId);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 16: {
                type_ = (global::DragonU3DSDK.Network.API.ILProtocol.SGetUserCoupons.Types.CouponType) input.ReadEnum();
                break;
              }
              case 24: {
                ItemIdTarget = input.ReadUInt32();
                break;
              }
              case 32: {
                BonusPersentage = input.ReadUInt32();
                break;
              }
              case 40: {
                ExpireAt = input.ReadUInt32();
                break;
              }
              case 50: {
                LinkedActivityId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 绑定coupon到主商城
  /// </summary>
  public sealed class CBindCouponToStore : pb::IMessage {
    private static readonly pb::MessageParser<CBindCouponToStore> _parser = new pb::MessageParser<CBindCouponToStore>(() => new CBindCouponToStore());
    public static pb::MessageParser<CBindCouponToStore> Parser { get { return _parser; } }

    private string couponId_ = "";
    /// <summary>
    /// 优惠券ID，在优惠券列表中返回
    /// </summary>
    public string CouponId {
      get { return couponId_; }
      set {
        couponId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CouponId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CouponId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CouponId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CouponId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CouponId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SBindCouponToStore : pb::IMessage {
    private static readonly pb::MessageParser<SBindCouponToStore> _parser = new pb::MessageParser<SBindCouponToStore>(() => new SBindCouponToStore());
    public static pb::MessageParser<SBindCouponToStore> Parser { get { return _parser; } }

    private bool success_;
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///buff到期时，获取用户的cashbackbuff奖励
  /// </summary>
  public sealed class CGetCashBackBuffRewardMail : pb::IMessage {
    private static readonly pb::MessageParser<CGetCashBackBuffRewardMail> _parser = new pb::MessageParser<CGetCashBackBuffRewardMail>(() => new CGetCashBackBuffRewardMail());
    public static pb::MessageParser<CGetCashBackBuffRewardMail> Parser { get { return _parser; } }

    private string key_ = "";
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SGetCashBackBuffRewardMail : pb::IMessage {
    private static readonly pb::MessageParser<SGetCashBackBuffRewardMail> _parser = new pb::MessageParser<SGetCashBackBuffRewardMail>(() => new SGetCashBackBuffRewardMail());
    public static pb::MessageParser<SGetCashBackBuffRewardMail> Parser { get { return _parser; } }

    private bool success_;
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CGetUserCashBackBuffs : pb::IMessage {
    private static readonly pb::MessageParser<CGetUserCashBackBuffs> _parser = new pb::MessageParser<CGetUserCashBackBuffs>(() => new CGetUserCashBackBuffs());
    public static pb::MessageParser<CGetUserCashBackBuffs> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SGetUserCashBackBuffs : pb::IMessage {
    private static readonly pb::MessageParser<SGetUserCashBackBuffs> _parser = new pb::MessageParser<SGetUserCashBackBuffs>(() => new SGetUserCashBackBuffs());
    public static pb::MessageParser<SGetUserCashBackBuffs> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BuffCashBack> _repeated_cashBackBuffs_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.BuffCashBack.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BuffCashBack> cashBackBuffs_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BuffCashBack>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BuffCashBack> CashBackBuffs {
      get { return cashBackBuffs_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      cashBackBuffs_.WriteTo(output, _repeated_cashBackBuffs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += cashBackBuffs_.CalculateSize(_repeated_cashBackBuffs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cashBackBuffs_.AddEntriesFrom(input, _repeated_cashBackBuffs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// superSpinGiveCardActivity
  /// </summary>
  public sealed class SuperSpinGiveCardActivityConfigPB : pb::IMessage {
    private static readonly pb::MessageParser<SuperSpinGiveCardActivityConfigPB> _parser = new pb::MessageParser<SuperSpinGiveCardActivityConfigPB>(() => new SuperSpinGiveCardActivityConfigPB());
    public static pb::MessageParser<SuperSpinGiveCardActivityConfigPB> Parser { get { return _parser; } }

    private string id_ = "";
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long startTimestamp_;
    public long StartTimestamp {
      get { return startTimestamp_; }
      set {
        startTimestamp_ = value;
      }
    }

    private long endTimestamp_;
    public long EndTimestamp {
      get { return endTimestamp_; }
      set {
        endTimestamp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (StartTimestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartTimestamp);
      }
      if (EndTimestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(EndTimestamp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (StartTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimestamp);
      }
      if (EndTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTimestamp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            StartTimestamp = input.ReadInt64();
            break;
          }
          case 24: {
            EndTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class SuperSpinGiveCardActivityDataPB : pb::IMessage {
    private static readonly pb::MessageParser<SuperSpinGiveCardActivityDataPB> _parser = new pb::MessageParser<SuperSpinGiveCardActivityDataPB>(() => new SuperSpinGiveCardActivityDataPB());
    public static pb::MessageParser<SuperSpinGiveCardActivityDataPB> Parser { get { return _parser; } }

    private bool collectedAllCard_;
    /// <summary>
    ///是否已领取了所有的卡，该值为true,服务端不再给卡
    /// </summary>
    public bool CollectedAllCard {
      get { return collectedAllCard_; }
      set {
        collectedAllCard_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CollectedAllCard != false) {
        output.WriteRawTag(8);
        output.WriteBool(CollectedAllCard);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CollectedAllCard != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CollectedAllCard = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// valentine gift
  /// </summary>
  public sealed class ValenTineActivityConfigPB : pb::IMessage {
    private static readonly pb::MessageParser<ValenTineActivityConfigPB> _parser = new pb::MessageParser<ValenTineActivityConfigPB>(() => new ValenTineActivityConfigPB());
    public static pb::MessageParser<ValenTineActivityConfigPB> Parser { get { return _parser; } }

    private string id_ = "";
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long levelLimited_;
    public long LevelLimited {
      get { return levelLimited_; }
      set {
        levelLimited_ = value;
      }
    }

    private uint paymentId_;
    /// <summary>
    /// 获取高级奖励所需购买的商品标识
    /// </summary>
    public uint PaymentId {
      get { return paymentId_; }
      set {
        paymentId_ = value;
      }
    }

    private long startTimestamp_;
    public long StartTimestamp {
      get { return startTimestamp_; }
      set {
        startTimestamp_ = value;
      }
    }

    private long endTimestamp_;
    public long EndTimestamp {
      get { return endTimestamp_; }
      set {
        endTimestamp_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (LevelLimited != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LevelLimited);
      }
      if (PaymentId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PaymentId);
      }
      if (StartTimestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(StartTimestamp);
      }
      if (EndTimestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(EndTimestamp);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (LevelLimited != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LevelLimited);
      }
      if (PaymentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PaymentId);
      }
      if (StartTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimestamp);
      }
      if (EndTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTimestamp);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            LevelLimited = input.ReadInt64();
            break;
          }
          case 24: {
            PaymentId = input.ReadUInt32();
            break;
          }
          case 32: {
            StartTimestamp = input.ReadInt64();
            break;
          }
          case 40: {
            EndTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class ValentineActivityDataPB : pb::IMessage {
    private static readonly pb::MessageParser<ValentineActivityDataPB> _parser = new pb::MessageParser<ValentineActivityDataPB>(() => new ValentineActivityDataPB());
    public static pb::MessageParser<ValentineActivityDataPB> Parser { get { return _parser; } }

    private uint paymentId_;
    /// <summary>
    /// 获取高级奖励所需购买的商品标识
    /// </summary>
    public uint PaymentId {
      get { return paymentId_; }
      set {
        paymentId_ = value;
      }
    }

    private bool paymentAlreadyPaid_;
    /// <summary>
    /// 对应商品是否已经买过
    /// </summary>
    public bool PaymentAlreadyPaid {
      get { return paymentAlreadyPaid_; }
      set {
        paymentAlreadyPaid_ = value;
      }
    }

    private bool stepAlreadyBiggest_;
    /// <summary>
    /// 步数是否已经达到最大值
    /// </summary>
    public bool StepAlreadyBiggest {
      get { return stepAlreadyBiggest_; }
      set {
        stepAlreadyBiggest_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PaymentId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PaymentId);
      }
      if (PaymentAlreadyPaid != false) {
        output.WriteRawTag(32);
        output.WriteBool(PaymentAlreadyPaid);
      }
      if (StepAlreadyBiggest != false) {
        output.WriteRawTag(40);
        output.WriteBool(StepAlreadyBiggest);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PaymentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PaymentId);
      }
      if (PaymentAlreadyPaid != false) {
        size += 1 + 1;
      }
      if (StepAlreadyBiggest != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 24: {
            PaymentId = input.ReadUInt32();
            break;
          }
          case 32: {
            PaymentAlreadyPaid = input.ReadBool();
            break;
          }
          case 40: {
            StepAlreadyBiggest = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 情人节活动主页面调用
  /// </summary>
  public sealed class CGetValentineMainPageInfo : pb::IMessage {
    private static readonly pb::MessageParser<CGetValentineMainPageInfo> _parser = new pb::MessageParser<CGetValentineMainPageInfo>(() => new CGetValentineMainPageInfo());
    public static pb::MessageParser<CGetValentineMainPageInfo> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SGetValentineMainPageInfo : pb::IMessage {
    private static readonly pb::MessageParser<SGetValentineMainPageInfo> _parser = new pb::MessageParser<SGetValentineMainPageInfo>(() => new SGetValentineMainPageInfo());
    public static pb::MessageParser<SGetValentineMainPageInfo> Parser { get { return _parser; } }

    private uint step_;
    /// <summary>
    /// 拥有的步数 默认为0
    /// </summary>
    public uint Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    private uint normalRewardsReceivedStep_;
    /// <summary>
    ///普通奖励领取到的步数 默认为0 用于判断红心上是否需要打钩
    /// </summary>
    public uint NormalRewardsReceivedStep {
      get { return normalRewardsReceivedStep_; }
      set {
        normalRewardsReceivedStep_ = value;
      }
    }

    private uint paymentId_;
    /// <summary>
    /// 获取高级奖励所需购买的商品标识
    /// </summary>
    public uint PaymentId {
      get { return paymentId_; }
      set {
        paymentId_ = value;
      }
    }

    private bool paymentAlreadyPaid_;
    /// <summary>
    /// 对应商品是否已经买过
    /// </summary>
    public bool PaymentAlreadyPaid {
      get { return paymentAlreadyPaid_; }
      set {
        paymentAlreadyPaid_ = value;
      }
    }

    private long activityStartTimestamp_;
    /// <summary>
    /// 活动开始时间
    /// </summary>
    public long ActivityStartTimestamp {
      get { return activityStartTimestamp_; }
      set {
        activityStartTimestamp_ = value;
      }
    }

    private long activityEndTimestamp_;
    /// <summary>
    /// 活动结束时间
    /// </summary>
    public long ActivityEndTimestamp {
      get { return activityEndTimestamp_; }
      set {
        activityEndTimestamp_ = value;
      }
    }

    private long serverTimeSeconds_;
    /// <summary>
    /// 服务器当前时间UTC
    /// </summary>
    public long ServerTimeSeconds {
      get { return serverTimeSeconds_; }
      set {
        serverTimeSeconds_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SGetValentineMainPageInfo.Types.ValentineStepReward> _repeated_valentineRewards_codec
        = pb::FieldCodec.ForMessage(66, global::DragonU3DSDK.Network.API.ILProtocol.SGetValentineMainPageInfo.Types.ValentineStepReward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetValentineMainPageInfo.Types.ValentineStepReward> valentineRewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetValentineMainPageInfo.Types.ValentineStepReward>();
    /// <summary>
    /// 奖励列表
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetValentineMainPageInfo.Types.ValentineStepReward> ValentineRewards {
      get { return valentineRewards_; }
    }

    private uint stepMax_;
    /// <summary>
    /// 地图上最大的步数
    /// </summary>
    public uint StepMax {
      get { return stepMax_; }
      set {
        stepMax_ = value;
      }
    }

    private uint specialRewardsReceivedStep_;
    /// <summary>
    ///特殊奖励领取到的步数 默认为0
    /// </summary>
    public uint SpecialRewardsReceivedStep {
      get { return specialRewardsReceivedStep_; }
      set {
        specialRewardsReceivedStep_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig payItem_;
    /// <summary>
    /// 情人节活动的支付项信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig PayItem {
      get { return payItem_; }
      set {
        payItem_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Step != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Step);
      }
      if (NormalRewardsReceivedStep != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NormalRewardsReceivedStep);
      }
      if (PaymentId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PaymentId);
      }
      if (PaymentAlreadyPaid != false) {
        output.WriteRawTag(32);
        output.WriteBool(PaymentAlreadyPaid);
      }
      if (ActivityStartTimestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ActivityStartTimestamp);
      }
      if (ActivityEndTimestamp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ActivityEndTimestamp);
      }
      if (ServerTimeSeconds != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ServerTimeSeconds);
      }
      valentineRewards_.WriteTo(output, _repeated_valentineRewards_codec);
      if (StepMax != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(StepMax);
      }
      if (SpecialRewardsReceivedStep != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SpecialRewardsReceivedStep);
      }
      if (payItem_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(PayItem);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Step);
      }
      if (NormalRewardsReceivedStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NormalRewardsReceivedStep);
      }
      if (PaymentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PaymentId);
      }
      if (PaymentAlreadyPaid != false) {
        size += 1 + 1;
      }
      if (ActivityStartTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActivityStartTimestamp);
      }
      if (ActivityEndTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActivityEndTimestamp);
      }
      if (ServerTimeSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTimeSeconds);
      }
      size += valentineRewards_.CalculateSize(_repeated_valentineRewards_codec);
      if (StepMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StepMax);
      }
      if (SpecialRewardsReceivedStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpecialRewardsReceivedStep);
      }
      if (payItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PayItem);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Step = input.ReadUInt32();
            break;
          }
          case 16: {
            NormalRewardsReceivedStep = input.ReadUInt32();
            break;
          }
          case 24: {
            PaymentId = input.ReadUInt32();
            break;
          }
          case 32: {
            PaymentAlreadyPaid = input.ReadBool();
            break;
          }
          case 40: {
            ActivityStartTimestamp = input.ReadInt64();
            break;
          }
          case 48: {
            ActivityEndTimestamp = input.ReadInt64();
            break;
          }
          case 56: {
            ServerTimeSeconds = input.ReadInt64();
            break;
          }
          case 66: {
            valentineRewards_.AddEntriesFrom(input, _repeated_valentineRewards_codec);
            break;
          }
          case 72: {
            StepMax = input.ReadUInt32();
            break;
          }
          case 80: {
            SpecialRewardsReceivedStep = input.ReadUInt32();
            break;
          }
          case 90: {
            if (payItem_ == null) {
              payItem_ = new global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig();
            }
            input.ReadMessage(payItem_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SGetValentineMainPageInfo message type.</summary>
    public static class Types {
      public sealed class ValentineStepReward : pb::IMessage {
        private static readonly pb::MessageParser<ValentineStepReward> _parser = new pb::MessageParser<ValentineStepReward>(() => new ValentineStepReward());
        public static pb::MessageParser<ValentineStepReward> Parser { get { return _parser; } }

        private uint step_;
        /// <summary>
        /// 需要的步数
        /// </summary>
        public uint Step {
          get { return step_; }
          set {
            step_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.Reward normalReward_;
        /// <summary>
        /// 普通奖励
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.Reward NormalReward {
          get { return normalReward_; }
          set {
            normalReward_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.SGetValentineMainPageInfo.Types.ValentineStepReward.Types.ValentineRewardStatus normalRewardStatus_ = 0;
        /// <summary>
        /// 普通奖励领取状态 
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.SGetValentineMainPageInfo.Types.ValentineStepReward.Types.ValentineRewardStatus NormalRewardStatus {
          get { return normalRewardStatus_; }
          set {
            normalRewardStatus_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.Reward specialReward_;
        /// <summary>
        /// 特殊奖励 
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.Reward SpecialReward {
          get { return specialReward_; }
          set {
            specialReward_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.SGetValentineMainPageInfo.Types.ValentineStepReward.Types.ValentineRewardStatus specialRewardStatus_ = 0;
        /// <summary>
        /// 特殊奖励领取状态
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.SGetValentineMainPageInfo.Types.ValentineStepReward.Types.ValentineRewardStatus SpecialRewardStatus {
          get { return specialRewardStatus_; }
          set {
            specialRewardStatus_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Step != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Step);
          }
          if (normalReward_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(NormalReward);
          }
          if (NormalRewardStatus != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) NormalRewardStatus);
          }
          if (specialReward_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(SpecialReward);
          }
          if (SpecialRewardStatus != 0) {
            output.WriteRawTag(40);
            output.WriteEnum((int) SpecialRewardStatus);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Step != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Step);
          }
          if (normalReward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(NormalReward);
          }
          if (NormalRewardStatus != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NormalRewardStatus);
          }
          if (specialReward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpecialReward);
          }
          if (SpecialRewardStatus != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpecialRewardStatus);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Step = input.ReadUInt32();
                break;
              }
              case 18: {
                if (normalReward_ == null) {
                  normalReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
                }
                input.ReadMessage(normalReward_);
                break;
              }
              case 24: {
                normalRewardStatus_ = (global::DragonU3DSDK.Network.API.ILProtocol.SGetValentineMainPageInfo.Types.ValentineStepReward.Types.ValentineRewardStatus) input.ReadEnum();
                break;
              }
              case 34: {
                if (specialReward_ == null) {
                  specialReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
                }
                input.ReadMessage(specialReward_);
                break;
              }
              case 40: {
                specialRewardStatus_ = (global::DragonU3DSDK.Network.API.ILProtocol.SGetValentineMainPageInfo.Types.ValentineStepReward.Types.ValentineRewardStatus) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ValentineStepReward message type.</summary>
        public static class Types {
          public enum ValentineRewardStatus {
            /// <summary>
            /// 锁定状态
            /// </summary>
            Locked = 0,
            /// <summary>
            /// 解锁 但未领取
            /// </summary>
            Unlocked = 1,
            /// <summary>
            /// 已领取
            /// </summary>
            Received = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// 获取情人节活动的奖励
  /// </summary>
  public sealed class CCollectValentineRewards : pb::IMessage {
    private static readonly pb::MessageParser<CCollectValentineRewards> _parser = new pb::MessageParser<CCollectValentineRewards>(() => new CCollectValentineRewards());
    public static pb::MessageParser<CCollectValentineRewards> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SCollectValentineRewards : pb::IMessage {
    private static readonly pb::MessageParser<SCollectValentineRewards> _parser = new pb::MessageParser<SCollectValentineRewards>(() => new SCollectValentineRewards());
    public static pb::MessageParser<SCollectValentineRewards> Parser { get { return _parser; } }

    private bool success_;
    /// <summary>
    /// 领取结果
    /// </summary>
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> rewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 领取的奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> Rewards {
      get { return rewards_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    /// <summary>
    /// 用户数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_specialRewardsAfterPay_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> specialRewardsAfterPay_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    ///在支付以后还能获取的奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> SpecialRewardsAfterPay {
      get { return specialRewardsAfterPay_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (userProfile_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserProfile);
      }
      specialRewardsAfterPay_.WriteTo(output, _repeated_specialRewardsAfterPay_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      size += specialRewardsAfterPay_.CalculateSize(_repeated_specialRewardsAfterPay_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 26: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 34: {
            specialRewardsAfterPay_.AddEntriesFrom(input, _repeated_specialRewardsAfterPay_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取情人节活动的支付项信息
  /// </summary>
  public sealed class CGetValentinePayItemInfo : pb::IMessage {
    private static readonly pb::MessageParser<CGetValentinePayItemInfo> _parser = new pb::MessageParser<CGetValentinePayItemInfo>(() => new CGetValentinePayItemInfo());
    public static pb::MessageParser<CGetValentinePayItemInfo> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SGetValentinePayItemInfo : pb::IMessage {
    private static readonly pb::MessageParser<SGetValentinePayItemInfo> _parser = new pb::MessageParser<SGetValentinePayItemInfo>(() => new SGetValentinePayItemInfo());
    public static pb::MessageParser<SGetValentinePayItemInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig payItem_;
    public global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig PayItem {
      get { return payItem_; }
      set {
        payItem_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (payItem_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PayItem);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (payItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PayItem);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (payItem_ == null) {
              payItem_ = new global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig();
            }
            input.ReadMessage(payItem_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取活动的个人数据
  /// </summary>
  public sealed class CGetActivityUserData : pb::IMessage {
    private static readonly pb::MessageParser<CGetActivityUserData> _parser = new pb::MessageParser<CGetActivityUserData>(() => new CGetActivityUserData());
    public static pb::MessageParser<CGetActivityUserData> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<string> _repeated_activityIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> activityIds_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> ActivityIds {
      get { return activityIds_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      activityIds_.WriteTo(output, _repeated_activityIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += activityIds_.CalculateSize(_repeated_activityIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            activityIds_.AddEntriesFrom(input, _repeated_activityIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class SGetActivityUserData : pb::IMessage {
    private static readonly pb::MessageParser<SGetActivityUserData> _parser = new pb::MessageParser<SGetActivityUserData>(() => new SGetActivityUserData());
    public static pb::MessageParser<SGetActivityUserData> Parser { get { return _parser; } }

    private static readonly pbc::MapField<string, global::DragonU3DSDK.Network.API.ILProtocol.SGetActivityUserData.Types.ActivityData>.Codec _map_activityDatas_codec
        = new pbc::MapField<string, global::DragonU3DSDK.Network.API.ILProtocol.SGetActivityUserData.Types.ActivityData>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.SGetActivityUserData.Types.ActivityData.Parser), 10);
    private readonly pbc::MapField<string, global::DragonU3DSDK.Network.API.ILProtocol.SGetActivityUserData.Types.ActivityData> activityDatas_ = new pbc::MapField<string, global::DragonU3DSDK.Network.API.ILProtocol.SGetActivityUserData.Types.ActivityData>();
    /// <summary>
    ///key: activityId
    /// </summary>
    public pbc::MapField<string, global::DragonU3DSDK.Network.API.ILProtocol.SGetActivityUserData.Types.ActivityData> ActivityDatas {
      get { return activityDatas_; }
    }

    private uint serverTimeSeconds_;
    public uint ServerTimeSeconds {
      get { return serverTimeSeconds_; }
      set {
        serverTimeSeconds_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      activityDatas_.WriteTo(output, _map_activityDatas_codec);
      if (ServerTimeSeconds != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ServerTimeSeconds);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += activityDatas_.CalculateSize(_map_activityDatas_codec);
      if (ServerTimeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTimeSeconds);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            activityDatas_.AddEntriesFrom(input, _map_activityDatas_codec);
            break;
          }
          case 16: {
            ServerTimeSeconds = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SGetActivityUserData message type.</summary>
    public static class Types {
      public sealed class ActivityData : pb::IMessage {
        private static readonly pb::MessageParser<ActivityData> _parser = new pb::MessageParser<ActivityData>(() => new ActivityData());
        public static pb::MessageParser<ActivityData> Parser { get { return _parser; } }

        private global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct activityConfig_;
        public global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct ActivityConfig {
          get { return activityConfig_; }
          set {
            activityConfig_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct activityUserData_;
        public global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct ActivityUserData {
          get { return activityUserData_; }
          set {
            activityUserData_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (activityConfig_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ActivityConfig);
          }
          if (activityUserData_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ActivityUserData);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (activityConfig_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActivityConfig);
          }
          if (activityUserData_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActivityUserData);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (activityConfig_ == null) {
                  activityConfig_ = new global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct();
                }
                input.ReadMessage(activityConfig_);
                break;
              }
              case 18: {
                if (activityUserData_ == null) {
                  activityUserData_ = new global::DragonU3DSDK.Network.API.ILProtocol.AnyStruct();
                }
                input.ReadMessage(activityUserData_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// rushpass活动配置
  /// </summary>
  public sealed class RushPassActivityConfigPB : pb::IMessage {
    private static readonly pb::MessageParser<RushPassActivityConfigPB> _parser = new pb::MessageParser<RushPassActivityConfigPB>(() => new RushPassActivityConfigPB());
    public static pb::MessageParser<RushPassActivityConfigPB> Parser { get { return _parser; } }

    private string id_ = "";
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long levelLimited_;
    public long LevelLimited {
      get { return levelLimited_; }
      set {
        levelLimited_ = value;
      }
    }

    private uint ticketPaymentId_;
    /// <summary>
    /// rushpass支付项特征 
    /// </summary>
    public uint TicketPaymentId {
      get { return ticketPaymentId_; }
      set {
        ticketPaymentId_ = value;
      }
    }

    private long startTimestamp_;
    public long StartTimestamp {
      get { return startTimestamp_; }
      set {
        startTimestamp_ = value;
      }
    }

    private long endTimestamp_;
    public long EndTimestamp {
      get { return endTimestamp_; }
      set {
        endTimestamp_ = value;
      }
    }

    private long endCountDown_;
    /// <summary>
    /// 活动倒计时单位秒
    /// </summary>
    public long EndCountDown {
      get { return endCountDown_; }
      set {
        endCountDown_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (LevelLimited != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LevelLimited);
      }
      if (TicketPaymentId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TicketPaymentId);
      }
      if (StartTimestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(StartTimestamp);
      }
      if (EndTimestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(EndTimestamp);
      }
      if (EndCountDown != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EndCountDown);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (LevelLimited != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LevelLimited);
      }
      if (TicketPaymentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TicketPaymentId);
      }
      if (StartTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimestamp);
      }
      if (EndTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTimestamp);
      }
      if (EndCountDown != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndCountDown);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            LevelLimited = input.ReadInt64();
            break;
          }
          case 24: {
            TicketPaymentId = input.ReadUInt32();
            break;
          }
          case 32: {
            StartTimestamp = input.ReadInt64();
            break;
          }
          case 40: {
            EndTimestamp = input.ReadInt64();
            break;
          }
          case 48: {
            EndCountDown = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// rushpass 弹框相关数据
  /// </summary>
  public sealed class RushPassPopUpInfo : pb::IMessage {
    private static readonly pb::MessageParser<RushPassPopUpInfo> _parser = new pb::MessageParser<RushPassPopUpInfo>(() => new RushPassPopUpInfo());
    public static pb::MessageParser<RushPassPopUpInfo> Parser { get { return _parser; } }

    private long endCountDown_;
    /// <summary>
    /// 活动倒计时单位秒
    /// </summary>
    public long EndCountDown {
      get { return endCountDown_; }
      set {
        endCountDown_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo.Types.Step> _repeated_steps_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo.Types.Step.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo.Types.Step> steps_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo.Types.Step>();
    /// <summary>
    /// 活动奖励配置
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo.Types.Step> Steps {
      get { return steps_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig payItem_;
    /// <summary>
    /// 支付项信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig PayItem {
      get { return payItem_; }
      set {
        payItem_ = value;
      }
    }

    private bool paymentHasPaid_;
    /// <summary>
    /// 支付项已经买过
    /// </summary>
    public bool PaymentHasPaid {
      get { return paymentHasPaid_; }
      set {
        paymentHasPaid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (EndCountDown != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EndCountDown);
      }
      steps_.WriteTo(output, _repeated_steps_codec);
      if (payItem_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PayItem);
      }
      if (PaymentHasPaid != false) {
        output.WriteRawTag(32);
        output.WriteBool(PaymentHasPaid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (EndCountDown != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndCountDown);
      }
      size += steps_.CalculateSize(_repeated_steps_codec);
      if (payItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PayItem);
      }
      if (PaymentHasPaid != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EndCountDown = input.ReadInt64();
            break;
          }
          case 18: {
            steps_.AddEntriesFrom(input, _repeated_steps_codec);
            break;
          }
          case 26: {
            if (payItem_ == null) {
              payItem_ = new global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig();
            }
            input.ReadMessage(payItem_);
            break;
          }
          case 32: {
            PaymentHasPaid = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RushPassPopUpInfo message type.</summary>
    public static class Types {
      public sealed class StepReward : pb::IMessage {
        private static readonly pb::MessageParser<StepReward> _parser = new pb::MessageParser<StepReward>(() => new StepReward());
        public static pb::MessageParser<StepReward> Parser { get { return _parser; } }

        private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
        public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
          get { return reward_; }
          set {
            reward_ = value;
          }
        }

        private uint status_;
        /// <summary>
        /// 状态0不可领取 1可领取 2已领取
        /// </summary>
        public uint Status {
          get { return status_; }
          set {
            status_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (reward_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Reward);
          }
          if (Status != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Status);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (reward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
          }
          if (Status != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (reward_ == null) {
                  reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
                }
                input.ReadMessage(reward_);
                break;
              }
              case 16: {
                Status = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed class Step : pb::IMessage {
        private static readonly pb::MessageParser<Step> _parser = new pb::MessageParser<Step>(() => new Step());
        public static pb::MessageParser<Step> Parser { get { return _parser; } }

        private global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo.Types.StepReward rewardFree_;
        public global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo.Types.StepReward RewardFree {
          get { return rewardFree_; }
          set {
            rewardFree_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo.Types.StepReward rewardPaid_;
        public global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo.Types.StepReward RewardPaid {
          get { return rewardPaid_; }
          set {
            rewardPaid_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (rewardFree_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(RewardFree);
          }
          if (rewardPaid_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(RewardPaid);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (rewardFree_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardFree);
          }
          if (rewardPaid_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardPaid);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (rewardFree_ == null) {
                  rewardFree_ = new global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo.Types.StepReward();
                }
                input.ReadMessage(rewardFree_);
                break;
              }
              case 18: {
                if (rewardPaid_ == null) {
                  rewardPaid_ = new global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo.Types.StepReward();
                }
                input.ReadMessage(rewardPaid_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// rushpass活动用户数据
  /// </summary>
  public sealed class RushPassActivityDataPB : pb::IMessage {
    private static readonly pb::MessageParser<RushPassActivityDataPB> _parser = new pb::MessageParser<RushPassActivityDataPB>(() => new RushPassActivityDataPB());
    public static pb::MessageParser<RushPassActivityDataPB> Parser { get { return _parser; } }

    private bool levelRushIsLiving_;
    /// <summary>
    /// levelrush是否正在进行
    /// </summary>
    public bool LevelRushIsLiving {
      get { return levelRushIsLiving_; }
      set {
        levelRushIsLiving_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo rushPassPopUpInfo_;
    /// <summary>
    /// rushpass弹框信息，仅level_rush_is_living=true时弹框
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo RushPassPopUpInfo {
      get { return rushPassPopUpInfo_; }
      set {
        rushPassPopUpInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelRushIsLiving != false) {
        output.WriteRawTag(8);
        output.WriteBool(LevelRushIsLiving);
      }
      if (rushPassPopUpInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RushPassPopUpInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (LevelRushIsLiving != false) {
        size += 1 + 1;
      }
      if (rushPassPopUpInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RushPassPopUpInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LevelRushIsLiving = input.ReadBool();
            break;
          }
          case 18: {
            if (rushPassPopUpInfo_ == null) {
              rushPassPopUpInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo();
            }
            input.ReadMessage(rushPassPopUpInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大富翁跑图
  /// </summary>
  public sealed class MonopolyActivityConfigPB : pb::IMessage {
    private static readonly pb::MessageParser<MonopolyActivityConfigPB> _parser = new pb::MessageParser<MonopolyActivityConfigPB>(() => new MonopolyActivityConfigPB());
    public static pb::MessageParser<MonopolyActivityConfigPB> Parser { get { return _parser; } }

    private string id_ = "";
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long levelLimited_;
    public long LevelLimited {
      get { return levelLimited_; }
      set {
        levelLimited_ = value;
      }
    }

    private uint ticketPaymentId_;
    /// <summary>
    /// 支付项id
    /// </summary>
    public uint TicketPaymentId {
      get { return ticketPaymentId_; }
      set {
        ticketPaymentId_ = value;
      }
    }

    private long startTimestamp_;
    public long StartTimestamp {
      get { return startTimestamp_; }
      set {
        startTimestamp_ = value;
      }
    }

    private long endTimestamp_;
    public long EndTimestamp {
      get { return endTimestamp_; }
      set {
        endTimestamp_ = value;
      }
    }

    private long endCountDown_;
    /// <summary>
    /// 活动倒计时单位秒
    /// </summary>
    public long EndCountDown {
      get { return endCountDown_; }
      set {
        endCountDown_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (LevelLimited != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LevelLimited);
      }
      if (TicketPaymentId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TicketPaymentId);
      }
      if (StartTimestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(StartTimestamp);
      }
      if (EndTimestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(EndTimestamp);
      }
      if (EndCountDown != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EndCountDown);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (LevelLimited != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LevelLimited);
      }
      if (TicketPaymentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TicketPaymentId);
      }
      if (StartTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimestamp);
      }
      if (EndTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTimestamp);
      }
      if (EndCountDown != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndCountDown);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            LevelLimited = input.ReadInt64();
            break;
          }
          case 24: {
            TicketPaymentId = input.ReadUInt32();
            break;
          }
          case 32: {
            StartTimestamp = input.ReadInt64();
            break;
          }
          case 40: {
            EndTimestamp = input.ReadInt64();
            break;
          }
          case 48: {
            EndCountDown = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大富翁buff
  /// </summary>
  public sealed class MonopolyBuffInfo : pb::IMessage {
    private static readonly pb::MessageParser<MonopolyBuffInfo> _parser = new pb::MessageParser<MonopolyBuffInfo>(() => new MonopolyBuffInfo());
    public static pb::MessageParser<MonopolyBuffInfo> Parser { get { return _parser; } }

    private uint start_;
    /// <summary>
    ///buff开始时间，单位秒 默认为0
    /// </summary>
    public uint Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    private uint expire_;
    /// <summary>
    ///buff截止时间，单位秒 默认为0
    /// </summary>
    public uint Expire {
      get { return expire_; }
      set {
        expire_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Start);
      }
      if (Expire != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Expire);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Start);
      }
      if (Expire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expire);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Start = input.ReadUInt32();
            break;
          }
          case 16: {
            Expire = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大富翁传送门
  /// </summary>
  public sealed class MonopolyPortalInfo : pb::IMessage {
    private static readonly pb::MessageParser<MonopolyPortalInfo> _parser = new pb::MessageParser<MonopolyPortalInfo>(() => new MonopolyPortalInfo());
    public static pb::MessageParser<MonopolyPortalInfo> Parser { get { return _parser; } }

    private uint amount_;
    public uint Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Amount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Amount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Amount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Amount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class MonopolyActivityDataPB : pb::IMessage {
    private static readonly pb::MessageParser<MonopolyActivityDataPB> _parser = new pb::MessageParser<MonopolyActivityDataPB>(() => new MonopolyActivityDataPB());
    public static pb::MessageParser<MonopolyActivityDataPB> Parser { get { return _parser; } }

    private uint ticketPaymentId_;
    /// <summary>
    /// 支付项id
    /// </summary>
    public uint TicketPaymentId {
      get { return ticketPaymentId_; }
      set {
        ticketPaymentId_ = value;
      }
    }

    private uint ticketCount_;
    /// <summary>
    /// 持有的门票
    /// </summary>
    public uint TicketCount {
      get { return ticketCount_; }
      set {
        ticketCount_ = value;
      }
    }

    private uint runningRoundId_;
    /// <summary>
    /// 正在玩但未完成的关卡ID，默认为0
    /// </summary>
    public uint RunningRoundId {
      get { return runningRoundId_; }
      set {
        runningRoundId_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyEnergyInfoWhenSpin energyInfoWhenSpin_;
    /// <summary>
    ///spin中需要显示的能量
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyEnergyInfoWhenSpin EnergyInfoWhenSpin {
      get { return energyInfoWhenSpin_; }
      set {
        energyInfoWhenSpin_ = value;
      }
    }

    private uint beginnerGuideStep_;
    /// <summary>
    /// 新手引导的进度
    /// </summary>
    public uint BeginnerGuideStep {
      get { return beginnerGuideStep_; }
      set {
        beginnerGuideStep_ = value;
      }
    }

    private uint addedCountCurrent_;
    /// <summary>
    /// 目前已经加了多少票了
    /// </summary>
    public uint AddedCountCurrent {
      get { return addedCountCurrent_; }
      set {
        addedCountCurrent_ = value;
      }
    }

    private uint addedCountMax_;
    /// <summary>
    /// 最多能加多少票
    /// </summary>
    public uint AddedCountMax {
      get { return addedCountMax_; }
      set {
        addedCountMax_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo monopolyBuffMoreTicket_;
    /// <summary>
    /// 大富翁buff-能量条满后获得更多票
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo MonopolyBuffMoreTicket {
      get { return monopolyBuffMoreTicket_; }
      set {
        monopolyBuffMoreTicket_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo monopolyBuffMoreDamage_;
    /// <summary>
    /// 大富翁buff-火炮伤害增强
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo MonopolyBuffMoreDamage {
      get { return monopolyBuffMoreDamage_; }
      set {
        monopolyBuffMoreDamage_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyPortalInfo monopolyPortal_;
    /// <summary>
    /// 大富翁传送门剩余次数
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyPortalInfo MonopolyPortal {
      get { return monopolyPortal_; }
      set {
        monopolyPortal_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TicketPaymentId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TicketPaymentId);
      }
      if (TicketCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TicketCount);
      }
      if (RunningRoundId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RunningRoundId);
      }
      if (energyInfoWhenSpin_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EnergyInfoWhenSpin);
      }
      if (BeginnerGuideStep != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(BeginnerGuideStep);
      }
      if (AddedCountCurrent != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(AddedCountCurrent);
      }
      if (AddedCountMax != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(AddedCountMax);
      }
      if (monopolyBuffMoreTicket_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(MonopolyBuffMoreTicket);
      }
      if (monopolyBuffMoreDamage_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MonopolyBuffMoreDamage);
      }
      if (monopolyPortal_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MonopolyPortal);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (TicketPaymentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TicketPaymentId);
      }
      if (TicketCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TicketCount);
      }
      if (RunningRoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RunningRoundId);
      }
      if (energyInfoWhenSpin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnergyInfoWhenSpin);
      }
      if (BeginnerGuideStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeginnerGuideStep);
      }
      if (AddedCountCurrent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddedCountCurrent);
      }
      if (AddedCountMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddedCountMax);
      }
      if (monopolyBuffMoreTicket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonopolyBuffMoreTicket);
      }
      if (monopolyBuffMoreDamage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonopolyBuffMoreDamage);
      }
      if (monopolyPortal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonopolyPortal);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TicketPaymentId = input.ReadUInt32();
            break;
          }
          case 16: {
            TicketCount = input.ReadUInt32();
            break;
          }
          case 24: {
            RunningRoundId = input.ReadUInt32();
            break;
          }
          case 34: {
            if (energyInfoWhenSpin_ == null) {
              energyInfoWhenSpin_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyEnergyInfoWhenSpin();
            }
            input.ReadMessage(energyInfoWhenSpin_);
            break;
          }
          case 40: {
            BeginnerGuideStep = input.ReadUInt32();
            break;
          }
          case 48: {
            AddedCountCurrent = input.ReadUInt32();
            break;
          }
          case 56: {
            AddedCountMax = input.ReadUInt32();
            break;
          }
          case 66: {
            if (monopolyBuffMoreTicket_ == null) {
              monopolyBuffMoreTicket_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo();
            }
            input.ReadMessage(monopolyBuffMoreTicket_);
            break;
          }
          case 74: {
            if (monopolyBuffMoreDamage_ == null) {
              monopolyBuffMoreDamage_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo();
            }
            input.ReadMessage(monopolyBuffMoreDamage_);
            break;
          }
          case 82: {
            if (monopolyPortal_ == null) {
              monopolyPortal_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyPortalInfo();
            }
            input.ReadMessage(monopolyPortal_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大富翁关卡简要信息 用于渲染关卡列表
  /// </summary>
  public sealed class MonopolyRoundSimpleInfo : pb::IMessage {
    private static readonly pb::MessageParser<MonopolyRoundSimpleInfo> _parser = new pb::MessageParser<MonopolyRoundSimpleInfo>(() => new MonopolyRoundSimpleInfo());
    public static pb::MessageParser<MonopolyRoundSimpleInfo> Parser { get { return _parser; } }

    private uint roundNum_;
    /// <summary>
    /// 关卡号 1-6
    /// </summary>
    public uint RoundNum {
      get { return roundNum_; }
      set {
        roundNum_ = value;
      }
    }

    private uint roundId_;
    /// <summary>
    /// 关卡ID
    /// </summary>
    public uint RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    private bool isCurrentRound_;
    /// <summary>
    ///是否是当前关卡(每轮的最开始，所有的关卡都是false，其他仅有一个true)
    /// </summary>
    public bool IsCurrentRound {
      get { return isCurrentRound_; }
      set {
        isCurrentRound_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_completeRewards_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> completeRewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    ///完成此关卡后的奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> CompleteRewards {
      get { return completeRewards_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundSimpleInfo.Types.RoundStatus roundStatus_ = 0;
    /// <summary>
    ///关卡状态
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundSimpleInfo.Types.RoundStatus RoundStatus {
      get { return roundStatus_; }
      set {
        roundStatus_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoundNum);
      }
      if (RoundId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoundId);
      }
      if (IsCurrentRound != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsCurrentRound);
      }
      completeRewards_.WriteTo(output, _repeated_completeRewards_codec);
      if (RoundStatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) RoundStatus);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoundNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoundNum);
      }
      if (RoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoundId);
      }
      if (IsCurrentRound != false) {
        size += 1 + 1;
      }
      size += completeRewards_.CalculateSize(_repeated_completeRewards_codec);
      if (RoundStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RoundStatus);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoundNum = input.ReadUInt32();
            break;
          }
          case 16: {
            RoundId = input.ReadUInt32();
            break;
          }
          case 24: {
            IsCurrentRound = input.ReadBool();
            break;
          }
          case 34: {
            completeRewards_.AddEntriesFrom(input, _repeated_completeRewards_codec);
            break;
          }
          case 40: {
            roundStatus_ = (global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundSimpleInfo.Types.RoundStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MonopolyRoundSimpleInfo message type.</summary>
    public static class Types {
      public enum RoundStatus {
        /// <summary>
        /// 未开启（现在不能玩)
        /// </summary>
        Locked = 0,
        /// <summary>
        /// 开启中，玩家可玩(只会有一个关卡的状态是OPTNING)
        /// </summary>
        Opening = 1,
        /// <summary>
        /// 正在玩
        /// </summary>
        Running = 2,
        /// <summary>
        /// 已完成（完成时直接结算奖励）
        /// </summary>
        Finished = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// 大富翁游戏玩家持有的宝箱
  /// </summary>
  public sealed class MonopolyGiftBox : pb::IMessage {
    private static readonly pb::MessageParser<MonopolyGiftBox> _parser = new pb::MessageParser<MonopolyGiftBox>(() => new MonopolyGiftBox());
    public static pb::MessageParser<MonopolyGiftBox> Parser { get { return _parser; } }

    private uint id_;
    /// <summary>
    /// 宝箱在表中配置的ID，可能与显示有关
    /// </summary>
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private uint level_;
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private ulong uinonSign_;
    /// <summary>
    /// 宝箱唯一标识,用于开宝箱
    /// </summary>
    public ulong UinonSign {
      get { return uinonSign_; }
      set {
        uinonSign_ = value;
      }
    }

    private uint openSecondsFill_;
    /// <summary>
    ///宝箱开启需要的秒数
    /// </summary>
    public uint OpenSecondsFill {
      get { return openSecondsFill_; }
      set {
        openSecondsFill_ = value;
      }
    }

    private uint openSecondsCountDown_;
    /// <summary>
    ///宝箱开启还剩余多少秒
    /// </summary>
    public uint OpenSecondsCountDown {
      get { return openSecondsCountDown_; }
      set {
        openSecondsCountDown_ = value;
      }
    }

    private uint openDiamondFill_;
    /// <summary>
    ///宝箱开启需要花费的钻石（得到宝箱后立刻就要开启的情况）
    /// </summary>
    public uint OpenDiamondFill {
      get { return openDiamondFill_; }
      set {
        openDiamondFill_ = value;
      }
    }

    private uint openDiamondCurrent_;
    /// <summary>
    ///当前时间，开启宝箱，需要的钻石
    /// </summary>
    public uint OpenDiamondCurrent {
      get { return openDiamondCurrent_; }
      set {
        openDiamondCurrent_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (UinonSign != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(UinonSign);
      }
      if (OpenSecondsFill != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OpenSecondsFill);
      }
      if (OpenSecondsCountDown != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(OpenSecondsCountDown);
      }
      if (OpenDiamondFill != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(OpenDiamondFill);
      }
      if (OpenDiamondCurrent != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(OpenDiamondCurrent);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (UinonSign != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UinonSign);
      }
      if (OpenSecondsFill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenSecondsFill);
      }
      if (OpenSecondsCountDown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenSecondsCountDown);
      }
      if (OpenDiamondFill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenDiamondFill);
      }
      if (OpenDiamondCurrent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpenDiamondCurrent);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            UinonSign = input.ReadUInt64();
            break;
          }
          case 32: {
            OpenSecondsFill = input.ReadUInt32();
            break;
          }
          case 40: {
            OpenSecondsCountDown = input.ReadUInt32();
            break;
          }
          case 48: {
            OpenDiamondFill = input.ReadUInt32();
            break;
          }
          case 56: {
            OpenDiamondCurrent = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大富翁关卡详细信息 用于渲染关卡内
  /// </summary>
  public sealed class MonopolyRoundInfo : pb::IMessage {
    private static readonly pb::MessageParser<MonopolyRoundInfo> _parser = new pb::MessageParser<MonopolyRoundInfo>(() => new MonopolyRoundInfo());
    public static pb::MessageParser<MonopolyRoundInfo> Parser { get { return _parser; } }

    private uint roundNum_;
    /// <summary>
    /// 票数，倒计时等简要信息
    /// </summary>
    public uint RoundNum {
      get { return roundNum_; }
      set {
        roundNum_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundSimpleInfo simpleInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundSimpleInfo SimpleInfo {
      get { return simpleInfo_; }
      set {
        simpleInfo_ = value;
      }
    }

    private uint ticketCount_;
    /// <summary>
    ///可用的票数（用于roll点）
    /// </summary>
    public uint TicketCount {
      get { return ticketCount_; }
      set {
        ticketCount_ = value;
      }
    }

    private long activityStartTimestamp_;
    /// <summary>
    /// 活动开始时间
    /// </summary>
    public long ActivityStartTimestamp {
      get { return activityStartTimestamp_; }
      set {
        activityStartTimestamp_ = value;
      }
    }

    private long activityEndTimestamp_;
    /// <summary>
    /// 活动结束时间
    /// </summary>
    public long ActivityEndTimestamp {
      get { return activityEndTimestamp_; }
      set {
        activityEndTimestamp_ = value;
      }
    }

    private long serverTimeSeconds_;
    /// <summary>
    /// 服务器当前时间UTC
    /// </summary>
    public long ServerTimeSeconds {
      get { return serverTimeSeconds_; }
      set {
        serverTimeSeconds_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.SpecialLattice> _repeated_specialLattices_codec
        = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.SpecialLattice.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.SpecialLattice> specialLattices_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.SpecialLattice>();
    /// <summary>
    /// 特殊格子
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.SpecialLattice> SpecialLattices {
      get { return specialLattices_; }
    }

    private uint currentLatticeIndex_;
    /// <summary>
    /// 玩家当前所在格子的序号，从0开始
    /// </summary>
    public uint CurrentLatticeIndex {
      get { return currentLatticeIndex_; }
      set {
        currentLatticeIndex_ = value;
      }
    }

    private uint bloodFull_;
    /// <summary>
    ///中间海盗船/章鱼，满血是多少
    /// </summary>
    public uint BloodFull {
      get { return bloodFull_; }
      set {
        bloodFull_ = value;
      }
    }

    private uint bloodCurrent_;
    /// <summary>
    /// 中间海盗船/章鱼，当前血量
    /// </summary>
    public uint BloodCurrent {
      get { return bloodCurrent_; }
      set {
        bloodCurrent_ = value;
      }
    }

    private uint shootAgainDiamondCost_;
    /// <summary>
    /// 再次射击消耗的钻石数量
    /// </summary>
    public uint ShootAgainDiamondCost {
      get { return shootAgainDiamondCost_; }
      set {
        shootAgainDiamondCost_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.GiftBoxPosition> _repeated_giftBoxPositions_codec
        = pb::FieldCodec.ForMessage(98, global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.GiftBoxPosition.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.GiftBoxPosition> giftBoxPositions_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.GiftBoxPosition>();
    /// <summary>
    /// 多个宝箱位
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.GiftBoxPosition> GiftBoxPositions {
      get { return giftBoxPositions_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo monopolyBuffMoreTicket_;
    /// <summary>
    /// 大富翁buff-能量条满后获得更多票
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo MonopolyBuffMoreTicket {
      get { return monopolyBuffMoreTicket_; }
      set {
        monopolyBuffMoreTicket_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo monopolyBuffMoreDamage_;
    /// <summary>
    /// 大富翁buff-火炮伤害增强
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo MonopolyBuffMoreDamage {
      get { return monopolyBuffMoreDamage_; }
      set {
        monopolyBuffMoreDamage_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyPortalInfo monopolyPortal_;
    /// <summary>
    /// 大富翁传送门剩余次数
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyPortalInfo MonopolyPortal {
      get { return monopolyPortal_; }
      set {
        monopolyPortal_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.RewardSpecialLattice> _repeated_rewardSpecialLattices_codec
        = pb::FieldCodec.ForMessage(130, global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.RewardSpecialLattice.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.RewardSpecialLattice> rewardSpecialLattices_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.RewardSpecialLattice>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.RewardSpecialLattice> RewardSpecialLattices {
      get { return rewardSpecialLattices_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoundNum);
      }
      if (simpleInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SimpleInfo);
      }
      if (TicketCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TicketCount);
      }
      if (ActivityStartTimestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ActivityStartTimestamp);
      }
      if (ActivityEndTimestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ActivityEndTimestamp);
      }
      if (ServerTimeSeconds != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ServerTimeSeconds);
      }
      specialLattices_.WriteTo(output, _repeated_specialLattices_codec);
      if (CurrentLatticeIndex != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CurrentLatticeIndex);
      }
      if (BloodFull != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(BloodFull);
      }
      if (BloodCurrent != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(BloodCurrent);
      }
      if (ShootAgainDiamondCost != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(ShootAgainDiamondCost);
      }
      giftBoxPositions_.WriteTo(output, _repeated_giftBoxPositions_codec);
      if (monopolyBuffMoreTicket_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(MonopolyBuffMoreTicket);
      }
      if (monopolyBuffMoreDamage_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(MonopolyBuffMoreDamage);
      }
      if (monopolyPortal_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(MonopolyPortal);
      }
      rewardSpecialLattices_.WriteTo(output, _repeated_rewardSpecialLattices_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RoundNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoundNum);
      }
      if (simpleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleInfo);
      }
      if (TicketCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TicketCount);
      }
      if (ActivityStartTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActivityStartTimestamp);
      }
      if (ActivityEndTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActivityEndTimestamp);
      }
      if (ServerTimeSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTimeSeconds);
      }
      size += specialLattices_.CalculateSize(_repeated_specialLattices_codec);
      if (CurrentLatticeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentLatticeIndex);
      }
      if (BloodFull != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BloodFull);
      }
      if (BloodCurrent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BloodCurrent);
      }
      if (ShootAgainDiamondCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShootAgainDiamondCost);
      }
      size += giftBoxPositions_.CalculateSize(_repeated_giftBoxPositions_codec);
      if (monopolyBuffMoreTicket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonopolyBuffMoreTicket);
      }
      if (monopolyBuffMoreDamage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonopolyBuffMoreDamage);
      }
      if (monopolyPortal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonopolyPortal);
      }
      size += rewardSpecialLattices_.CalculateSize(_repeated_rewardSpecialLattices_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoundNum = input.ReadUInt32();
            break;
          }
          case 18: {
            if (simpleInfo_ == null) {
              simpleInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundSimpleInfo();
            }
            input.ReadMessage(simpleInfo_);
            break;
          }
          case 24: {
            TicketCount = input.ReadUInt32();
            break;
          }
          case 32: {
            ActivityStartTimestamp = input.ReadInt64();
            break;
          }
          case 40: {
            ActivityEndTimestamp = input.ReadInt64();
            break;
          }
          case 48: {
            ServerTimeSeconds = input.ReadInt64();
            break;
          }
          case 58: {
            specialLattices_.AddEntriesFrom(input, _repeated_specialLattices_codec);
            break;
          }
          case 64: {
            CurrentLatticeIndex = input.ReadUInt32();
            break;
          }
          case 72: {
            BloodFull = input.ReadUInt32();
            break;
          }
          case 80: {
            BloodCurrent = input.ReadUInt32();
            break;
          }
          case 88: {
            ShootAgainDiamondCost = input.ReadUInt32();
            break;
          }
          case 98: {
            giftBoxPositions_.AddEntriesFrom(input, _repeated_giftBoxPositions_codec);
            break;
          }
          case 106: {
            if (monopolyBuffMoreTicket_ == null) {
              monopolyBuffMoreTicket_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo();
            }
            input.ReadMessage(monopolyBuffMoreTicket_);
            break;
          }
          case 114: {
            if (monopolyBuffMoreDamage_ == null) {
              monopolyBuffMoreDamage_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo();
            }
            input.ReadMessage(monopolyBuffMoreDamage_);
            break;
          }
          case 122: {
            if (monopolyPortal_ == null) {
              monopolyPortal_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyPortalInfo();
            }
            input.ReadMessage(monopolyPortal_);
            break;
          }
          case 130: {
            rewardSpecialLattices_.AddEntriesFrom(input, _repeated_rewardSpecialLattices_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MonopolyRoundInfo message type.</summary>
    public static class Types {
      /// <summary>
      /// 跑圈相关
      /// </summary>
      public sealed class SpecialLattice : pb::IMessage {
        private static readonly pb::MessageParser<SpecialLattice> _parser = new pb::MessageParser<SpecialLattice>(() => new SpecialLattice());
        public static pb::MessageParser<SpecialLattice> Parser { get { return _parser; } }

        private uint id_;
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        private uint index_;
        /// <summary>
        ///序号 从0开始
        /// </summary>
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.SpecialLattice.Types.LatticeType type_ = 0;
        public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.SpecialLattice.Types.LatticeType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        private uint level_;
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        private bool isCurrentLattice_;
        /// <summary>
        /// 玩家是否在当前格子中
        /// </summary>
        public bool IsCurrentLattice {
          get { return isCurrentLattice_; }
          set {
            isCurrentLattice_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Index != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Index);
          }
          if (Type != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Type);
          }
          if (Level != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Level);
          }
          if (IsCurrentLattice != false) {
            output.WriteRawTag(40);
            output.WriteBool(IsCurrentLattice);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (IsCurrentLattice != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Index = input.ReadUInt32();
                break;
              }
              case 24: {
                type_ = (global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo.Types.SpecialLattice.Types.LatticeType) input.ReadEnum();
                break;
              }
              case 32: {
                Level = input.ReadUInt32();
                break;
              }
              case 40: {
                IsCurrentLattice = input.ReadBool();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the SpecialLattice message type.</summary>
        public static class Types {
          public enum LatticeType {
            Cannon = 0,
            Giftbox = 1,
          }

        }
        #endregion

      }

      /// <summary>
      /// 宝箱相关
      /// </summary>
      public sealed class GiftBoxPosition : pb::IMessage {
        private static readonly pb::MessageParser<GiftBoxPosition> _parser = new pb::MessageParser<GiftBoxPosition>(() => new GiftBoxPosition());
        public static pb::MessageParser<GiftBoxPosition> Parser { get { return _parser; } }

        private bool hasBox_;
        public bool HasBox {
          get { return hasBox_; }
          set {
            hasBox_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyGiftBox giftBox_;
        public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyGiftBox GiftBox {
          get { return giftBox_; }
          set {
            giftBox_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (HasBox != false) {
            output.WriteRawTag(8);
            output.WriteBool(HasBox);
          }
          if (giftBox_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(GiftBox);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (HasBox != false) {
            size += 1 + 1;
          }
          if (giftBox_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GiftBox);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                HasBox = input.ReadBool();
                break;
              }
              case 18: {
                if (giftBox_ == null) {
                  giftBox_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyGiftBox();
                }
                input.ReadMessage(giftBox_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// 地图上的大富翁拼图碎片等 奖励性道具（领完了就没)
      /// </summary>
      public sealed class RewardSpecialLattice : pb::IMessage {
        private static readonly pb::MessageParser<RewardSpecialLattice> _parser = new pb::MessageParser<RewardSpecialLattice>(() => new RewardSpecialLattice());
        public static pb::MessageParser<RewardSpecialLattice> Parser { get { return _parser; } }

        private uint indexOfMap_;
        /// <summary>
        ///在地图上的位置序号 从0开始
        /// </summary>
        public uint IndexOfMap {
          get { return indexOfMap_; }
          set {
            indexOfMap_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
        /// <summary>
        /// 奖励，包含大富翁碎片，以及以后可能的巴拉巴拉
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
          get { return reward_; }
          set {
            reward_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (IndexOfMap != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(IndexOfMap);
          }
          if (reward_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Reward);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (IndexOfMap != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndexOfMap);
          }
          if (reward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                IndexOfMap = input.ReadUInt32();
                break;
              }
              case 18: {
                if (reward_ == null) {
                  reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
                }
                input.ReadMessage(reward_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  ///大富翁多个buff的状态
  /// </summary>
  public sealed class BuffMonopolyBooster : pb::IMessage {
    private static readonly pb::MessageParser<BuffMonopolyBooster> _parser = new pb::MessageParser<BuffMonopolyBooster>(() => new BuffMonopolyBooster());
    public static pb::MessageParser<BuffMonopolyBooster> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo monopolyBuffMoreTicket_;
    /// <summary>
    /// 大富翁buff-能量条满后获得更多票
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo MonopolyBuffMoreTicket {
      get { return monopolyBuffMoreTicket_; }
      set {
        monopolyBuffMoreTicket_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo monopolyBuffMoreDamage_;
    /// <summary>
    /// 大富翁buff-火炮伤害增强
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo MonopolyBuffMoreDamage {
      get { return monopolyBuffMoreDamage_; }
      set {
        monopolyBuffMoreDamage_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (monopolyBuffMoreTicket_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MonopolyBuffMoreTicket);
      }
      if (monopolyBuffMoreDamage_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MonopolyBuffMoreDamage);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (monopolyBuffMoreTicket_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonopolyBuffMoreTicket);
      }
      if (monopolyBuffMoreDamage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonopolyBuffMoreDamage);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (monopolyBuffMoreTicket_ == null) {
              monopolyBuffMoreTicket_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo();
            }
            input.ReadMessage(monopolyBuffMoreTicket_);
            break;
          }
          case 18: {
            if (monopolyBuffMoreDamage_ == null) {
              monopolyBuffMoreDamage_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyBuffInfo();
            }
            input.ReadMessage(monopolyBuffMoreDamage_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 每日任务相关信息
  /// </summary>
  public sealed class MonopolyDailyTask : pb::IMessage {
    private static readonly pb::MessageParser<MonopolyDailyTask> _parser = new pb::MessageParser<MonopolyDailyTask>(() => new MonopolyDailyTask());
    public static pb::MessageParser<MonopolyDailyTask> Parser { get { return _parser; } }

    private uint taskIndex_;
    /// <summary>
    /// 任务序号 从1开始
    /// </summary>
    public uint TaskIndex {
      get { return taskIndex_; }
      set {
        taskIndex_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask.Types.TaskType taskType_ = 0;
    /// <summary>
    /// 任务类型
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask.Types.TaskType TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    private ulong targetValue_;
    /// <summary>
    /// 目标值
    /// </summary>
    public ulong TargetValue {
      get { return targetValue_; }
      set {
        targetValue_ = value;
      }
    }

    private ulong currentValue_;
    /// <summary>
    /// 当前值
    /// </summary>
    public ulong CurrentValue {
      get { return currentValue_; }
      set {
        currentValue_ = value;
      }
    }

    private uint status_;
    /// <summary>
    /// 0进行中 1 已完成，完成时服务端直接发奖
    /// </summary>
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    private uint expireAt_;
    /// <summary>
    /// 任务结束的时间，单位秒
    /// </summary>
    public uint ExpireAt {
      get { return expireAt_; }
      set {
        expireAt_ = value;
      }
    }

    private uint serverTimeSeconds_;
    /// <summary>
    /// 服务器时间
    /// </summary>
    public uint ServerTimeSeconds {
      get { return serverTimeSeconds_; }
      set {
        serverTimeSeconds_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward taskRewards_;
    /// <summary>
    /// 完成此任务给的奖励
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward TaskRewards {
      get { return taskRewards_; }
      set {
        taskRewards_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward taskRewardsGot_;
    /// <summary>
    /// 仅当完成任务给奖励时，该字段不为空
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward TaskRewardsGot {
      get { return taskRewardsGot_; }
      set {
        taskRewardsGot_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskIndex);
      }
      if (TaskType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TaskType);
      }
      if (TargetValue != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TargetValue);
      }
      if (CurrentValue != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(CurrentValue);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Status);
      }
      if (ExpireAt != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExpireAt);
      }
      if (ServerTimeSeconds != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ServerTimeSeconds);
      }
      if (taskRewards_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(TaskRewards);
      }
      if (taskRewardsGot_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TaskRewardsGot);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (TaskIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskIndex);
      }
      if (TaskType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TaskType);
      }
      if (TargetValue != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetValue);
      }
      if (CurrentValue != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CurrentValue);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (ExpireAt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpireAt);
      }
      if (ServerTimeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTimeSeconds);
      }
      if (taskRewards_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskRewards);
      }
      if (taskRewardsGot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskRewardsGot);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            taskType_ = (global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask.Types.TaskType) input.ReadEnum();
            break;
          }
          case 24: {
            TargetValue = input.ReadUInt64();
            break;
          }
          case 32: {
            CurrentValue = input.ReadUInt64();
            break;
          }
          case 40: {
            Status = input.ReadUInt32();
            break;
          }
          case 48: {
            ExpireAt = input.ReadUInt32();
            break;
          }
          case 56: {
            ServerTimeSeconds = input.ReadUInt32();
            break;
          }
          case 66: {
            if (taskRewards_ == null) {
              taskRewards_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(taskRewards_);
            break;
          }
          case 74: {
            if (taskRewardsGot_ == null) {
              taskRewardsGot_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(taskRewardsGot_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MonopolyDailyTask message type.</summary>
    public static class Types {
      public enum TaskType {
        Default = 0,
        /// <summary>
        /// 走N步
        /// </summary>
        Step = 1,
        /// <summary>
        /// 开N个宝箱
        /// </summary>
        OpenBox = 2,
        /// <summary>
        /// 点N次spin
        /// </summary>
        Spin = 3,
        /// <summary>
        /// 开N炮
        /// </summary>
        Fire = 4,
        /// <summary>
        /// 赢N多少钱
        /// </summary>
        GetCoins = 5,
        /// <summary>
        /// 通多少关
        /// </summary>
        PassLevel = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// 获取关卡列表信息
  /// </summary>
  public sealed class CGetMonopolyRoundListInfo : pb::IMessage {
    private static readonly pb::MessageParser<CGetMonopolyRoundListInfo> _parser = new pb::MessageParser<CGetMonopolyRoundListInfo>(() => new CGetMonopolyRoundListInfo());
    public static pb::MessageParser<CGetMonopolyRoundListInfo> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SGetMonopolyRoundListInfo : pb::IMessage {
    private static readonly pb::MessageParser<SGetMonopolyRoundListInfo> _parser = new pb::MessageParser<SGetMonopolyRoundListInfo>(() => new SGetMonopolyRoundListInfo());
    public static pb::MessageParser<SGetMonopolyRoundListInfo> Parser { get { return _parser; } }

    private uint roundNum_;
    /// <summary>
    ///第几轮 如 1
    /// </summary>
    public uint RoundNum {
      get { return roundNum_; }
      set {
        roundNum_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_completeRoundListRewards_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> completeRoundListRewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 完成当前轮后的奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> CompleteRoundListRewards {
      get { return completeRoundListRewards_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundSimpleInfo> _repeated_roundList_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundSimpleInfo.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundSimpleInfo> roundList_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundSimpleInfo>();
    /// <summary>
    /// 关卡列表
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundSimpleInfo> RoundList {
      get { return roundList_; }
    }

    private uint ticketCount_;
    /// <summary>
    ///可用的票数（用于roll点）
    /// </summary>
    public uint TicketCount {
      get { return ticketCount_; }
      set {
        ticketCount_ = value;
      }
    }

    private long activityStartTimestamp_;
    /// <summary>
    /// 活动开始时间
    /// </summary>
    public long ActivityStartTimestamp {
      get { return activityStartTimestamp_; }
      set {
        activityStartTimestamp_ = value;
      }
    }

    private long activityEndTimestamp_;
    /// <summary>
    /// 活动结束时间
    /// </summary>
    public long ActivityEndTimestamp {
      get { return activityEndTimestamp_; }
      set {
        activityEndTimestamp_ = value;
      }
    }

    private long serverTimeSeconds_;
    /// <summary>
    /// 服务器当前时间UTC
    /// </summary>
    public long ServerTimeSeconds {
      get { return serverTimeSeconds_; }
      set {
        serverTimeSeconds_ = value;
      }
    }

    private long endCountDown_;
    /// <summary>
    /// 活动倒计时单位秒
    /// </summary>
    public long EndCountDown {
      get { return endCountDown_; }
      set {
        endCountDown_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask dailyTask_;
    /// <summary>
    /// 每日任务
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask DailyTask {
      get { return dailyTask_; }
      set {
        dailyTask_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolySelfRankInfo selfRankInfo_;
    /// <summary>
    /// 排行榜个人排名
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolySelfRankInfo SelfRankInfo {
      get { return selfRankInfo_; }
      set {
        selfRankInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoundNum);
      }
      completeRoundListRewards_.WriteTo(output, _repeated_completeRoundListRewards_codec);
      roundList_.WriteTo(output, _repeated_roundList_codec);
      if (TicketCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TicketCount);
      }
      if (ActivityStartTimestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ActivityStartTimestamp);
      }
      if (ActivityEndTimestamp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ActivityEndTimestamp);
      }
      if (ServerTimeSeconds != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ServerTimeSeconds);
      }
      if (EndCountDown != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(EndCountDown);
      }
      if (dailyTask_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(DailyTask);
      }
      if (selfRankInfo_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(SelfRankInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoundNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoundNum);
      }
      size += completeRoundListRewards_.CalculateSize(_repeated_completeRoundListRewards_codec);
      size += roundList_.CalculateSize(_repeated_roundList_codec);
      if (TicketCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TicketCount);
      }
      if (ActivityStartTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActivityStartTimestamp);
      }
      if (ActivityEndTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActivityEndTimestamp);
      }
      if (ServerTimeSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTimeSeconds);
      }
      if (EndCountDown != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndCountDown);
      }
      if (dailyTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyTask);
      }
      if (selfRankInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfRankInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoundNum = input.ReadUInt32();
            break;
          }
          case 18: {
            completeRoundListRewards_.AddEntriesFrom(input, _repeated_completeRoundListRewards_codec);
            break;
          }
          case 26: {
            roundList_.AddEntriesFrom(input, _repeated_roundList_codec);
            break;
          }
          case 32: {
            TicketCount = input.ReadUInt32();
            break;
          }
          case 40: {
            ActivityStartTimestamp = input.ReadInt64();
            break;
          }
          case 48: {
            ActivityEndTimestamp = input.ReadInt64();
            break;
          }
          case 56: {
            ServerTimeSeconds = input.ReadInt64();
            break;
          }
          case 64: {
            EndCountDown = input.ReadInt64();
            break;
          }
          case 74: {
            if (dailyTask_ == null) {
              dailyTask_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask();
            }
            input.ReadMessage(dailyTask_);
            break;
          }
          case 82: {
            if (selfRankInfo_ == null) {
              selfRankInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolySelfRankInfo();
            }
            input.ReadMessage(selfRankInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取某关卡的信息
  /// </summary>
  public sealed class CGetMonopolyRoundInfo : pb::IMessage {
    private static readonly pb::MessageParser<CGetMonopolyRoundInfo> _parser = new pb::MessageParser<CGetMonopolyRoundInfo>(() => new CGetMonopolyRoundInfo());
    public static pb::MessageParser<CGetMonopolyRoundInfo> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint roundId_;
    public uint RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    private bool isStart_;
    /// <summary>
    /// 开启某关卡时为true
    /// </summary>
    public bool IsStart {
      get { return isStart_; }
      set {
        isStart_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
      if (RoundId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoundId);
      }
      if (IsStart != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsStart);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      if (RoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoundId);
      }
      if (IsStart != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
          case 16: {
            RoundId = input.ReadUInt32();
            break;
          }
          case 24: {
            IsStart = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class SGetMonopolyRoundInfo : pb::IMessage {
    private static readonly pb::MessageParser<SGetMonopolyRoundInfo> _parser = new pb::MessageParser<SGetMonopolyRoundInfo>(() => new SGetMonopolyRoundInfo());
    public static pb::MessageParser<SGetMonopolyRoundInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo monopolyRoundInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo MonopolyRoundInfo {
      get { return monopolyRoundInfo_; }
      set {
        monopolyRoundInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_completeRoundListRewards_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> completeRoundListRewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 完成当前轮后的奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> CompleteRoundListRewards {
      get { return completeRoundListRewards_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask dailyTask_;
    /// <summary>
    /// 每日任务
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask DailyTask {
      get { return dailyTask_; }
      set {
        dailyTask_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolySelfRankInfo selfRankInfo_;
    /// <summary>
    /// 排行榜个人排名
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolySelfRankInfo SelfRankInfo {
      get { return selfRankInfo_; }
      set {
        selfRankInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (monopolyRoundInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MonopolyRoundInfo);
      }
      completeRoundListRewards_.WriteTo(output, _repeated_completeRoundListRewards_codec);
      if (dailyTask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DailyTask);
      }
      if (selfRankInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SelfRankInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (monopolyRoundInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonopolyRoundInfo);
      }
      size += completeRoundListRewards_.CalculateSize(_repeated_completeRoundListRewards_codec);
      if (dailyTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyTask);
      }
      if (selfRankInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfRankInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (monopolyRoundInfo_ == null) {
              monopolyRoundInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo();
            }
            input.ReadMessage(monopolyRoundInfo_);
            break;
          }
          case 18: {
            completeRoundListRewards_.AddEntriesFrom(input, _repeated_completeRoundListRewards_codec);
            break;
          }
          case 26: {
            if (dailyTask_ == null) {
              dailyTask_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask();
            }
            input.ReadMessage(dailyTask_);
            break;
          }
          case 34: {
            if (selfRankInfo_ == null) {
              selfRankInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolySelfRankInfo();
            }
            input.ReadMessage(selfRankInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大富翁spin
  /// </summary>
  public sealed class CMonopolySpin : pb::IMessage {
    private static readonly pb::MessageParser<CMonopolySpin> _parser = new pb::MessageParser<CMonopolySpin>(() => new CMonopolySpin());
    public static pb::MessageParser<CMonopolySpin> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint roundId_;
    public uint RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
      if (RoundId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoundId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      if (RoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoundId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
          case 16: {
            RoundId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SMonopolySpin : pb::IMessage {
    private static readonly pb::MessageParser<SMonopolySpin> _parser = new pb::MessageParser<SMonopolySpin>(() => new SMonopolySpin());
    public static pb::MessageParser<SMonopolySpin> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward coinReward_;
    /// <summary>
    ///金币奖励 里面多个item 每个item表一格给的金币
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward CoinReward {
      get { return coinReward_; }
      set {
        coinReward_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyGiftBox giftBoxReward_;
    /// <summary>
    /// 获得的宝箱奖励，可能为null
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyGiftBox GiftBoxReward {
      get { return giftBoxReward_; }
      set {
        giftBoxReward_ = value;
      }
    }

    private bool giftBoxFailedToPosition_;
    /// <summary>
    /// 宝箱是否进入位置失败了（原宝箱阵位都满了的情况）
    /// </summary>
    public bool GiftBoxFailedToPosition {
      get { return giftBoxFailedToPosition_; }
      set {
        giftBoxFailedToPosition_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_roundCompleteRewards_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> roundCompleteRewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 当前关卡完成后获得的奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> RoundCompleteRewards {
      get { return roundCompleteRewards_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_roundListCompleteRewards_codec
        = pb::FieldCodec.ForMessage(42, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> roundListCompleteRewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 当前关卡轮（1-6)完成后获得的奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> RoundListCompleteRewards {
      get { return roundListCompleteRewards_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo monopolyRoundInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo MonopolyRoundInfo {
      get { return monopolyRoundInfo_; }
      set {
        monopolyRoundInfo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private uint forwardStep_;
    /// <summary>
    /// 前进的步数
    /// </summary>
    public uint ForwardStep {
      get { return forwardStep_; }
      set {
        forwardStep_ = value;
      }
    }

    private uint giftBoxRewardPositionIndex_;
    /// <summary>
    /// 宝箱奖励进入了哪个阵位 index 从0开始
    /// </summary>
    public uint GiftBoxRewardPositionIndex {
      get { return giftBoxRewardPositionIndex_; }
      set {
        giftBoxRewardPositionIndex_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask dailyTask_;
    /// <summary>
    /// 每日任务
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask DailyTask {
      get { return dailyTask_; }
      set {
        dailyTask_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward rewardLatticeReward_;
    /// <summary>
    /// 跑到奖励格子上后领取的奖励（包括拼图碎片）
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward RewardLatticeReward {
      get { return rewardLatticeReward_; }
      set {
        rewardLatticeReward_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (coinReward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CoinReward);
      }
      if (giftBoxReward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GiftBoxReward);
      }
      if (GiftBoxFailedToPosition != false) {
        output.WriteRawTag(24);
        output.WriteBool(GiftBoxFailedToPosition);
      }
      roundCompleteRewards_.WriteTo(output, _repeated_roundCompleteRewards_codec);
      roundListCompleteRewards_.WriteTo(output, _repeated_roundListCompleteRewards_codec);
      if (monopolyRoundInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MonopolyRoundInfo);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(UserProfile);
      }
      if (ForwardStep != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ForwardStep);
      }
      if (GiftBoxRewardPositionIndex != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(GiftBoxRewardPositionIndex);
      }
      if (dailyTask_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DailyTask);
      }
      if (rewardLatticeReward_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(RewardLatticeReward);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (coinReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CoinReward);
      }
      if (giftBoxReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GiftBoxReward);
      }
      if (GiftBoxFailedToPosition != false) {
        size += 1 + 1;
      }
      size += roundCompleteRewards_.CalculateSize(_repeated_roundCompleteRewards_codec);
      size += roundListCompleteRewards_.CalculateSize(_repeated_roundListCompleteRewards_codec);
      if (monopolyRoundInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonopolyRoundInfo);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      if (ForwardStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ForwardStep);
      }
      if (GiftBoxRewardPositionIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftBoxRewardPositionIndex);
      }
      if (dailyTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyTask);
      }
      if (rewardLatticeReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardLatticeReward);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (coinReward_ == null) {
              coinReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(coinReward_);
            break;
          }
          case 18: {
            if (giftBoxReward_ == null) {
              giftBoxReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyGiftBox();
            }
            input.ReadMessage(giftBoxReward_);
            break;
          }
          case 24: {
            GiftBoxFailedToPosition = input.ReadBool();
            break;
          }
          case 34: {
            roundCompleteRewards_.AddEntriesFrom(input, _repeated_roundCompleteRewards_codec);
            break;
          }
          case 42: {
            roundListCompleteRewards_.AddEntriesFrom(input, _repeated_roundListCompleteRewards_codec);
            break;
          }
          case 50: {
            if (monopolyRoundInfo_ == null) {
              monopolyRoundInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo();
            }
            input.ReadMessage(monopolyRoundInfo_);
            break;
          }
          case 58: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 64: {
            ForwardStep = input.ReadUInt32();
            break;
          }
          case 72: {
            GiftBoxRewardPositionIndex = input.ReadUInt32();
            break;
          }
          case 82: {
            if (dailyTask_ == null) {
              dailyTask_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask();
            }
            input.ReadMessage(dailyTask_);
            break;
          }
          case 90: {
            if (rewardLatticeReward_ == null) {
              rewardLatticeReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(rewardLatticeReward_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大富翁 瞬间传送
  /// </summary>
  public sealed class CMonopolyTeleport : pb::IMessage {
    private static readonly pb::MessageParser<CMonopolyTeleport> _parser = new pb::MessageParser<CMonopolyTeleport>(() => new CMonopolyTeleport());
    public static pb::MessageParser<CMonopolyTeleport> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint forwardStep_;
    /// <summary>
    ///前进多少步
    /// </summary>
    public uint ForwardStep {
      get { return forwardStep_; }
      set {
        forwardStep_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
      if (ForwardStep != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ForwardStep);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      if (ForwardStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ForwardStep);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
          case 16: {
            ForwardStep = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SMonopolyTeleport : pb::IMessage {
    private static readonly pb::MessageParser<SMonopolyTeleport> _parser = new pb::MessageParser<SMonopolyTeleport>(() => new SMonopolyTeleport());
    public static pb::MessageParser<SMonopolyTeleport> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward coinReward_;
    /// <summary>
    ///金币奖励 里面多个item 每个item表一格给的金币
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward CoinReward {
      get { return coinReward_; }
      set {
        coinReward_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyGiftBox giftBoxReward_;
    /// <summary>
    /// 获得的宝箱奖励，可能为null
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyGiftBox GiftBoxReward {
      get { return giftBoxReward_; }
      set {
        giftBoxReward_ = value;
      }
    }

    private bool giftBoxFailedToPosition_;
    /// <summary>
    /// 宝箱是否进入位置失败了（原宝箱阵位都满了的情况）
    /// </summary>
    public bool GiftBoxFailedToPosition {
      get { return giftBoxFailedToPosition_; }
      set {
        giftBoxFailedToPosition_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_roundCompleteRewards_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> roundCompleteRewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 当前关卡完成后获得的奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> RoundCompleteRewards {
      get { return roundCompleteRewards_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_roundListCompleteRewards_codec
        = pb::FieldCodec.ForMessage(42, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> roundListCompleteRewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 当前关卡轮（1-6)完成后获得的奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> RoundListCompleteRewards {
      get { return roundListCompleteRewards_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo monopolyRoundInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo MonopolyRoundInfo {
      get { return monopolyRoundInfo_; }
      set {
        monopolyRoundInfo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private uint forwardStep_;
    /// <summary>
    /// 前进的步数
    /// </summary>
    public uint ForwardStep {
      get { return forwardStep_; }
      set {
        forwardStep_ = value;
      }
    }

    private uint giftBoxRewardPositionIndex_;
    /// <summary>
    /// 宝箱奖励进入了哪个阵位 index 从0开始
    /// </summary>
    public uint GiftBoxRewardPositionIndex {
      get { return giftBoxRewardPositionIndex_; }
      set {
        giftBoxRewardPositionIndex_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask dailyTask_;
    /// <summary>
    /// 每日任务
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask DailyTask {
      get { return dailyTask_; }
      set {
        dailyTask_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward rewardLatticeReward_;
    /// <summary>
    /// 跑到奖励格子上后领取的奖励（包括拼图碎片）
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward RewardLatticeReward {
      get { return rewardLatticeReward_; }
      set {
        rewardLatticeReward_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (coinReward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CoinReward);
      }
      if (giftBoxReward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GiftBoxReward);
      }
      if (GiftBoxFailedToPosition != false) {
        output.WriteRawTag(24);
        output.WriteBool(GiftBoxFailedToPosition);
      }
      roundCompleteRewards_.WriteTo(output, _repeated_roundCompleteRewards_codec);
      roundListCompleteRewards_.WriteTo(output, _repeated_roundListCompleteRewards_codec);
      if (monopolyRoundInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MonopolyRoundInfo);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(UserProfile);
      }
      if (ForwardStep != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ForwardStep);
      }
      if (GiftBoxRewardPositionIndex != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(GiftBoxRewardPositionIndex);
      }
      if (dailyTask_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DailyTask);
      }
      if (rewardLatticeReward_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(RewardLatticeReward);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (coinReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CoinReward);
      }
      if (giftBoxReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GiftBoxReward);
      }
      if (GiftBoxFailedToPosition != false) {
        size += 1 + 1;
      }
      size += roundCompleteRewards_.CalculateSize(_repeated_roundCompleteRewards_codec);
      size += roundListCompleteRewards_.CalculateSize(_repeated_roundListCompleteRewards_codec);
      if (monopolyRoundInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonopolyRoundInfo);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      if (ForwardStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ForwardStep);
      }
      if (GiftBoxRewardPositionIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GiftBoxRewardPositionIndex);
      }
      if (dailyTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyTask);
      }
      if (rewardLatticeReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardLatticeReward);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (coinReward_ == null) {
              coinReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(coinReward_);
            break;
          }
          case 18: {
            if (giftBoxReward_ == null) {
              giftBoxReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyGiftBox();
            }
            input.ReadMessage(giftBoxReward_);
            break;
          }
          case 24: {
            GiftBoxFailedToPosition = input.ReadBool();
            break;
          }
          case 34: {
            roundCompleteRewards_.AddEntriesFrom(input, _repeated_roundCompleteRewards_codec);
            break;
          }
          case 42: {
            roundListCompleteRewards_.AddEntriesFrom(input, _repeated_roundListCompleteRewards_codec);
            break;
          }
          case 50: {
            if (monopolyRoundInfo_ == null) {
              monopolyRoundInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo();
            }
            input.ReadMessage(monopolyRoundInfo_);
            break;
          }
          case 58: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 64: {
            ForwardStep = input.ReadUInt32();
            break;
          }
          case 72: {
            GiftBoxRewardPositionIndex = input.ReadUInt32();
            break;
          }
          case 82: {
            if (dailyTask_ == null) {
              dailyTask_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask();
            }
            input.ReadMessage(dailyTask_);
            break;
          }
          case 90: {
            if (rewardLatticeReward_ == null) {
              rewardLatticeReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(rewardLatticeReward_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///大富翁 再次射击
  /// </summary>
  public sealed class CMonopolyShootAgain : pb::IMessage {
    private static readonly pb::MessageParser<CMonopolyShootAgain> _parser = new pb::MessageParser<CMonopolyShootAgain>(() => new CMonopolyShootAgain());
    public static pb::MessageParser<CMonopolyShootAgain> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private uint roundId_;
    public uint RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    private string freeKey_ = "";
    /// <summary>
    ///免费的标识，如adId
    /// </summary>
    public string FreeKey {
      get { return freeKey_; }
      set {
        freeKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
      if (RoundId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RoundId);
      }
      if (FreeKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FreeKey);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      if (RoundId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoundId);
      }
      if (FreeKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FreeKey);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
          case 16: {
            RoundId = input.ReadUInt32();
            break;
          }
          case 26: {
            FreeKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SMonopolyShootAgain : pb::IMessage {
    private static readonly pb::MessageParser<SMonopolyShootAgain> _parser = new pb::MessageParser<SMonopolyShootAgain>(() => new SMonopolyShootAgain());
    public static pb::MessageParser<SMonopolyShootAgain> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_roundCompleteRewards_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> roundCompleteRewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 当前关卡完成后获得的奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> RoundCompleteRewards {
      get { return roundCompleteRewards_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.Reward> _repeated_roundListCompleteRewards_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.Reward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> roundListCompleteRewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward>();
    /// <summary>
    /// 当前关卡轮（1-6)完成后获得的奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.Reward> RoundListCompleteRewards {
      get { return roundListCompleteRewards_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo monopolyRoundInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo MonopolyRoundInfo {
      get { return monopolyRoundInfo_; }
      set {
        monopolyRoundInfo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask dailyTask_;
    /// <summary>
    /// 每日任务
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask DailyTask {
      get { return dailyTask_; }
      set {
        dailyTask_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      roundCompleteRewards_.WriteTo(output, _repeated_roundCompleteRewards_codec);
      roundListCompleteRewards_.WriteTo(output, _repeated_roundListCompleteRewards_codec);
      if (monopolyRoundInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MonopolyRoundInfo);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserProfile);
      }
      if (dailyTask_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DailyTask);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += roundCompleteRewards_.CalculateSize(_repeated_roundCompleteRewards_codec);
      size += roundListCompleteRewards_.CalculateSize(_repeated_roundListCompleteRewards_codec);
      if (monopolyRoundInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonopolyRoundInfo);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      if (dailyTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyTask);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            roundCompleteRewards_.AddEntriesFrom(input, _repeated_roundCompleteRewards_codec);
            break;
          }
          case 18: {
            roundListCompleteRewards_.AddEntriesFrom(input, _repeated_roundListCompleteRewards_codec);
            break;
          }
          case 26: {
            if (monopolyRoundInfo_ == null) {
              monopolyRoundInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo();
            }
            input.ReadMessage(monopolyRoundInfo_);
            break;
          }
          case 34: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 42: {
            if (dailyTask_ == null) {
              dailyTask_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask();
            }
            input.ReadMessage(dailyTask_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取大富翁的支付项信息（卖票）
  /// </summary>
  public sealed class CMonopolyTicketPaymentInfo : pb::IMessage {
    private static readonly pb::MessageParser<CMonopolyTicketPaymentInfo> _parser = new pb::MessageParser<CMonopolyTicketPaymentInfo>(() => new CMonopolyTicketPaymentInfo());
    public static pb::MessageParser<CMonopolyTicketPaymentInfo> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SMonopolyTicketPaymentInfo : pb::IMessage {
    private static readonly pb::MessageParser<SMonopolyTicketPaymentInfo> _parser = new pb::MessageParser<SMonopolyTicketPaymentInfo>(() => new SMonopolyTicketPaymentInfo());
    public static pb::MessageParser<SMonopolyTicketPaymentInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig payItem_;
    public global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig PayItem {
      get { return payItem_; }
      set {
        payItem_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig> _repeated_boosterPayItems_codec
        = pb::FieldCodec.ForMessage(18, global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig> boosterPayItems_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig>();
    /// <summary>
    ///booster支付项列表
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig> BoosterPayItems {
      get { return boosterPayItems_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (payItem_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PayItem);
      }
      boosterPayItems_.WriteTo(output, _repeated_boosterPayItems_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (payItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PayItem);
      }
      size += boosterPayItems_.CalculateSize(_repeated_boosterPayItems_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (payItem_ == null) {
              payItem_ = new global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig();
            }
            input.ReadMessage(payItem_);
            break;
          }
          case 18: {
            boosterPayItems_.AddEntriesFrom(input, _repeated_boosterPayItems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///开宝箱(倒计时不够的自动扣钻石)
  /// </summary>
  public sealed class CMonopolyOpenGiftBox : pb::IMessage {
    private static readonly pb::MessageParser<CMonopolyOpenGiftBox> _parser = new pb::MessageParser<CMonopolyOpenGiftBox>(() => new CMonopolyOpenGiftBox());
    public static pb::MessageParser<CMonopolyOpenGiftBox> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private ulong uinonSign_;
    public ulong UinonSign {
      get { return uinonSign_; }
      set {
        uinonSign_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
      if (UinonSign != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UinonSign);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      if (UinonSign != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UinonSign);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
          case 16: {
            UinonSign = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class SMonopolyOpenGiftBox : pb::IMessage {
    private static readonly pb::MessageParser<SMonopolyOpenGiftBox> _parser = new pb::MessageParser<SMonopolyOpenGiftBox>(() => new SMonopolyOpenGiftBox());
    public static pb::MessageParser<SMonopolyOpenGiftBox> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo monopolyRoundInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo MonopolyRoundInfo {
      get { return monopolyRoundInfo_; }
      set {
        monopolyRoundInfo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask dailyTask_;
    /// <summary>
    /// 每日任务
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask DailyTask {
      get { return dailyTask_; }
      set {
        dailyTask_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (reward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Reward);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
      if (monopolyRoundInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MonopolyRoundInfo);
      }
      if (dailyTask_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DailyTask);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      if (monopolyRoundInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonopolyRoundInfo);
      }
      if (dailyTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyTask);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reward_ == null) {
              reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(reward_);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 26: {
            if (monopolyRoundInfo_ == null) {
              monopolyRoundInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyRoundInfo();
            }
            input.ReadMessage(monopolyRoundInfo_);
            break;
          }
          case 34: {
            if (dailyTask_ == null) {
              dailyTask_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask();
            }
            input.ReadMessage(dailyTask_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取玩家的每日任务信息，仅打开任务列表且挂机跨天时调用
  /// </summary>
  public sealed class CGetMonopolyDailyTaskInfo : pb::IMessage {
    private static readonly pb::MessageParser<CGetMonopolyDailyTaskInfo> _parser = new pb::MessageParser<CGetMonopolyDailyTaskInfo>(() => new CGetMonopolyDailyTaskInfo());
    public static pb::MessageParser<CGetMonopolyDailyTaskInfo> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SGetMonopolyDailyTaskInfo : pb::IMessage {
    private static readonly pb::MessageParser<SGetMonopolyDailyTaskInfo> _parser = new pb::MessageParser<SGetMonopolyDailyTaskInfo>(() => new SGetMonopolyDailyTaskInfo());
    public static pb::MessageParser<SGetMonopolyDailyTaskInfo> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask dailyTask_;
    /// <summary>
    /// 每日任务
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask DailyTask {
      get { return dailyTask_; }
      set {
        dailyTask_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (dailyTask_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DailyTask);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (dailyTask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyTask);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (dailyTask_ == null) {
              dailyTask_ = new global::DragonU3DSDK.Network.API.ILProtocol.MonopolyDailyTask();
            }
            input.ReadMessage(dailyTask_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 新手引导进度更新 
  /// </summary>
  public sealed class CMonopolyChangeBeginnerGuideStep : pb::IMessage {
    private static readonly pb::MessageParser<CMonopolyChangeBeginnerGuideStep> _parser = new pb::MessageParser<CMonopolyChangeBeginnerGuideStep>(() => new CMonopolyChangeBeginnerGuideStep());
    public static pb::MessageParser<CMonopolyChangeBeginnerGuideStep> Parser { get { return _parser; } }

    private uint beginnerGuideStep_;
    public uint BeginnerGuideStep {
      get { return beginnerGuideStep_; }
      set {
        beginnerGuideStep_ = value;
      }
    }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeginnerGuideStep != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BeginnerGuideStep);
      }
      if (ActivityId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActivityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeginnerGuideStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeginnerGuideStep);
      }
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeginnerGuideStep = input.ReadUInt32();
            break;
          }
          case 18: {
            ActivityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SMonopolyChangeBeginnerGuideStep : pb::IMessage {
    private static readonly pb::MessageParser<SMonopolyChangeBeginnerGuideStep> _parser = new pb::MessageParser<SMonopolyChangeBeginnerGuideStep>(() => new SMonopolyChangeBeginnerGuideStep());
    public static pb::MessageParser<SMonopolyChangeBeginnerGuideStep> Parser { get { return _parser; } }

    private uint beginnerGuideStep_;
    public uint BeginnerGuideStep {
      get { return beginnerGuideStep_; }
      set {
        beginnerGuideStep_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeginnerGuideStep != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BeginnerGuideStep);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeginnerGuideStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BeginnerGuideStep);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeginnerGuideStep = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// spin返回值中的system_content增加：大富翁的能量条
  /// </summary>
  public sealed class MonopolyEnergyInfoWhenSpin : pb::IMessage {
    private static readonly pb::MessageParser<MonopolyEnergyInfoWhenSpin> _parser = new pb::MessageParser<MonopolyEnergyInfoWhenSpin>(() => new MonopolyEnergyInfoWhenSpin());
    public static pb::MessageParser<MonopolyEnergyInfoWhenSpin> Parser { get { return _parser; } }

    private uint energy_;
    /// <summary>
    ///当前能量
    /// </summary>
    public uint Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
    /// <summary>
    ///奖励的门票
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    private uint ticketCount_;
    /// <summary>
    ///目前可用的票数
    /// </summary>
    public uint TicketCount {
      get { return ticketCount_; }
      set {
        ticketCount_ = value;
      }
    }

    private uint addedCountCurrent_;
    /// <summary>
    /// 目前已经加了多少票了
    /// </summary>
    public uint AddedCountCurrent {
      get { return addedCountCurrent_; }
      set {
        addedCountCurrent_ = value;
      }
    }

    private uint addedCountMax_;
    /// <summary>
    /// 最多能加多少票
    /// </summary>
    public uint AddedCountMax {
      get { return addedCountMax_; }
      set {
        addedCountMax_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Energy != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Energy);
      }
      if (reward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reward);
      }
      if (TicketCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TicketCount);
      }
      if (AddedCountCurrent != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AddedCountCurrent);
      }
      if (AddedCountMax != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(AddedCountMax);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Energy);
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (TicketCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TicketCount);
      }
      if (AddedCountCurrent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddedCountCurrent);
      }
      if (AddedCountMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddedCountMax);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Energy = input.ReadUInt32();
            break;
          }
          case 18: {
            if (reward_ == null) {
              reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(reward_);
            break;
          }
          case 24: {
            TicketCount = input.ReadUInt32();
            break;
          }
          case 32: {
            AddedCountCurrent = input.ReadUInt32();
            break;
          }
          case 40: {
            AddedCountMax = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大富翁第三期
  /// </summary>
  public sealed class MonopolyPuzzle : pb::IMessage {
    private static readonly pb::MessageParser<MonopolyPuzzle> _parser = new pb::MessageParser<MonopolyPuzzle>(() => new MonopolyPuzzle());
    public static pb::MessageParser<MonopolyPuzzle> Parser { get { return _parser; } }

    private uint num_;
    /// <summary>
    /// 编号 1-6
    /// </summary>
    public uint Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    private bool isLocked_;
    /// <summary>
    /// 是否被锁住
    /// </summary>
    public bool IsLocked {
      get { return isLocked_; }
      set {
        isLocked_ = value;
      }
    }

    private bool isCurrent_;
    /// <summary>
    /// 是否是当前图
    /// </summary>
    public bool IsCurrent {
      get { return isCurrent_; }
      set {
        isCurrent_ = value;
      }
    }

    private static readonly pb::FieldCodec<bool> _repeated_positionsIsFill_codec
        = pb::FieldCodec.ForBool(34);
    private readonly pbc::RepeatedField<bool> positionsIsFill_ = new pbc::RepeatedField<bool>();
    /// <summary>
    ///对应位置上是否被填充  长度为9
    /// </summary>
    public pbc::RepeatedField<bool> PositionsIsFill {
      get { return positionsIsFill_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
    /// <summary>
    /// 集满的奖励
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    private uint status_;
    /// <summary>
    /// 状态 0未集满 1已集满，待领奖 2已领奖
    /// </summary>
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Num);
      }
      if (IsLocked != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsLocked);
      }
      if (IsCurrent != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsCurrent);
      }
      positionsIsFill_.WriteTo(output, _repeated_positionsIsFill_codec);
      if (reward_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Reward);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Status);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Num);
      }
      if (IsLocked != false) {
        size += 1 + 1;
      }
      if (IsCurrent != false) {
        size += 1 + 1;
      }
      size += positionsIsFill_.CalculateSize(_repeated_positionsIsFill_codec);
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Num = input.ReadUInt32();
            break;
          }
          case 16: {
            IsLocked = input.ReadBool();
            break;
          }
          case 24: {
            IsCurrent = input.ReadBool();
            break;
          }
          case 34:
          case 32: {
            positionsIsFill_.AddEntriesFrom(input, _repeated_positionsIsFill_codec);
            break;
          }
          case 42: {
            if (reward_ == null) {
              reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(reward_);
            break;
          }
          case 48: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大富翁拼图信息
  /// </summary>
  public sealed class CGetMonopolyPuzzleListInfo : pb::IMessage {
    private static readonly pb::MessageParser<CGetMonopolyPuzzleListInfo> _parser = new pb::MessageParser<CGetMonopolyPuzzleListInfo>(() => new CGetMonopolyPuzzleListInfo());
    public static pb::MessageParser<CGetMonopolyPuzzleListInfo> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SGetMonopolyPuzzleListInfo : pb::IMessage {
    private static readonly pb::MessageParser<SGetMonopolyPuzzleListInfo> _parser = new pb::MessageParser<SGetMonopolyPuzzleListInfo>(() => new SGetMonopolyPuzzleListInfo());
    public static pb::MessageParser<SGetMonopolyPuzzleListInfo> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyPuzzle> _repeated_puzzleList_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.MonopolyPuzzle.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyPuzzle> puzzleList_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyPuzzle>();
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.MonopolyPuzzle> PuzzleList {
      get { return puzzleList_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      puzzleList_.WriteTo(output, _repeated_puzzleList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += puzzleList_.CalculateSize(_repeated_puzzleList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            puzzleList_.AddEntriesFrom(input, _repeated_puzzleList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取大富翁拼图的奖励
  /// </summary>
  public sealed class CCollectMonopolyPuzzleReward : pb::IMessage {
    private static readonly pb::MessageParser<CCollectMonopolyPuzzleReward> _parser = new pb::MessageParser<CCollectMonopolyPuzzleReward>(() => new CCollectMonopolyPuzzleReward());
    public static pb::MessageParser<CCollectMonopolyPuzzleReward> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SCollectMonopolyPuzzleReward : pb::IMessage {
    private static readonly pb::MessageParser<SCollectMonopolyPuzzleReward> _parser = new pb::MessageParser<SCollectMonopolyPuzzleReward>(() => new SCollectMonopolyPuzzleReward());
    public static pb::MessageParser<SCollectMonopolyPuzzleReward> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward puzzleFinishedReward_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward PuzzleFinishedReward {
      get { return puzzleFinishedReward_; }
      set {
        puzzleFinishedReward_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.SGetMonopolyPuzzleListInfo getMonopolyPuzzleListInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.SGetMonopolyPuzzleListInfo GetMonopolyPuzzleListInfo {
      get { return getMonopolyPuzzleListInfo_; }
      set {
        getMonopolyPuzzleListInfo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (puzzleFinishedReward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PuzzleFinishedReward);
      }
      if (getMonopolyPuzzleListInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GetMonopolyPuzzleListInfo);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (puzzleFinishedReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PuzzleFinishedReward);
      }
      if (getMonopolyPuzzleListInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetMonopolyPuzzleListInfo);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (puzzleFinishedReward_ == null) {
              puzzleFinishedReward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(puzzleFinishedReward_);
            break;
          }
          case 26: {
            if (getMonopolyPuzzleListInfo_ == null) {
              getMonopolyPuzzleListInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.SGetMonopolyPuzzleListInfo();
            }
            input.ReadMessage(getMonopolyPuzzleListInfo_);
            break;
          }
          case 34: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大富翁排行榜
  /// </summary>
  public sealed class CGetMonopolyLeaderboard : pb::IMessage {
    private static readonly pb::MessageParser<CGetMonopolyLeaderboard> _parser = new pb::MessageParser<CGetMonopolyLeaderboard>(() => new CGetMonopolyLeaderboard());
    public static pb::MessageParser<CGetMonopolyLeaderboard> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SGetMonopolyLeaderboard : pb::IMessage {
    private static readonly pb::MessageParser<SGetMonopolyLeaderboard> _parser = new pb::MessageParser<SGetMonopolyLeaderboard>(() => new SGetMonopolyLeaderboard());
    public static pb::MessageParser<SGetMonopolyLeaderboard> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SGetMonopolyLeaderboard.Types.Rank> _repeated_ranks_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.SGetMonopolyLeaderboard.Types.Rank.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetMonopolyLeaderboard.Types.Rank> ranks_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetMonopolyLeaderboard.Types.Rank>();
    /// <summary>
    /// 排行榜
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetMonopolyLeaderboard.Types.Rank> Ranks {
      get { return ranks_; }
    }

    private uint myRank_;
    /// <summary>
    /// 0是未上榜
    /// </summary>
    public uint MyRank {
      get { return myRank_; }
      set {
        myRank_ = value;
      }
    }

    private ulong coins_;
    /// <summary>
    /// 奖池金币
    /// </summary>
    public ulong Coins {
      get { return coins_; }
      set {
        coins_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SGetMonopolyLeaderboard.Types.RankReward> _repeated_rankRewards_codec
        = pb::FieldCodec.ForMessage(34, global::DragonU3DSDK.Network.API.ILProtocol.SGetMonopolyLeaderboard.Types.RankReward.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetMonopolyLeaderboard.Types.RankReward> rankRewards_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetMonopolyLeaderboard.Types.RankReward>();
    /// <summary>
    /// 排行奖励
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetMonopolyLeaderboard.Types.RankReward> RankRewards {
      get { return rankRewards_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      ranks_.WriteTo(output, _repeated_ranks_codec);
      if (MyRank != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MyRank);
      }
      if (Coins != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Coins);
      }
      rankRewards_.WriteTo(output, _repeated_rankRewards_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += ranks_.CalculateSize(_repeated_ranks_codec);
      if (MyRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MyRank);
      }
      if (Coins != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Coins);
      }
      size += rankRewards_.CalculateSize(_repeated_rankRewards_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ranks_.AddEntriesFrom(input, _repeated_ranks_codec);
            break;
          }
          case 16: {
            MyRank = input.ReadUInt32();
            break;
          }
          case 24: {
            Coins = input.ReadUInt64();
            break;
          }
          case 34: {
            rankRewards_.AddEntriesFrom(input, _repeated_rankRewards_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SGetMonopolyLeaderboard message type.</summary>
    public static class Types {
      public sealed class Rank : pb::IMessage {
        private static readonly pb::MessageParser<Rank> _parser = new pb::MessageParser<Rank>(() => new Rank());
        public static pb::MessageParser<Rank> Parser { get { return _parser; } }

        private string name_ = "";
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private uint avatarId_;
        /// <summary>
        /// 默认头像
        /// </summary>
        public uint AvatarId {
          get { return avatarId_; }
          set {
            avatarId_ = value;
          }
        }

        private ulong score_;
        public ulong Score {
          get { return score_; }
          set {
            score_ = value;
          }
        }

        private string avatarUrl_ = "";
        /// <summary>
        /// facebook头像url，没有就是空
        /// </summary>
        public string AvatarUrl {
          get { return avatarUrl_; }
          set {
            avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private ulong rank_;
        /// <summary>
        /// 玩家排名 如 1，2，3
        /// </summary>
        public ulong Rank_ {
          get { return rank_; }
          set {
            rank_ = value;
          }
        }

        private ulong playerId_;
        /// <summary>
        /// 玩家playerid 机器人的为0
        /// </summary>
        public ulong PlayerId {
          get { return playerId_; }
          set {
            playerId_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (AvatarId != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(AvatarId);
          }
          if (Score != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(Score);
          }
          if (AvatarUrl.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(AvatarUrl);
          }
          if (Rank_ != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(Rank_);
          }
          if (PlayerId != 0UL) {
            output.WriteRawTag(56);
            output.WriteUInt64(PlayerId);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (AvatarId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AvatarId);
          }
          if (Score != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Score);
          }
          if (AvatarUrl.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
          }
          if (Rank_ != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Rank_);
          }
          if (PlayerId != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                AvatarId = input.ReadUInt32();
                break;
              }
              case 32: {
                Score = input.ReadUInt64();
                break;
              }
              case 42: {
                AvatarUrl = input.ReadString();
                break;
              }
              case 48: {
                Rank_ = input.ReadUInt64();
                break;
              }
              case 56: {
                PlayerId = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class RankReward : pb::IMessage {
        private static readonly pb::MessageParser<RankReward> _parser = new pb::MessageParser<RankReward>(() => new RankReward());
        public static pb::MessageParser<RankReward> Parser { get { return _parser; } }

        private uint from_;
        public uint From {
          get { return from_; }
          set {
            from_ = value;
          }
        }

        private uint to_;
        public uint To {
          get { return to_; }
          set {
            to_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
        public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
          get { return reward_; }
          set {
            reward_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (From != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(From);
          }
          if (To != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(To);
          }
          if (reward_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Reward);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (From != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(From);
          }
          if (To != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(To);
          }
          if (reward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                From = input.ReadUInt32();
                break;
              }
              case 16: {
                To = input.ReadUInt32();
                break;
              }
              case 26: {
                if (reward_ == null) {
                  reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
                }
                input.ReadMessage(reward_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class MonopolySelfRankInfo : pb::IMessage {
    private static readonly pb::MessageParser<MonopolySelfRankInfo> _parser = new pb::MessageParser<MonopolySelfRankInfo>(() => new MonopolySelfRankInfo());
    public static pb::MessageParser<MonopolySelfRankInfo> Parser { get { return _parser; } }

    private uint myRank_;
    /// <summary>
    /// 0是未上榜
    /// </summary>
    public uint MyRank {
      get { return myRank_; }
      set {
        myRank_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MyRank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MyRank);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MyRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MyRank);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MyRank = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取结束的大富翁排行榜的奖励，大富翁结束后调用一次; 玩家再次登录时再校验一次
  /// </summary>
  public sealed class CGetMonopolyLeaderboardReward : pb::IMessage {
    private static readonly pb::MessageParser<CGetMonopolyLeaderboardReward> _parser = new pb::MessageParser<CGetMonopolyLeaderboardReward>(() => new CGetMonopolyLeaderboardReward());
    public static pb::MessageParser<CGetMonopolyLeaderboardReward> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SGetMonopolyLeaderboardReward : pb::IMessage {
    private static readonly pb::MessageParser<SGetMonopolyLeaderboardReward> _parser = new pb::MessageParser<SGetMonopolyLeaderboardReward>(() => new SGetMonopolyLeaderboardReward());
    public static pb::MessageParser<SGetMonopolyLeaderboardReward> Parser { get { return _parser; } }

    private bool success_;
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取将要及正在开放的活动的开启时间
  /// </summary>
  public sealed class CGetActivitiesOpenTime : pb::IMessage {
    private static readonly pb::MessageParser<CGetActivitiesOpenTime> _parser = new pb::MessageParser<CGetActivitiesOpenTime>(() => new CGetActivitiesOpenTime());
    public static pb::MessageParser<CGetActivitiesOpenTime> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SGetActivitiesOpenTime : pb::IMessage {
    private static readonly pb::MessageParser<SGetActivitiesOpenTime> _parser = new pb::MessageParser<SGetActivitiesOpenTime>(() => new SGetActivitiesOpenTime());
    public static pb::MessageParser<SGetActivitiesOpenTime> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.SGetActivitiesOpenTime.Types.ActivityTimeConfig> _repeated_activitiesOpenTimes_codec
        = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.SGetActivitiesOpenTime.Types.ActivityTimeConfig.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetActivitiesOpenTime.Types.ActivityTimeConfig> activitiesOpenTimes_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetActivitiesOpenTime.Types.ActivityTimeConfig>();
    /// <summary>
    ///将会开启的活动及时间
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.SGetActivitiesOpenTime.Types.ActivityTimeConfig> ActivitiesOpenTimes {
      get { return activitiesOpenTimes_; }
    }

    private uint serverTimeSeconds_;
    public uint ServerTimeSeconds {
      get { return serverTimeSeconds_; }
      set {
        serverTimeSeconds_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      activitiesOpenTimes_.WriteTo(output, _repeated_activitiesOpenTimes_codec);
      if (ServerTimeSeconds != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ServerTimeSeconds);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += activitiesOpenTimes_.CalculateSize(_repeated_activitiesOpenTimes_codec);
      if (ServerTimeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTimeSeconds);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            activitiesOpenTimes_.AddEntriesFrom(input, _repeated_activitiesOpenTimes_codec);
            break;
          }
          case 16: {
            ServerTimeSeconds = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SGetActivitiesOpenTime message type.</summary>
    public static class Types {
      public sealed class ActivityTimeConfig : pb::IMessage {
        private static readonly pb::MessageParser<ActivityTimeConfig> _parser = new pb::MessageParser<ActivityTimeConfig>(() => new ActivityTimeConfig());
        public static pb::MessageParser<ActivityTimeConfig> Parser { get { return _parser; } }

        private string activityId_ = "";
        public string ActivityId {
          get { return activityId_; }
          set {
            activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private string activityType_ = "";
        public string ActivityType {
          get { return activityType_; }
          set {
            activityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private uint startTime_;
        public uint StartTime {
          get { return startTime_; }
          set {
            startTime_ = value;
          }
        }

        private uint endTime_;
        public uint EndTime {
          get { return endTime_; }
          set {
            endTime_ = value;
          }
        }

        private uint rewardEndTime_;
        public uint RewardEndTime {
          get { return rewardEndTime_; }
          set {
            rewardEndTime_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (ActivityId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ActivityId);
          }
          if (ActivityType.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ActivityType);
          }
          if (StartTime != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(StartTime);
          }
          if (EndTime != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(EndTime);
          }
          if (RewardEndTime != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(RewardEndTime);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (ActivityId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
          }
          if (ActivityType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityType);
          }
          if (StartTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime);
          }
          if (EndTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndTime);
          }
          if (RewardEndTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardEndTime);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                ActivityId = input.ReadString();
                break;
              }
              case 18: {
                ActivityType = input.ReadString();
                break;
              }
              case 24: {
                StartTime = input.ReadUInt32();
                break;
              }
              case 32: {
                EndTime = input.ReadUInt32();
                break;
              }
              case 40: {
                RewardEndTime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// rushpass 领取当前可领取的奖励
  /// </summary>
  public sealed class CClaimRushPassRewards : pb::IMessage {
    private static readonly pb::MessageParser<CClaimRushPassRewards> _parser = new pb::MessageParser<CClaimRushPassRewards>(() => new CClaimRushPassRewards());
    public static pb::MessageParser<CClaimRushPassRewards> Parser { get { return _parser; } }

    private string activityId_ = "";
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SClaimRushPassRewards : pb::IMessage {
    private static readonly pb::MessageParser<SClaimRushPassRewards> _parser = new pb::MessageParser<SClaimRushPassRewards>(() => new SClaimRushPassRewards());
    public static pb::MessageParser<SClaimRushPassRewards> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward freeRewardGot_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward FreeRewardGot {
      get { return freeRewardGot_; }
      set {
        freeRewardGot_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward paidRewardGot_;
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward PaidRewardGot {
      get { return paidRewardGot_; }
      set {
        paidRewardGot_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo rushPassPopUpInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo RushPassPopUpInfo {
      get { return rushPassPopUpInfo_; }
      set {
        rushPassPopUpInfo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (freeRewardGot_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FreeRewardGot);
      }
      if (paidRewardGot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PaidRewardGot);
      }
      if (rushPassPopUpInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RushPassPopUpInfo);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserProfile);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (freeRewardGot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreeRewardGot);
      }
      if (paidRewardGot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaidRewardGot);
      }
      if (rushPassPopUpInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RushPassPopUpInfo);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (freeRewardGot_ == null) {
              freeRewardGot_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(freeRewardGot_);
            break;
          }
          case 18: {
            if (paidRewardGot_ == null) {
              paidRewardGot_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(paidRewardGot_);
            break;
          }
          case 26: {
            if (rushPassPopUpInfo_ == null) {
              rushPassPopUpInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.RushPassPopUpInfo();
            }
            input.ReadMessage(rushPassPopUpInfo_);
            break;
          }
          case 34: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
