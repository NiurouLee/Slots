// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_profile.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Enums
  /// <summary>
  /// 对应userProfile里面的marks标记，按位存储，数量有限，先到先得
  /// </summary>
  public enum MarkType {
    /// <summary>
    /// facebook绑定奖励是否已领取
    /// </summary>
    MarkBindFacebookReward = 0,
    /// <summary>
    /// apple绑定奖励是否已领取
    /// </summary>
    MarkBindAppleReward = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 用户统计信息
  /// </summary>
  public sealed class UserStatInfo : pb::IMessage {
    private static readonly pb::MessageParser<UserStatInfo> _parser = new pb::MessageParser<UserStatInfo>(() => new UserStatInfo());
    public static pb::MessageParser<UserStatInfo> Parser { get { return _parser; } }

    private ulong totalPlay_;
    /// <summary>
    /// </summary>
    public ulong TotalPlay {
      get { return totalPlay_; }
      set {
        totalPlay_ = value;
      }
    }

    private ulong totalWin_;
    /// <summary>
    /// </summary>
    public ulong TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    private ulong totalPay_;
    /// <summary>
    /// 总付费
    /// </summary>
    public ulong TotalPay {
      get { return totalPay_; }
      set {
        totalPay_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalPlay != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TotalPlay);
      }
      if (TotalWin != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TotalWin);
      }
      if (TotalPay != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TotalPay);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (TotalPlay != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalPlay);
      }
      if (TotalWin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalWin);
      }
      if (TotalPay != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalPay);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalPlay = input.ReadUInt64();
            break;
          }
          case 16: {
            TotalWin = input.ReadUInt64();
            break;
          }
          case 24: {
            TotalPay = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 用户等级结构
  /// </summary>
  public sealed class UserLevelInfo : pb::IMessage {
    private static readonly pb::MessageParser<UserLevelInfo> _parser = new pb::MessageParser<UserLevelInfo>(() => new UserLevelInfo());
    public static pb::MessageParser<UserLevelInfo> Parser { get { return _parser; } }

    private uint level_;
    /// <summary>
    /// 当前等级
    /// </summary>
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private bool levelChanged_;
    /// <summary>
    /// 升级标志
    /// </summary>
    public bool LevelChanged {
      get { return levelChanged_; }
      set {
        levelChanged_ = value;
      }
    }

    private ulong expCurrent_;
    /// <summary>
    /// 当前经验
    /// </summary>
    public ulong ExpCurrent {
      get { return expCurrent_; }
      set {
        expCurrent_ = value;
      }
    }

    private ulong expNextLevel_;
    /// <summary>
    /// 升级到下一级所需经验
    /// </summary>
    public ulong ExpNextLevel {
      get { return expNextLevel_; }
      set {
        expNextLevel_ = value;
      }
    }

    private float expMultiplier_;
    /// <summary>
    /// 经验倍数
    /// </summary>
    public float ExpMultiplier {
      get { return expMultiplier_; }
      set {
        expMultiplier_ = value;
      }
    }

    private ulong expMultiplierExpire_;
    /// <summary>
    /// 经验加成效果过期时间
    /// </summary>
    public ulong ExpMultiplierExpire {
      get { return expMultiplierExpire_; }
      set {
        expMultiplierExpire_ = value;
      }
    }

    private ulong levelReward_;
    /// <summary>
    /// 升级金币奖励
    /// </summary>
    public ulong LevelReward {
      get { return levelReward_; }
      set {
        levelReward_ = value;
      }
    }

    private ulong vipReward_;
    /// <summary>
    /// 升级vip点数奖励
    /// </summary>
    public ulong VipReward {
      get { return vipReward_; }
      set {
        vipReward_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (LevelChanged != false) {
        output.WriteRawTag(16);
        output.WriteBool(LevelChanged);
      }
      if (ExpCurrent != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ExpCurrent);
      }
      if (ExpNextLevel != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ExpNextLevel);
      }
      if (ExpMultiplier != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ExpMultiplier);
      }
      if (ExpMultiplierExpire != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ExpMultiplierExpire);
      }
      if (LevelReward != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(LevelReward);
      }
      if (VipReward != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(VipReward);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (LevelChanged != false) {
        size += 1 + 1;
      }
      if (ExpCurrent != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpCurrent);
      }
      if (ExpNextLevel != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpNextLevel);
      }
      if (ExpMultiplier != 0F) {
        size += 1 + 4;
      }
      if (ExpMultiplierExpire != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpMultiplierExpire);
      }
      if (LevelReward != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LevelReward);
      }
      if (VipReward != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VipReward);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            LevelChanged = input.ReadBool();
            break;
          }
          case 24: {
            ExpCurrent = input.ReadUInt64();
            break;
          }
          case 32: {
            ExpNextLevel = input.ReadUInt64();
            break;
          }
          case 45: {
            ExpMultiplier = input.ReadFloat();
            break;
          }
          case 48: {
            ExpMultiplierExpire = input.ReadUInt64();
            break;
          }
          case 56: {
            LevelReward = input.ReadUInt64();
            break;
          }
          case 64: {
            VipReward = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 用户vip等级结构
  /// </summary>
  public sealed class UserVipLevelInfo : pb::IMessage {
    private static readonly pb::MessageParser<UserVipLevelInfo> _parser = new pb::MessageParser<UserVipLevelInfo>(() => new UserVipLevelInfo());
    public static pb::MessageParser<UserVipLevelInfo> Parser { get { return _parser; } }

    private uint level_;
    /// <summary>
    /// vip等级
    /// </summary>
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    private ulong expCurrent_;
    /// <summary>
    /// 当前经验点数
    /// </summary>
    public ulong ExpCurrent {
      get { return expCurrent_; }
      set {
        expCurrent_ = value;
      }
    }

    private ulong expNextLevel_;
    /// <summary>
    /// 下一等级所需经验
    /// </summary>
    public ulong ExpNextLevel {
      get { return expNextLevel_; }
      set {
        expNextLevel_ = value;
      }
    }

    private bool levelChanged_;
    /// <summary>
    /// 升级标志
    /// </summary>
    public bool LevelChanged {
      get { return levelChanged_; }
      set {
        levelChanged_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (ExpCurrent != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ExpCurrent);
      }
      if (ExpNextLevel != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ExpNextLevel);
      }
      if (LevelChanged != false) {
        output.WriteRawTag(32);
        output.WriteBool(LevelChanged);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (ExpCurrent != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpCurrent);
      }
      if (ExpNextLevel != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpNextLevel);
      }
      if (LevelChanged != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            ExpCurrent = input.ReadUInt64();
            break;
          }
          case 24: {
            ExpNextLevel = input.ReadUInt64();
            break;
          }
          case 32: {
            LevelChanged = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 用户数据
  /// </summary>
  public sealed class UserProfile : pb::IMessage {
    private static readonly pb::MessageParser<UserProfile> _parser = new pb::MessageParser<UserProfile>(() => new UserProfile());
    public static pb::MessageParser<UserProfile> Parser { get { return _parser; } }

    private ulong coins_;
    /// <summary>
    /// 金币
    /// </summary>
    public ulong Coins {
      get { return coins_; }
      set {
        coins_ = value;
      }
    }

    private ulong diamonds_;
    /// <summary>
    /// 钻石
    /// </summary>
    public ulong Diamonds {
      get { return diamonds_; }
      set {
        diamonds_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserLevelInfo userLevelInfo_;
    /// <summary>
    /// 等级相关
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserLevelInfo UserLevelInfo {
      get { return userLevelInfo_; }
      set {
        userLevelInfo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserVipLevelInfo userVipLevelInfo_;
    /// <summary>
    /// vip相关
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserVipLevelInfo UserVipLevelInfo {
      get { return userVipLevelInfo_; }
      set {
        userVipLevelInfo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserBasicInfo userBasicInfo_;
    /// <summary>
    /// 基础数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserBasicInfo UserBasicInfo {
      get { return userBasicInfo_; }
      set {
        userBasicInfo_ = value;
      }
    }

    private ulong marks_;
    /// <summary>
    /// 存储一些标志位
    /// </summary>
    public ulong Marks {
      get { return marks_; }
      set {
        marks_ = value;
      }
    }

    private string extraInfo_ = "";
    /// <summary>
    /// 扩展数据
    /// </summary>
    public string ExtraInfo {
      get { return extraInfo_; }
      set {
        extraInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserStatInfo userStatInfo_;
    /// <summary>
    /// 统计相关
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.UserStatInfo UserStatInfo {
      get { return userStatInfo_; }
      set {
        userStatInfo_ = value;
      }
    }

    private string gameId_ = "";
    /// <summary>
    /// 当前所在游戏id
    /// </summary>
    public string GameId {
      get { return gameId_; }
      set {
        gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Coins != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Coins);
      }
      if (Diamonds != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Diamonds);
      }
      if (userLevelInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserLevelInfo);
      }
      if (userVipLevelInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UserVipLevelInfo);
      }
      if (userBasicInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UserBasicInfo);
      }
      if (Marks != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Marks);
      }
      if (ExtraInfo.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(ExtraInfo);
      }
      if (userStatInfo_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(UserStatInfo);
      }
      if (GameId.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(GameId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Coins != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Coins);
      }
      if (Diamonds != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Diamonds);
      }
      if (userLevelInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserLevelInfo);
      }
      if (userVipLevelInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserVipLevelInfo);
      }
      if (userBasicInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserBasicInfo);
      }
      if (Marks != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Marks);
      }
      if (ExtraInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraInfo);
      }
      if (userStatInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UserStatInfo);
      }
      if (GameId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GameId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Coins = input.ReadUInt64();
            break;
          }
          case 16: {
            Diamonds = input.ReadUInt64();
            break;
          }
          case 26: {
            if (userLevelInfo_ == null) {
              userLevelInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserLevelInfo();
            }
            input.ReadMessage(userLevelInfo_);
            break;
          }
          case 34: {
            if (userVipLevelInfo_ == null) {
              userVipLevelInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserVipLevelInfo();
            }
            input.ReadMessage(userVipLevelInfo_);
            break;
          }
          case 42: {
            if (userBasicInfo_ == null) {
              userBasicInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserBasicInfo();
            }
            input.ReadMessage(userBasicInfo_);
            break;
          }
          case 48: {
            Marks = input.ReadUInt64();
            break;
          }
          case 122: {
            ExtraInfo = input.ReadString();
            break;
          }
          case 130: {
            if (userStatInfo_ == null) {
              userStatInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserStatInfo();
            }
            input.ReadMessage(userStatInfo_);
            break;
          }
          case 138: {
            GameId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 用户基础数据
  /// </summary>
  public sealed class UserBasicInfo : pb::IMessage {
    private static readonly pb::MessageParser<UserBasicInfo> _parser = new pb::MessageParser<UserBasicInfo>(() => new UserBasicInfo());
    public static pb::MessageParser<UserBasicInfo> Parser { get { return _parser; } }

    private uint userAvatarId_;
    /// <summary>
    /// 头像id
    /// </summary>
    public uint UserAvatarId {
      get { return userAvatarId_; }
      set {
        userAvatarId_ = value;
      }
    }

    private uint userAvatarFrameId_;
    /// <summary>
    /// 头像框id
    /// </summary>
    public uint UserAvatarFrameId {
      get { return userAvatarFrameId_; }
      set {
        userAvatarFrameId_ = value;
      }
    }

    private string userName_ = "";
    /// <summary>
    /// 用户名字
    /// </summary>
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string userEmail_ = "";
    /// <summary>
    /// 用户邮箱
    /// </summary>
    public string UserEmail {
      get { return userEmail_; }
      set {
        userEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<uint> _repeated_avatarIdsOwned_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> avatarIdsOwned_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 持有的头像ID列表
    /// </summary>
    public pbc::RepeatedField<uint> AvatarIdsOwned {
      get { return avatarIdsOwned_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserAvatarId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserAvatarId);
      }
      if (UserAvatarFrameId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserAvatarFrameId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserName);
      }
      if (UserEmail.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserEmail);
      }
      avatarIdsOwned_.WriteTo(output, _repeated_avatarIdsOwned_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (UserAvatarId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserAvatarId);
      }
      if (UserAvatarFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserAvatarFrameId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (UserEmail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserEmail);
      }
      size += avatarIdsOwned_.CalculateSize(_repeated_avatarIdsOwned_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserAvatarId = input.ReadUInt32();
            break;
          }
          case 16: {
            UserAvatarFrameId = input.ReadUInt32();
            break;
          }
          case 26: {
            UserName = input.ReadString();
            break;
          }
          case 34: {
            UserEmail = input.ReadString();
            break;
          }
          case 42:
          case 40: {
            avatarIdsOwned_.AddEntriesFrom(input, _repeated_avatarIdsOwned_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
