// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortune_x_level_rush.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Messages
  /// <summary>
  /// levelrush 弹框所需信息; spin时触发活动的那一次，spin时等级变化的那一次，及主动获取，会下发该结构;
  /// </summary>
  public sealed class LevelRushPopupInfo : pb::IMessage {
    private static readonly pb::MessageParser<LevelRushPopupInfo> _parser = new pb::MessageParser<LevelRushPopupInfo>(() => new LevelRushPopupInfo());
    public static pb::MessageParser<LevelRushPopupInfo> Parser { get { return _parser; } }

    private uint startAt_;
    /// <summary>
    ///本轮次开始的时间,单位秒
    /// </summary>
    public uint StartAt {
      get { return startAt_; }
      set {
        startAt_ = value;
      }
    }

    private uint endAt_;
    /// <summary>
    /// 本轮次结束的时间,单位秒
    /// </summary>
    public uint EndAt {
      get { return endAt_; }
      set {
        endAt_ = value;
      }
    }

    private uint serverTimeSeconds_;
    /// <summary>
    /// 服务器时间,单位秒
    /// </summary>
    public uint ServerTimeSeconds {
      get { return serverTimeSeconds_; }
      set {
        serverTimeSeconds_ = value;
      }
    }

    private uint levelTarget_;
    /// <summary>
    ///本轮次的目标等级
    /// </summary>
    public uint LevelTarget {
      get { return levelTarget_; }
      set {
        levelTarget_ = value;
      }
    }

    private uint levelCurrent_;
    /// <summary>
    ///当前等级
    /// </summary>
    public uint LevelCurrent {
      get { return levelCurrent_; }
      set {
        levelCurrent_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPopupInfo.Types.LevelRewardInfo> _repeated_levelRewardList_codec
        = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPopupInfo.Types.LevelRewardInfo.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPopupInfo.Types.LevelRewardInfo> levelRewardList_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPopupInfo.Types.LevelRewardInfo>();
    /// <summary>
    /// 等级及奖励信息 
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPopupInfo.Types.LevelRewardInfo> LevelRewardList {
      get { return levelRewardList_; }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo> _repeated_freeGamesCanPlay_codec
        = pb::FieldCodec.ForMessage(58, global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo> freeGamesCanPlay_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo>();
    /// <summary>
    ///玩家能玩的免费游戏列表
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo> FreeGamesCanPlay {
      get { return freeGamesCanPlay_; }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPopupInfo.Types.IncrementTimeInfo incrementTimeInfo_;
    /// <summary>
    /// 续命相关信息
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPopupInfo.Types.IncrementTimeInfo IncrementTimeInfo {
      get { return incrementTimeInfo_; }
      set {
        incrementTimeInfo_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.Reward rewardGot_;
    /// <summary>
    /// 领取的奖励，仅当等级变化且有等级到达奖励时该字段不为空
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.Reward RewardGot {
      get { return rewardGot_; }
      set {
        rewardGot_ = value;
      }
    }

    private ulong freeGamesCoinUpTo_;
    /// <summary>
    /// 免费游戏最大的金币产出，用于渲染弹框上的win_up_to
    /// </summary>
    public ulong FreeGamesCoinUpTo {
      get { return freeGamesCoinUpTo_; }
      set {
        freeGamesCoinUpTo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StartAt != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StartAt);
      }
      if (EndAt != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EndAt);
      }
      if (ServerTimeSeconds != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ServerTimeSeconds);
      }
      if (LevelTarget != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LevelTarget);
      }
      if (LevelCurrent != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LevelCurrent);
      }
      levelRewardList_.WriteTo(output, _repeated_levelRewardList_codec);
      freeGamesCanPlay_.WriteTo(output, _repeated_freeGamesCanPlay_codec);
      if (incrementTimeInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(IncrementTimeInfo);
      }
      if (rewardGot_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RewardGot);
      }
      if (FreeGamesCoinUpTo != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(FreeGamesCoinUpTo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (StartAt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartAt);
      }
      if (EndAt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndAt);
      }
      if (ServerTimeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerTimeSeconds);
      }
      if (LevelTarget != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelTarget);
      }
      if (LevelCurrent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelCurrent);
      }
      size += levelRewardList_.CalculateSize(_repeated_levelRewardList_codec);
      size += freeGamesCanPlay_.CalculateSize(_repeated_freeGamesCanPlay_codec);
      if (incrementTimeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IncrementTimeInfo);
      }
      if (rewardGot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardGot);
      }
      if (FreeGamesCoinUpTo != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FreeGamesCoinUpTo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartAt = input.ReadUInt32();
            break;
          }
          case 16: {
            EndAt = input.ReadUInt32();
            break;
          }
          case 24: {
            ServerTimeSeconds = input.ReadUInt32();
            break;
          }
          case 32: {
            LevelTarget = input.ReadUInt32();
            break;
          }
          case 40: {
            LevelCurrent = input.ReadUInt32();
            break;
          }
          case 50: {
            levelRewardList_.AddEntriesFrom(input, _repeated_levelRewardList_codec);
            break;
          }
          case 58: {
            freeGamesCanPlay_.AddEntriesFrom(input, _repeated_freeGamesCanPlay_codec);
            break;
          }
          case 66: {
            if (incrementTimeInfo_ == null) {
              incrementTimeInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPopupInfo.Types.IncrementTimeInfo();
            }
            input.ReadMessage(incrementTimeInfo_);
            break;
          }
          case 74: {
            if (rewardGot_ == null) {
              rewardGot_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
            }
            input.ReadMessage(rewardGot_);
            break;
          }
          case 80: {
            FreeGamesCoinUpTo = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LevelRushPopupInfo message type.</summary>
    public static class Types {
      public sealed class LevelRewardInfo : pb::IMessage {
        private static readonly pb::MessageParser<LevelRewardInfo> _parser = new pb::MessageParser<LevelRewardInfo>(() => new LevelRewardInfo());
        public static pb::MessageParser<LevelRewardInfo> Parser { get { return _parser; } }

        private uint level_;
        /// <summary>
        /// 等级
        /// </summary>
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.Reward reward_;
        /// <summary>
        /// 奖励, 初始等级的节点，reward=null
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.Reward Reward {
          get { return reward_; }
          set {
            reward_ = value;
          }
        }

        private bool received_;
        /// <summary>
        ///是否已经领取
        /// </summary>
        public bool Received {
          get { return received_; }
          set {
            received_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Level != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Level);
          }
          if (reward_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Reward);
          }
          if (Received != false) {
            output.WriteRawTag(24);
            output.WriteBool(Received);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (reward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
          }
          if (Received != false) {
            size += 1 + 1;
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Level = input.ReadUInt32();
                break;
              }
              case 18: {
                if (reward_ == null) {
                  reward_ = new global::DragonU3DSDK.Network.API.ILProtocol.Reward();
                }
                input.ReadMessage(reward_);
                break;
              }
              case 24: {
                Received = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed class IncrementTimeInfo : pb::IMessage {
        private static readonly pb::MessageParser<IncrementTimeInfo> _parser = new pb::MessageParser<IncrementTimeInfo>(() => new IncrementTimeInfo());
        public static pb::MessageParser<IncrementTimeInfo> Parser { get { return _parser; } }

        private bool hasIncrement_;
        /// <summary>
        /// 是否已经续过命了
        /// </summary>
        public bool HasIncrement {
          get { return hasIncrement_; }
          set {
            hasIncrement_ = value;
          }
        }

        private uint secondsCanIncrement_;
        /// <summary>
        /// 续命可以增加的秒数
        /// </summary>
        public uint SecondsCanIncrement {
          get { return secondsCanIncrement_; }
          set {
            secondsCanIncrement_ = value;
          }
        }

        private uint diamondsCost_;
        /// <summary>
        /// 续命需要消耗的钻石
        /// </summary>
        public uint DiamondsCost {
          get { return diamondsCost_; }
          set {
            diamondsCost_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (HasIncrement != false) {
            output.WriteRawTag(8);
            output.WriteBool(HasIncrement);
          }
          if (SecondsCanIncrement != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(SecondsCanIncrement);
          }
          if (DiamondsCost != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(DiamondsCost);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (HasIncrement != false) {
            size += 1 + 1;
          }
          if (SecondsCanIncrement != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SecondsCanIncrement);
          }
          if (DiamondsCost != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DiamondsCost);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                HasIncrement = input.ReadBool();
                break;
              }
              case 16: {
                SecondsCanIncrement = input.ReadUInt32();
                break;
              }
              case 24: {
                DiamondsCost = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// 获取levelrush的弹框信息
  /// </summary>
  public sealed class CGetLevelRushPopUpInfo : pb::IMessage {
    private static readonly pb::MessageParser<CGetLevelRushPopUpInfo> _parser = new pb::MessageParser<CGetLevelRushPopUpInfo>(() => new CGetLevelRushPopUpInfo());
    public static pb::MessageParser<CGetLevelRushPopUpInfo> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SGetLevelRushPopUpInfo : pb::IMessage {
    private static readonly pb::MessageParser<SGetLevelRushPopUpInfo> _parser = new pb::MessageParser<SGetLevelRushPopUpInfo>(() => new SGetLevelRushPopUpInfo());
    public static pb::MessageParser<SGetLevelRushPopUpInfo> Parser { get { return _parser; } }

    private bool hasLevelRushTask_;
    /// <summary>
    /// 目前是否有levelrush任务
    /// </summary>
    public bool HasLevelRushTask {
      get { return hasLevelRushTask_; }
      set {
        hasLevelRushTask_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPopupInfo levelRushPopUpInfo_;
    /// <summary>
    ///has_level_rush_task=true时读取该字段
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPopupInfo LevelRushPopUpInfo {
      get { return levelRushPopUpInfo_; }
      set {
        levelRushPopUpInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo> _repeated_freeGamesCanPlay_codec
        = pb::FieldCodec.ForMessage(26, global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo.Parser);
    private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo> freeGamesCanPlay_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo>();
    /// <summary>
    ///玩家能玩的免费游戏列表
    /// </summary>
    public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo> FreeGamesCanPlay {
      get { return freeGamesCanPlay_; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (HasLevelRushTask != false) {
        output.WriteRawTag(8);
        output.WriteBool(HasLevelRushTask);
      }
      if (levelRushPopUpInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LevelRushPopUpInfo);
      }
      freeGamesCanPlay_.WriteTo(output, _repeated_freeGamesCanPlay_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (HasLevelRushTask != false) {
        size += 1 + 1;
      }
      if (levelRushPopUpInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelRushPopUpInfo);
      }
      size += freeGamesCanPlay_.CalculateSize(_repeated_freeGamesCanPlay_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HasLevelRushTask = input.ReadBool();
            break;
          }
          case 18: {
            if (levelRushPopUpInfo_ == null) {
              levelRushPopUpInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPopupInfo();
            }
            input.ReadMessage(levelRushPopUpInfo_);
            break;
          }
          case 26: {
            freeGamesCanPlay_.AddEntriesFrom(input, _repeated_freeGamesCanPlay_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// levelrush 增加本轮的结束时间，此接口暂时废弃
  /// </summary>
  public sealed class CLevelRushIncrementTime : pb::IMessage {
    private static readonly pb::MessageParser<CLevelRushIncrementTime> _parser = new pb::MessageParser<CLevelRushIncrementTime>(() => new CLevelRushIncrementTime());
    public static pb::MessageParser<CLevelRushIncrementTime> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class SLevelRushIncrementTime : pb::IMessage {
    private static readonly pb::MessageParser<SLevelRushIncrementTime> _parser = new pb::MessageParser<SLevelRushIncrementTime>(() => new SLevelRushIncrementTime());
    public static pb::MessageParser<SLevelRushIncrementTime> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPopupInfo levelRushPopUpInfo_;
    public global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPopupInfo LevelRushPopUpInfo {
      get { return levelRushPopUpInfo_; }
      set {
        levelRushPopUpInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (userProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserProfile);
      }
      if (levelRushPopUpInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LevelRushPopUpInfo);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      if (levelRushPopUpInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelRushPopUpInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 18: {
            if (levelRushPopUpInfo_ == null) {
              levelRushPopUpInfo_ = new global::DragonU3DSDK.Network.API.ILProtocol.LevelRushPopupInfo();
            }
            input.ReadMessage(levelRushPopUpInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// levelrush游戏 play
  /// </summary>
  public sealed class CLevelRushGamePlay : pb::IMessage {
    private static readonly pb::MessageParser<CLevelRushGamePlay> _parser = new pb::MessageParser<CLevelRushGamePlay>(() => new CLevelRushGamePlay());
    public static pb::MessageParser<CLevelRushGamePlay> Parser { get { return _parser; } }

    private string key_ = "";
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SLevelRushGamePlay : pb::IMessage {
    private static readonly pb::MessageParser<SLevelRushGamePlay> _parser = new pb::MessageParser<SLevelRushGamePlay>(() => new SLevelRushGamePlay());
    public static pb::MessageParser<SLevelRushGamePlay> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameResult gameResult_;
    /// <summary>
    /// 游戏结果
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameResult GameResult {
      get { return gameResult_; }
      set {
        gameResult_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.UserProfile userProfile_;
    public global::DragonU3DSDK.Network.API.ILProtocol.UserProfile UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig shopGamePayItem_;
    /// <summary>
    /// 付费游戏支付项，仅当前游戏为免费游戏时读取该字段
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig ShopGamePayItem {
      get { return shopGamePayItem_; }
      set {
        shopGamePayItem_ = value;
      }
    }

    private global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo paidGameInfoForShow_;
    /// <summary>
    /// 付费游戏展示数据
    /// </summary>
    public global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo PaidGameInfoForShow {
      get { return paidGameInfoForShow_; }
      set {
        paidGameInfoForShow_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (gameResult_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameResult);
      }
      if (userProfile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserProfile);
      }
      if (shopGamePayItem_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ShopGamePayItem);
      }
      if (paidGameInfoForShow_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PaidGameInfoForShow);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (gameResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameResult);
      }
      if (userProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserProfile);
      }
      if (shopGamePayItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShopGamePayItem);
      }
      if (paidGameInfoForShow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaidGameInfoForShow);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (gameResult_ == null) {
              gameResult_ = new global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameResult();
            }
            input.ReadMessage(gameResult_);
            break;
          }
          case 18: {
            if (userProfile_ == null) {
              userProfile_ = new global::DragonU3DSDK.Network.API.ILProtocol.UserProfile();
            }
            input.ReadMessage(userProfile_);
            break;
          }
          case 26: {
            if (shopGamePayItem_ == null) {
              shopGamePayItem_ = new global::DragonU3DSDK.Network.API.ILProtocol.ShopItemConfig();
            }
            input.ReadMessage(shopGamePayItem_);
            break;
          }
          case 34: {
            if (paidGameInfoForShow_ == null) {
              paidGameInfoForShow_ = new global::DragonU3DSDK.Network.API.ILProtocol.LevelRushGameInfo();
            }
            input.ReadMessage(paidGameInfoForShow_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
