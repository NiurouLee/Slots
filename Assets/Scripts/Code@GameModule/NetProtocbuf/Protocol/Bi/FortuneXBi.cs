// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fortune_x_bi.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ilruntime.Protobuf;
using pbc = global::Google.ilruntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace DragonU3DSDK.Network.API.ILProtocol {

  #region Messages
  public sealed class BiEventFortuneX : pb::IMessage {
    private static readonly pb::MessageParser<BiEventFortuneX> _parser = new pb::MessageParser<BiEventFortuneX>(() => new BiEventFortuneX());
    public static pb::MessageParser<BiEventFortuneX> Parser { get { return _parser; } }

    private global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.Common common_;
    public global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.Common Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    public global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.GameEvent GameEvent {
      get { return payloadCase_ == PayloadOneofCase.GameEvent ? (global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.GameEvent) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.GameEvent;
      }
    }

    public global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.SpinAction SpinAction {
      get { return payloadCase_ == PayloadOneofCase.SpinAction ? (global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.SpinAction) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpinAction;
      }
    }

    public global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.SpinResult SpinResult {
      get { return payloadCase_ == PayloadOneofCase.SpinResult ? (global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.SpinResult) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.SpinResult;
      }
    }

    public global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.ItemChange ItemChange {
      get { return payloadCase_ == PayloadOneofCase.ItemChange ? (global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.ItemChange) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.ItemChange;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      GameEvent = 11,
      SpinAction = 12,
      SpinResult = 13,
      ItemChange = 14,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (payloadCase_ == PayloadOneofCase.GameEvent) {
        output.WriteRawTag(90);
        output.WriteMessage(GameEvent);
      }
      if (payloadCase_ == PayloadOneofCase.SpinAction) {
        output.WriteRawTag(98);
        output.WriteMessage(SpinAction);
      }
      if (payloadCase_ == PayloadOneofCase.SpinResult) {
        output.WriteRawTag(106);
        output.WriteMessage(SpinResult);
      }
      if (payloadCase_ == PayloadOneofCase.ItemChange) {
        output.WriteRawTag(114);
        output.WriteMessage(ItemChange);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (payloadCase_ == PayloadOneofCase.GameEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameEvent);
      }
      if (payloadCase_ == PayloadOneofCase.SpinAction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpinAction);
      }
      if (payloadCase_ == PayloadOneofCase.SpinResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpinResult);
      }
      if (payloadCase_ == PayloadOneofCase.ItemChange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemChange);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (common_ == null) {
              common_ = new global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.Common();
            }
            input.ReadMessage(common_);
            break;
          }
          case 90: {
            global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.GameEvent subBuilder = new global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.GameEvent();
            //if (payloadCase_ == PayloadOneofCase.GameEvent) {
            //  subBuilder.MergeFrom(GameEvent);
            //}
            input.ReadMessage(subBuilder);
            GameEvent = subBuilder;
            break;
          }
          case 98: {
            global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.SpinAction subBuilder = new global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.SpinAction();
            //if (payloadCase_ == PayloadOneofCase.SpinAction) {
            //  subBuilder.MergeFrom(SpinAction);
            //}
            input.ReadMessage(subBuilder);
            SpinAction = subBuilder;
            break;
          }
          case 106: {
            global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.SpinResult subBuilder = new global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.SpinResult();
            //if (payloadCase_ == PayloadOneofCase.SpinResult) {
            //  subBuilder.MergeFrom(SpinResult);
            //}
            input.ReadMessage(subBuilder);
            SpinResult = subBuilder;
            break;
          }
          case 114: {
            global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.ItemChange subBuilder = new global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.ItemChange();
            //if (payloadCase_ == PayloadOneofCase.ItemChange) {
            //  subBuilder.MergeFrom(ItemChange);
            //}
            input.ReadMessage(subBuilder);
            ItemChange = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BiEventFortuneX message type.</summary>
    public static class Types {
      public enum GameEventType {
        /// <summary>
        /// 占位，无含义
        /// </summary>
        GameEventPlaceholder = 0,
        /// <summary>
        /// 漏斗：启动游戏，成功后发送日志
        /// </summary>
        GameEventLaunchApp = 1,
        /// <summary>
        /// 漏斗：初始化资源下载插件成功，发送日志
        /// </summary>
        GameEventInitAddressableSuccess = 2,
        /// <summary>
        /// 漏斗：下载热更代码成功，发送日志
        /// </summary>
        GameEventDownloadCode = 3,
        /// <summary>
        /// 漏斗：下载loading资源成功，发送日志
        /// </summary>
        GameEventStartLoadLoading = 4,
        /// <summary>
        /// 漏斗：进入loading开始下载核心资源，发送日志
        /// </summary>
        GameEventEnterLoadingScene = 5,
        /// <summary>
        /// 漏斗：下载资源成功，发送日志
        /// </summary>
        GameEventDownloadResource = 6,
        /// <summary>
        /// 漏斗：进入登录页面，发送日志
        /// </summary>
        GameEventEnterLoginScreen = 7,
        /// <summary>
        /// 漏斗：用户登录，发送日志；extras记录login_type（Guest、Facebook、AppleId）
        /// </summary>
        GameEventUserLogin = 8,
        /// <summary>
        /// 漏斗：弹出新手引导界面-给玩家初始资金,发送日志
        /// </summary>
        GameEventGuidePopWelcome = 9,
        /// <summary>
        /// 漏斗：点击新手引导界面收到初始资金,发送日志
        /// </summary>
        GameEventGuideCollectWelcome = 10,
        /// <summary>
        /// 漏斗：弹出新手引导界面-点击第一个机器,发送日志
        /// </summary>
        GameEventGuidePopFirstMachine = 11,
        /// <summary>
        /// 漏斗：点击新手引导界面-第一个机器,发送日志
        /// </summary>
        GameEventGuideTapFirstMachine = 12,
        /// <summary>
        /// 漏斗：弹出新手引导1-点击Spin按钮,发送日志
        /// </summary>
        GameEventGuidePopSpin1 = 13,
        /// <summary>
        /// 漏斗：点击新手引导1-第一次点击Spin按钮,发送日志
        /// </summary>
        GameEventGuideTapSpin1 = 14,
        /// <summary>
        /// 漏斗：完成新手引导1-点击3次SPIN ,发送日志; 
        /// </summary>
        GameEventGuideComplete1 = 15,
        /// <summary>
        /// 漏斗：弹出新手引导2-到达指定等级3,发送日志
        /// </summary>
        GameEventGuidePopReachLevel2 = 16,
        /// <summary>
        /// 漏斗：完成新手引导2-到达指定等级3,发送日志; 
        /// </summary>
        GameEventGuideCompleteReachLevel2 = 17,
        /// <summary>
        /// 漏斗：弹出新手引导3-解锁新的模块Quest,发送日志
        /// </summary>
        GameEventGuidePopUnlockQuest3 = 18,
        /// <summary>
        /// 漏斗：完成新手引导3-解锁新的模块Quest，点击Let's Go,发送日志; 
        /// </summary>
        GameEventGuideCompleteUnlockQuest3 = 19,
        /// <summary>
        /// 漏斗：从新手引导界面点击Let's Go跳转到Quest界面成功,发送日志
        /// </summary>
        GameEventGuideTransferQuest = 20,
        /// <summary>
        /// 漏斗：进入新手Quest，发送日志；extras记录来源source（Guide、Advertisement、Machine、Lobby）
        /// </summary>
        GameEventQuestEnter = 21,
        /// <summary>
        /// 漏斗：点击新手Quest1-第一台机器,发送日志
        /// </summary>
        GameEventQuestTap1 = 22,
        /// <summary>
        /// 漏斗：完成新手Quest1-第一台机器,发送日志; extras记录倒计时CountDown
        /// </summary>
        GameEventQuestComplete1 = 23,
        /// <summary>
        /// 漏斗：领取新手Quest1-第一个奖励节点,发送日志
        /// </summary>
        GameEventQuestCollect1 = 24,
        /// <summary>
        /// 漏斗：点击新手Quest2-第二台机器,发送日志
        /// </summary>
        GameEventQuestTap2 = 25,
        /// <summary>
        /// 漏斗：完成新手Quest2-第二台机器,发送日志; extras记录倒计时countDown
        /// </summary>
        GameEventQuestComplete2 = 26,
        /// <summary>
        /// 漏斗：领取新手Quest2-第二个奖励节点,发送日志
        /// </summary>
        GameEventQuestCollect2 = 27,
        /// <summary>
        /// 漏斗：点击新手Quest3-第三台机器,发送日志
        /// </summary>
        GameEventQuestTap3 = 28,
        /// <summary>
        /// 漏斗：完成新手Quest3-第三台机器,发送日志; extras记录倒计时countDown
        /// </summary>
        GameEventQuestComplete3 = 29,
        /// <summary>
        /// 漏斗：领取新手Quest3-第三个奖励节点,发送日志
        /// </summary>
        GameEventQuestCollect3 = 30,
        /// <summary>
        /// 漏斗：点击新手Quest4-第四台机器,发送日志
        /// </summary>
        GameEventQuestTap4 = 31,
        /// <summary>
        /// 漏斗：完成新手Quest4-第四台机器,发送日志; extras记录倒计时countDown
        /// </summary>
        GameEventQuestComplete4 = 32,
        /// <summary>
        /// 漏斗：领取新手Quest4-第四个奖励节点,发送日志
        /// </summary>
        GameEventQuestCollect4 = 33,
        /// <summary>
        /// 漏斗：点击新手Quest5-第五台机器,发送日志
        /// </summary>
        GameEventQuestTap5 = 34,
        /// <summary>
        /// 漏斗：完成新手Quest5-第五台机器,发送日志; extras记录倒计时countDown
        /// </summary>
        GameEventQuestComplete5 = 35,
        /// <summary>
        /// 漏斗：领取新手Quest5-第五个奖励节点,发送日志
        /// </summary>
        GameEventQuestCollect5 = 36,
        /// <summary>
        /// 漏斗：点击新手Quest6-第六台机器,发送日志
        /// </summary>
        GameEventQuestTap6 = 37,
        /// <summary>
        /// 漏斗：完成新手Quest6-第六台机器,发送日志; extras记录倒计时countDown
        /// </summary>
        GameEventQuestComplete6 = 38,
        /// <summary>
        /// 漏斗：领取新手Quest6-第六个奖励节点,发送日志
        /// </summary>
        GameEventQuestCollect6 = 39,
        /// <summary>
        /// 点击机器图标，发送日志；extras记录来源source（Advertisement、Lobby、MachineUnlock）、机器gameId
        /// </summary>
        GameEventMachineClick = 40,
        /// <summary>
        /// 机器开始下载，发送日志（只在下载的时候加，Loading的时候不加）
        /// </summary>
        GameEventMachineDownloadStart = 41,
        /// <summary>
        /// 机器下载成功，发送日志
        /// </summary>
        GameEventMachineDownloadSuccess = 42,
        /// <summary>
        /// 机器下载失败，发送日志；extras记录机器gameId
        /// </summary>
        GameEventMachineDownloadFail = 43,
        /// <summary>
        /// 升级，发送日志；extras记录升级后Level
        /// </summary>
        GameEventLevelUp = 44,
        /// <summary>
        /// VIP升级，发送日志；extras记录升级原因reason（LevelUp、Purchase、MissionPassReward）
        /// </summary>
        GameEventVipLevelUp = 45,
        /// <summary>
        /// 弹出Rate Us弹窗时发送日志；extras记录source（Setting）
        /// </summary>
        GameEventRateUsPop = 46,
        /// <summary>
        /// 点击Rate 5星时发送日志
        /// </summary>
        GameEventRateUs5 = 47,
        /// <summary>
        /// 点击Rate 1-4星时发送日志
        /// </summary>
        GameEventRateUs4 = 48,
        /// <summary>
        /// Rate Us 弹窗点击关闭按钮时，发送日志
        /// </summary>
        GameEventRateUsClose = 49,
        /// <summary>
        /// 点击绑定 FB按钮时，发送日志；extras记录source
        /// </summary>
        GameEventBindFacebookBind = 50,
        /// <summary>
        /// 绑定 FB 成功时发送
        /// </summary>
        GameEventBindFacebookSuccess = 51,
        /// <summary>
        /// 绑定 FB 返回失败时发送；
        /// </summary>
        GameEventBindFacebookFail = 52,
        /// <summary>
        /// 弹出Like Us弹窗时发送日志
        /// </summary>
        GameEventLikeUsPop = 53,
        /// <summary>
        /// 在Like Us弹窗点击 Like 按钮时发送日志
        /// </summary>
        GameEventLikeUsLike = 54,
        /// <summary>
        /// 在Like Us弹窗点击 Later 发送日志
        /// </summary>
        GameEventLikeUsLater = 55,
        /// <summary>
        /// 在Like Us弹窗点击 关闭或者No Thanks发送日志
        /// </summary>
        GameEventLikeUsClose = 56,
        /// <summary>
        /// 打开 Contact Us 页面时发送日志；extras记录来源source（Setting、RateUs（点击评论 1-4 星时打开））
        /// </summary>
        GameEventContactUs = 57,
        /// <summary>
        /// 打开 Setting页面时发送日志
        /// </summary>
        GameEventSettingOpen = 58,
        /// <summary>
        /// 弹出每日奖励弹窗发送日志
        /// </summary>
        GameEventDailyBonusPop = 59,
        /// <summary>
        /// 每日奖励弹窗领取每日签到按钮发送日志
        /// </summary>
        GameEventDailyBonusDaily = 60,
        /// <summary>
        /// 每日奖励弹窗领取累计签到按钮发送日志；extras记录stage（1、2、3）、累计签到天数totalLoginDay
        /// </summary>
        GameEventDailyBonusStage = 61,
        /// <summary>
        /// 领取TimerBonus里面每小时奖励时发送日志；extras记录领取入口（1.大厅  2.timerbonus主页面  3.机台内），领取时的填充状态（0.不到25%，1.25%--50%，2.50%-75%，3.75%以上，4.100%），领取时的SPIN BUFF等级（1，2，3，4，5）
        /// </summary>
        GameEventTimerBonusHourlyCollect = 62,
        /// <summary>
        /// 领取TimerBonus里面转轮奖励时发送日志；extras记录扇叶wedgeId、superWheelBoost
        /// </summary>
        GameEventTimerBonusWheelCollect = 63,
        /// <summary>
        /// 领取TimerBonus里面3层转轮奖励时发送日志；extras记录拿到的win、multiple、emerald
        /// </summary>
        GameEventTimerBonusExtraWheelCollect = 64,
        /// <summary>
        /// 领取TimerBonus转轮奖励后首次弹出付费转轮时发送日志；extras记录商品paymentId、price
        /// </summary>
        GameEventTimerBonusGoldenWheelPop = 65,
        /// <summary>
        /// 领取TimerBonus转轮奖励后玩家点击关闭第二次弹出付费转轮挽留界面时发送日志；extras记录商品paymentId、price
        /// </summary>
        GameEventTimerBonusGoldenWheelPop2 = 66,
        /// <summary>
        /// 退出付费转轮界面时发送日志；extras记录商品paymentId、price
        /// </summary>
        GameEventTimerBonusGoldenWheelExit = 67,
        /// <summary>
        /// 点击付费转轮付费按钮时发送日志；extras记录商品paymentId、price
        /// </summary>
        GameEventTimerBonusGoldenWheelPurchase = 68,
        /// <summary>
        /// 购买付费转轮成功时发送日志；extras记录商品paymentId、price
        /// </summary>
        GameEventTimerBonusGoldenWheelPurchaseSuccess = 69,
        /// <summary>
        /// 点击并弹出每日任务界面发送日志；extras记录Normal任务完成进度normalSchedule（0、1、2、3）来源source（Lobby、Machine）
        /// </summary>
        GameEventDailyMissionPop = 70,
        /// <summary>
        /// 领取每日任务-1时发送日志；
        /// </summary>
        GameEventDailyMissionNormalCollect1 = 71,
        /// <summary>
        /// 领取每日任务-2时发送日志；
        /// </summary>
        GameEventDailyMissionNormalCollect2 = 72,
        /// <summary>
        /// 领取每日任务-3时发送日志；
        /// </summary>
        GameEventDailyMissionNormalCollect3 = 73,
        /// <summary>
        /// 领取每日任务-Honor任务时发送日志；
        /// </summary>
        GameEventDailyMissionHonorCollect = 74,
        /// <summary>
        /// 领取每日任务-Stage奖励时发送日志；extras记录领取时stage剩余时间countDown、Stage阶段（1、2）
        /// </summary>
        GameEventDailyMissionStageCollect = 75,
        /// <summary>
        /// 点击并弹出MissionPass界面发送日志；extras记录来源source（Lobby、Machine、Advertisement）
        /// </summary>
        GameEventMissionPassPop = 76,
        /// <summary>
        /// 领取MissionPass奖励发送日志；extras记录领取类型missionType（Free、Mission、FreeLimited、MissionLimited）、MissionPass等级missionPassLevel
        /// </summary>
        GameEventMissionPassCollect = 77,
        /// <summary>
        /// 点击MissionPass界面CollectAll按钮发送日志；extras记录领取类型missionType（Free、Mission、Limited）及对应类型数量count、MissionPass等级missionPassLevel
        /// </summary>
        GameEventMissionPassCollectAll = 78,
        /// <summary>
        /// 点击并弹出MissionPass购买等级界面时发送日志；extras记录MissionPass等级missionPassLevel
        /// </summary>
        GameEventMissionPassBuyLevelPop = 79,
        /// <summary>
        /// 点击MissionPass购买等级界面付费按钮时发送日志；extras记录商品paymentId、price、MissionPass等级missionPassLevel
        /// </summary>
        GameEventMissionPassBuyLevelPurchase = 80,
        /// <summary>
        /// 购买MissionPass等级成功时发送日志；extras记录商品paymentId、price、MissionPass等级missionPassLevel
        /// </summary>
        GameEventMissionPassBuyLevelPurchaseSuccess = 81,
        /// <summary>
        /// 点击并弹出MissionPass解锁MissionPass权限界面时发送日志；extras记录MissionPass等级missionPassLevel
        /// </summary>
        GameEventMissionPassUnlockPop = 82,
        /// <summary>
        /// 点击MissionPass解锁界面付费按钮时发送日志；extras记录商品paymentId、price、当前余额、MissionPass等级missionPassLevel
        /// </summary>
        GameEventMissionPassUnlockPurchase = 83,
        /// <summary>
        /// 购买MissionPass解锁成功时发送日志；extras记录商品paymentId、price、MissionPass等级missionPassLevel
        /// </summary>
        GameEventMissionPassUnlockPurchaseSuccess = 84,
        /// <summary>
        /// 打开商店界面时发送日志；extras记录来源source（货币栏、Banner、BUY、余额不足）、scene（Lobby、gameId）
        /// </summary>
        GameEventStoreOpen = 85,
        /// <summary>
        /// 点击并领取StoreBonus时发送日志
        /// </summary>
        GameEventStoreBonusClick = 86,
        /// <summary>
        /// 点击GiftBox说明时发送日志
        /// </summary>
        GameEventStoreGiftBoxClick = 87,
        /// <summary>
        /// 领取GiftBox奖励时发送日志
        /// </summary>
        GameEventStoreGiftBoxCollect = 88,
        /// <summary>
        /// 点击Store付费按钮时发送日志；extras记录商品paymentId、price、productType
        /// </summary>
        GameEventStorePurchase = 89,
        /// <summary>
        /// 购买Store成功时发送日志；extras记录商品paymentId、price、productType
        /// </summary>
        GameEventStorePurchaseSuccess = 90,
        /// <summary>
        /// 购买失败时发送日志；extras记录失败原因failedReason、product_id
        /// </summary>
        GameEventPurchaseFail = 91,
        /// <summary>
        /// 打开PiggyBank界面时发送日志；extras记录来源scene（Lobby、机器gameId、）source(Advertisement, TopPanel)、是否填满Piggy（isFull）
        /// </summary>
        GameEventPiggyBankOpen = 92,
        /// <summary>
        /// 点击PiggyBank付费按钮时发送日志；extras记录商品paymentId、price
        /// </summary>
        GameEventPiggyBankPurchase = 93,
        /// <summary>
        /// 购买PiggyBank成功时发送日志；extras记录商品paymentId、price、是否首次砸猪isFirst，extra记录当前存储百分比
        /// </summary>
        GameEventPiggyBankPurchaseSuccess = 94,
        /// <summary>
        /// 弹出SpecialOffer界面时发送日志；extras记录来源source（Advertisement、Deal、Lobby）
        /// </summary>
        GameEventSpecialOfferPop = 95,
        /// <summary>
        /// 点击SpecialOffer付费按钮时发送日志；extras记录商品paymentId、price
        /// </summary>
        GameEventSpecialOfferPurchase = 96,
        /// <summary>
        /// 购买SpecialOffer成功时发送日志；extras记录商品paymentId、price
        /// </summary>
        GameEventSpecialOfferPurchaseSuccess = 97,
        /// <summary>
        /// 点开Inbox时发送日志；extras记录Inbox包含的信息条数messageCount
        /// </summary>
        GameEventInboxOpen = 98,
        /// <summary>
        /// 领取Inbox内容时发送日志；extras记录该条内容的信息type
        /// </summary>
        GameEventInboxCollect = 99,
        /// <summary>
        /// 弹出广告时发送日志；extras记录广告性质adsType（interstitialVideo、rewardVideo）、placeId、userGroup（分层）
        /// </summary>
        GameEventAdsPop = 100,
        /// <summary>
        /// 领取广告奖励时发送日志
        /// </summary>
        GameEventAdsCollect = 101,
        /// <summary>
        /// 点击TermofService时发送日志
        /// </summary>
        GameEventTermServiceClick = 102,
        /// <summary>
        /// 点击PrivacyPolicy时发送日志
        /// </summary>
        GameEventPrivacyClick = 103,
        /// <summary>
        /// 点击金币优惠券活动的开屏广告的REDEEM
        /// </summary>
        GameEventCouponActivityCoinsAdenter = 104,
        /// <summary>
        /// 点击金币优惠券活动的开屏广告的关闭按钮
        /// </summary>
        GameEventCouponActivityCoinsAdclose = 105,
        /// <summary>
        /// 点击邮箱中的金币优惠券的REDEEM
        /// </summary>
        GameEventCouponActivityCoinsRedeem = 106,
        /// <summary>
        /// 点击金币优惠券活动的轮播图广告的REDEEM
        /// </summary>
        GameEventCouponActivityCoinsCarouselenter = 107,
        /// <summary>
        /// 漏斗：进入赛季Quest，发送日志；extras记录来源source（Guide、Advertisement、Lobby），赛季ID
        /// </summary>
        GameEventQuestSeasonEnter = 108,
        /// <summary>
        /// 漏斗：点击进入排行榜，发送日志
        /// </summary>
        GameEventQuestSeasonRankenter = 109,
        /// <summary>
        /// 漏斗：点击查看排行榜奖励页签，发送日志
        /// </summary>
        GameEventQuestSeasonRankaward = 110,
        /// <summary>
        /// 漏斗：点击查看加速齿轮详情，发送日志；extras记录来源（Lobby, Machine ID）
        /// </summary>
        GameEventQuestSeasonSpeedupCheck = 111,
        /// <summary>
        /// 漏斗：购买加速齿轮时，发送日志；extras记录来源（Lobby, Machine ID），玩家购买时的剩余钻石数
        /// </summary>
        GameEventQuestSeasonSpeedupBuy = 112,
        /// <summary>
        /// 漏斗：主动点击查看QUEST PASS详情，发送日志
        /// </summary>
        GameEventQuestSeasonQuestpassCheck = 113,
        /// <summary>
        /// 漏斗：购买QUEST PASS时，发送日志；extra 记录当前Machine ID
        /// </summary>
        GameEventQuestSeasonQuestpassBuy = 114,
        /// <summary>
        /// 漏斗：点击赛季Quest，进入机器，发送日志，extras 记录倒计时CountDown，机台ID，赛季ID
        /// </summary>
        GameEventQuestSeasonTap = 115,
        /// <summary>
        /// 漏斗：完成赛季Quest，完成机器，发送日志，extras记录倒计时CountDown，机台ID，赛季ID
        /// </summary>
        GameEventQuestSeasonComplete = 116,
        /// <summary>
        /// 漏斗：领取赛季Quest，领取机器节点，发送日志，extras记录倒计时CountDown，机台ID，赛季ID
        /// </summary>
        GameEventQuestSeasonCollect = 117,
        /// <summary>
        /// 漏斗：选择PHASE难度时，发送日志，extras 记录玩家选择的难度以及Phase的编号（PHASE编号按照123456789...顺延）
        /// </summary>
        GameEventQuestSeasonSelect = 118,
        /// <summary>
        /// 达到Level5
        /// </summary>
        GameEventPassLv5 = 119,
        /// <summary>
        /// 达到Level9
        /// </summary>
        GameEventPassLv9 = 120,
        /// <summary>
        /// 达到Level10
        /// </summary>
        GameEventPassLv10 = 121,
        /// <summary>
        /// 达到Level15
        /// </summary>
        GameEventPassLv15 = 122,
        /// <summary>
        /// 达到Level20
        /// </summary>
        GameEventPassLv20 = 123,
        /// <summary>
        /// 达到Level25
        /// </summary>
        GameEventPassLv25 = 124,
        /// <summary>
        /// 达到Level30
        /// </summary>
        GameEventPassLv30 = 125,
        /// <summary>
        /// 达到Level40
        /// </summary>
        GameEventPassLv40 = 126,
        /// <summary>
        /// 达到Level50
        /// </summary>
        GameEventPassLv50 = 127,
        /// <summary>
        /// 达到Level60
        /// </summary>
        GameEventPassLv60 = 128,
        /// <summary>
        /// 达到Level70
        /// </summary>
        GameEventPassLv70 = 129,
        /// <summary>
        /// 返回大厅
        /// </summary>
        GameEventBackLobby = 130,
        /// <summary>
        /// 点击并弹出砸蛋界面发送日志；宣传页1，其他2
        /// </summary>
        GameEventCrazeSmashPop = 151,
        /// <summary>
        /// 获得锤子时发送日志；extras记录锤子类型（1.银锤子， 2.金锤子）
        /// </summary>
        GameEventCrazeSmashCollect = 152,
        /// <summary>
        /// 使用锤子时发送日志；extras记录时间点，等级，剩余锤子，获得道具（1. 空，2. EXTRA，3.FINAL）
        /// </summary>
        GameEventCrazeSmashWin = 153,
        /// <summary>
        /// 点击购买锤子界面时发送日志；extras记录点击入口（1.1个银锤子，2. 多个银锤子，3.1个金锤子，4.多个金锤子）
        /// </summary>
        GameEventCrazeSmashBuyEnter = 154,
        /// <summary>
        /// 购买锤子时发送日志；extras记录锤子类型（1.银锤子， 2.金锤子），记录购买数量
        /// </summary>
        GameEventCrazeSmashBuy = 155,
        /// <summary>
        /// 达到level23
        /// </summary>
        GameEventPassLv23 = 156,
        /// <summary>
        /// 达到level65
        /// </summary>
        GameEventPassLv65 = 157,
        /// <summary>
        /// 达到level75
        /// </summary>
        GameEventPassLv75 = 158,
        /// <summary>
        /// 达到level80
        /// </summary>
        GameEventPassLv80 = 159,
        /// <summary>
        /// 达到level90
        /// </summary>
        GameEventPassLv90 = 160,
        /// <summary>
        /// 达到level95
        /// </summary>
        GameEventPassLv95 = 161,
        /// <summary>
        /// 达到level100
        /// </summary>
        GameEventPassLv100 = 162,
        /// <summary>
        /// 达到level105
        /// </summary>
        GameEventPassLv105 = 163,
        /// <summary>
        /// 达到level110
        /// </summary>
        GameEventPassLv110 = 164,
        /// <summary>
        /// 达到level120
        /// </summary>
        GameEventPassLv120 = 165,
        /// <summary>
        /// 达到level130
        /// </summary>
        GameEventPassLv130 = 166,
        /// <summary>
        /// 达到level150
        /// </summary>
        GameEventPassLv150 = 167,
        /// <summary>
        /// 一次性付费1.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        /// </summary>
        GameEventPurchaseOnetime199 = 168,
        /// <summary>
        /// 一次性付费4.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        /// </summary>
        GameEventPurchaseOnetime499 = 169,
        /// <summary>
        /// 一次性付费9.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        /// </summary>
        GameEventPurchaseOnetime999 = 170,
        /// <summary>
        /// 一次性付费19.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        /// </summary>
        GameEventPurchaseOnetime1999 = 171,
        /// <summary>
        /// 一次性付费49.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        /// </summary>
        GameEventPurchaseOnetime4999 = 172,
        /// <summary>
        /// 看完ad rush的10个广告
        /// </summary>
        GameEventCompleteAdrush10Ads = 173,
        /// <summary>
        /// 达到level32
        /// </summary>
        GameEventPassLv32 = 174,
        /// <summary>
        /// 达到level35
        /// </summary>
        GameEventPassLv35 = 175,
        /// <summary>
        /// 达到level160
        /// </summary>
        GameEventPassLv160 = 176,
        /// <summary>
        /// 达到level180
        /// </summary>
        GameEventPassLv180 = 177,
        /// <summary>
        /// 达到Level 200
        /// </summary>
        GameEventPassLv200 = 178,
        /// <summary>
        /// 达到Level 220
        /// </summary>
        GameEventPassLv220 = 179,
        /// <summary>
        /// 达到Level 240
        /// </summary>
        GameEventPassLv240 = 180,
        /// <summary>
        /// 达到Level 260
        /// </summary>
        GameEventPassLv260 = 181,
        /// <summary>
        /// 达到Level 280
        /// </summary>
        GameEventPassLv280 = 182,
        /// <summary>
        /// 达到Level 320
        /// </summary>
        GameEventPassLv320 = 183,
        /// <summary>
        /// 达到Level 350
        /// </summary>
        GameEventPassLv350 = 184,
        /// <summary>
        /// 达到Level 380
        /// </summary>
        GameEventPassLv380 = 185,
        /// <summary>
        /// 达到Level 400
        /// </summary>
        GameEventPassLv400 = 186,
        /// <summary>
        /// 达到Level 430
        /// </summary>
        GameEventPassLv430 = 187,
        /// <summary>
        /// 达到Level 450
        /// </summary>
        GameEventPassLv450 = 188,
        /// <summary>
        /// 达到Level 470
        /// </summary>
        GameEventPassLv470 = 189,
        /// <summary>
        /// 达到Level 500
        /// </summary>
        GameEventPassLv500 = 190,
        /// <summary>
        /// 达到Level 520
        /// </summary>
        GameEventPassLv520 = 191,
        /// <summary>
        /// 达到Level 550
        /// </summary>
        GameEventPassLv550 = 192,
        /// <summary>
        /// 达到Level 570
        /// </summary>
        GameEventPassLv570 = 193,
        /// <summary>
        /// 达到Level 600
        /// </summary>
        GameEventPassLv600 = 194,
        /// <summary>
        /// RV广告看完了 extra（ duration 观看时长，placeId,广告位）
        /// </summary>
        GameEventRvWatchedFinished = 195,
        /// <summary>
        /// 进入收集卡牌活动主界面时，发送日志，extras记录来源和打开次数（1. 玩家点击全屏广告，2. 点击大厅ICON）
        /// </summary>
        GameEventCollectionEnter = 201,
        /// <summary>
        /// 收集卡牌主界面中，点击卡册，发送日志，extras记录点击了哪个卡册（1～12根据ID）
        /// </summary>
        GameEventCollectionAlbumEnter = 202,
        /// <summary>
        /// 卡册界面中玩家操作，发送日志，extras记录点击次数（1.点击未获得卡片，2.点击以获得卡片，3.点击左右切换）
        /// </summary>
        GameEventCollectionAlbumCardcheck = 203,
        /// <summary>
        /// 收集卡牌主界面中点击LuckChallenge时，发送日志
        /// </summary>
        GameEventCollectionLuckyChallengeEnter = 204,
        /// <summary>
        /// 收集卡牌主界面中点击LuckSpin时，发送日志
        /// </summary>
        GameEventCollectionLuckySpinEnter = 205,
        /// <summary>
        /// LuckSpin中点击按钮时，发送日志，extras记录点击按钮次数（1.SPIN，2.SPIN ALL ,3.SPIN ALL二级弹窗CONFIRM，4.SPIN ALL二级弹窗"X"，5.CHECK PRIZE,6"X按钮"）
        /// </summary>
        GameEventCollectionLuckySpinStart = 206,
        /// <summary>
        /// LuckSpin奖励弹窗出现时，发送日志，extras记录按钮次数（1.LATER，2.COLLECT NOW）
        /// </summary>
        GameEventCollectionLuckySpinResult = 207,
        /// <summary>
        /// 收集卡牌主界面中点击Fortune Exchange时，发送日志
        /// </summary>
        GameEventCollectionFortuneExchangeEnter = 208,
        /// <summary>
        /// Fortune Exchange游戏中，发送日志，extras记录按钮次数（1.SELECT FOR ME, 2.SPIN）
        /// </summary>
        GameEventCollectionFortuneExchangeStart = 209,
        /// <summary>
        /// 点击Fortune Exchange 帮助按钮时发送日志
        /// </summary>
        GameEventCollectionFortuneExchangeRule = 210,
        /// <summary>
        /// 进入4选1游戏后发送日志，extras记录来源和打开次数（1.卡册主界面ICON，2.点击老虎机中的ICON)
        /// </summary>
        GameEventCollectionMagicHatEnter = 211,
        /// <summary>
        /// 进入4选1游戏在主界面点击按钮时，发送日记，extras记录来源和打开次数（1.点击PLAY，2.点击“X”退出）
        /// </summary>
        GameEventCollectionMagicHatStart = 212,
        /// <summary>
        /// 4选1游戏过程中点击TAKE &amp; LEAVE按钮时，发送日志
        /// </summary>
        GameEventCollectionMagicHatTake = 213,
        /// <summary>
        /// 4选1游戏过程死亡弹窗出现点击按钮，发送日志，extras记录来源和打开次数（1.点击广告按钮，2.花宝石复活，3.GIVE UP）
        /// </summary>
        GameEventCollectionMagicHatOver = 214,
        /// <summary>
        /// 4选1游戏过程中玩到15关出现弹窗，点击COLLECT按钮时发送日志
        /// </summary>
        GameEventCollectionMagicHatComplete = 215,
        /// <summary>
        /// 小猪机台礼包弹出时发送日子，extras记录弹出途径（1.自动弹出，2.玩家点击）
        /// </summary>
        GameEventPiggyBonusGiftboxPopup = 230,
        /// <summary>
        /// 小猪机台礼包点击购买时，发送日志
        /// </summary>
        GameEventPiggyBonusGiftboxBuy = 231,
        /// <summary>
        /// 小猪机台礼包购买成功时，发送日志
        /// </summary>
        GameEventPiggyBonusGiftboxBuySuccessful = 232,
        /// <summary>
        /// 新手quest加速电池购买页面弹出时，发送日志，extra记录弹出途径（1.自动弹出，2.玩家点击）
        /// </summary>
        GameEventNewbiequestBoostPopup = 233,
        /// <summary>
        /// 新手quest加速电池广告页面弹出时，发送日志
        /// </summary>
        GameEventNewbiequestBoostAdPopup = 234,
        /// <summary>
        /// 新手quest加速电池购买页面弹出，点击购买时，发送日志，extra记录购买哪个档次（1.2.3）
        /// </summary>
        GameEventNewbiequestBoostBuy = 235,
        /// <summary>
        /// 新手quest加速电池购买页面弹出，购买成功时，发送日志，extra记录购买哪个档次（1.2.3）
        /// </summary>
        GameEventNewbiequestBoostBuySuccessful = 236,
        /// <summary>
        /// 新手quest加速电池广告页面弹出，点击观看时，发送日志
        /// </summary>
        GameEventNewbiequestBoostAdWatch = 237,
        /// <summary>
        /// 点击打开角色头像时，发送日志
        /// </summary>
        GameEventAvatarOpen = 238,
        /// <summary>
        /// 点击更换角色头像时，发送日志，extra 记录头像id
        /// </summary>
        GameEventAvatarChange = 239,
        /// <summary>
        /// 游戏启动性能追踪，extras里记录各个时间点的时间戳，value取毫秒的时间戳整数，key取如下值，包括但不限于：;启动: launch;拉取灰度开始: fetch_version_start;拉取灰度成功: fetch_version_success;拉取灰度失败: fetch_version_failure;下载热更代码开始: fetch_il_code_start;下载热更代码成功: fetch_il_code_success;下载热更代码失败: fetch_il_code_failure;短连接登录开始: login_start;短连接登录成功: login_success;短连接登录失败: login_failure;长链接开始: socket_io_connect_start;长链接成功: socket_io_connect_success;长链接失败: socket_io_connenct_failure;大厅协议开始: lobby_protocol_start;大厅协议成功: lobby_protocol_success;大厅协议失败: lobby_protocol_failure;进入大厅: enter_lobby
        /// </summary>
        GameEventLaunchMetrics = 240,
        /// <summary>
        /// 玩家行为日志记录
        /// </summary>
        GaemEventUserAction = 250,
        /// <summary>
        /// 进入大富翁系统，发送日志，extras记录来源和打开次数（1. 全屏广告，2. 轮播广告，3. 机台左侧icon，4.强制弹窗，5.门票已满强制弹窗，6.门票已满二次确认弹窗，7.大厅ICON进入）
        /// </summary>
        GameEventTreasureraidEnter = 300,
        /// <summary>
        /// 门票已满，发送日志，extras记录玩家操作（1.门票已满弹窗点击X）
        /// </summary>
        GameEventTreasureraidTicketfull = 301,
        /// <summary>
        /// 机台中点击SPIN获得门票经验时，发送日志
        /// </summary>
        GameEventTreasureraidExpup = 302,
        /// <summary>
        /// 大富翁点击SPIN转盘时，发送日志
        /// </summary>
        GameEventTreasureraidWhirl = 303,
        /// <summary>
        /// 大炮FIRE AGAIN弹窗出现点击按钮时记录（1.点击看广告，2.点击花宝石，3.点击关闭）
        /// </summary>
        GameEventTreasureraidFireagain = 304,
        /// <summary>
        /// 大富翁宝箱栏位已满再次获得宝箱时弹窗操作记录（1.关闭弹窗，2.花费宝石开启）
        /// </summary>
        GameEventTreasureraidChestmore = 305,
        /// <summary>
        /// 玩家点击花费宝石开启宝箱时弹窗操作记录（1.关闭弹窗，2.花费宝石开启）
        /// </summary>
        GameEventTreasureraidChestopen = 306,
        /// <summary>
        /// 宝箱倒计时结束，点击开启宝箱按钮时，发送日志
        /// </summary>
        GameEventTreasureraidCountdownOver = 307,
        /// <summary>
        /// 点击SPIN下面的【+】号弹出购买弹窗时，操作记录（1.关闭弹窗，2，购买门票）
        /// </summary>
        GameEventTreasureraidPurchaseWindow = 308,
        /// <summary>
        /// 玩家进入新关卡时，进行记录（1.关卡1，2.关卡2，3.关卡3，4.关卡4，5.关卡5，6.关卡6）
        /// </summary>
        GameEventTreasureraidLevelprize = 309,
        /// <summary>
        /// 玩家完成轮次时，进行记录（1.完成第1轮，2.完成第2轮，3.完成第3轮，4.完成第4轮，5.完成第5轮，6.完成第6轮，7.完成第7轮，8.完成第8轮，9.完成第9轮）
        /// </summary>
        GameEventTreasureraidRoundprize = 310,
        /// <summary>
        /// 玩家成功购买Booster电池时，发送日记
        /// </summary>
        GameEventTreasureraidBoosterBuy1 = 311,
        /// <summary>
        /// 玩家成功购买Booster火炮伤害翻倍，发送日记
        /// </summary>
        GameEventTreasureraidBoosterBuy2 = 312,
        /// <summary>
        /// 玩家成功购买Booster传送门，发送日记
        /// </summary>
        GameEventTreasureraidBoosterBuy3 = 313,
        /// <summary>
        /// 玩家完成每日任务，进行记录（1.完成1，2.完成2，3.完成3，4.完成4，5.完成5，6.完成6，）
        /// </summary>
        GameEventTreasureraidMission = 314,
        /// <summary>
        /// 机台中点击SPIN经验增加到100%获得门票时增加打点
        /// </summary>
        GameEventTreasureraidGettickets = 315,
        /// <summary>
        /// 大富翁地图中获得Puzzle碎片时，发送日志
        /// </summary>
        GameEventTreasureraidGetpuzzle = 316,
        /// <summary>
        /// 大富翁Puzzle完成时，发送日志，记录玩家完成ID（1.完成图1，2.完成图2，3.完成图3，4.完成图4，5.完成图5，6.完成图6）
        /// </summary>
        GameEventTreasureraidWinpuzzle = 317,
        /// <summary>
        /// 大富翁玩家点击打开排行榜系统时，发送日志
        /// </summary>
        GameEventTreasureraidOpenrank = 318,
        /// <summary>
        /// 玩家通过邮件成功领取大富翁排行榜奖励时，发送日志
        /// </summary>
        GameEventTreasureraidCollectrankreward = 319,
        /// <summary>
        /// 进入COINDASH系统，发送日志，extras记录来源和打开次数（1.大厅轮播广告进入）
        /// </summary>
        GameEventCoindashEnter = 330,
        /// <summary>
        /// COINDASH系统领取奖励时发送日志（1.领取第1个奖励，2.领取第2个奖励，3.领取第3个奖励，4.领取第4个奖励，5.领取第5个奖励）
        /// </summary>
        GameEventCoindashCollect = 331,
        /// <summary>
        /// 完成金币付费进入SuperSpinX系统时发送日志，extras记录触发时付费金额（1.1.99，2.4.99， 3.9.99，4.19.99，5.49.99，6.99.99）
        /// </summary>
        GameEventSuperspinxPlay = 332,
        /// <summary>
        /// 记录SpuerSpinX转停，extras记录中奖符号（1.any other ，2.樱桃，3.骰子，4.铃铛，5.宝石，6.七，7.any other 3 ,8.中2个jp， 9.中3个jp）
        /// </summary>
        GameEventSuperspinxWinmultiple = 333,
        /// <summary>
        /// 完成LevelRush所有节点时，发送日志
        /// </summary>
        GameEventLevelrushComplete = 340,
        /// <summary>
        /// 完成LevelRush节点时，发送日志（1.完成节点1，2.完成节点2，3.完成节点3）
        /// </summary>
        GameEventLevelrushNodecomplete = 341,
        /// <summary>
        /// 通过Rush促销界面，点击【TURN IT ON】跳转【商店】界面时，发送日志
        /// </summary>
        GameEventLevelrushTurniton = 342,
        /// <summary>
        /// 触发LevelRush失败弹窗，发送日志
        /// </summary>
        GameEventLevelrushFail = 343,
        /// <summary>
        /// 触发Lotto游戏弹窗，发送日志（1.通过弹窗点击Play，2.点击【X】吧Lotto保存在邮箱）
        /// </summary>
        GameEventLevelrushLottopop = 344,
        /// <summary>
        /// 在邮箱中触发Lotto游戏时，发送日志
        /// </summary>
        GameEventLevelrushMailplay = 345,
        /// <summary>
        /// 免费Lotto点击【Play】按钮时，发送日志
        /// </summary>
        GameEventLevelrushFreeplay = 346,
        /// <summary>
        /// 免费Lotto结算界面点击【COLLECT】按钮时，发送日志
        /// </summary>
        GameEventLevelrushFreecollect = 347,
        /// <summary>
        /// 付费Lotto触发点击按钮时，发送日志（1.点击付费并且成功，2.点击关闭按钮）
        /// </summary>
        GameEventLevelrushPaypop = 348,
        /// <summary>
        /// 付费Lotto结算界面点击【COLLECT】按钮时，发送日志
        /// </summary>
        GameEventLevelrushPaycollect = 349,
        /// <summary>
        /// 进入情人节活动主页时，发送日志，extras记录来源和打开次数（1. 玩家点击全屏广告，2. 玩家点击轮播广告，3. 玩家完成任务主动弹出）
        /// </summary>
        GameEventValentinesdayEnter = 1001,
        /// <summary>
        /// 情人节活动点亮新的地图进度时，发送日志，extras 记录前进步数和获取来源（1. daily mission, 2. honor mission)
        /// </summary>
        GameEventValentinesdayProgress = 1002,
        /// <summary>
        /// 情人节活动，领取奖励时，发送日志，extras记录领取奖励的ID
        /// </summary>
        GameEventValentinesdayCollect = 1003,
        /// <summary>
        /// 情人节活动，解锁PASS时，发送日志，extras记录来源（1.情人节大厅界面，2.领奖界面），记录解锁时玩家达到的情人节奖励点的位置
        /// </summary>
        GameEventValentinesdayPassunlock = 1004,
        /// <summary>
        /// 购买商城1.99商品
        /// </summary>
        GameEventPurchaseShopCoin199 = 1005,
        /// <summary>
        /// 购买商城4.99商品
        /// </summary>
        GameEventPurchaseShopCoin499 = 1006,
        /// <summary>
        /// 购买商城9.99商品
        /// </summary>
        GameEventPurchaseShopCoin999 = 1007,
        /// <summary>
        /// 购买商城19.99商品
        /// </summary>
        GameEventPurchaseShopCoin1999 = 1008,
        /// <summary>
        /// 进入独立日活动主页时，发送日志，extras记录来源和打开次数（1. 玩家点击全屏广告，2. 玩家点击轮播广告）
        /// </summary>
        GameEventFourthofjulyEnter = 1009,
        /// <summary>
        /// 独立日活动点亮新的地图进度时，发送日志
        /// </summary>
        GameEventFourthofjulyProgress = 1010,
        /// <summary>
        /// 独立日活动，成功领取奖励时，发送日志
        /// </summary>
        GameEventFourthofjulyCollect = 1011,
        /// <summary>
        /// 独立日活动，成功购买付费PASS时，发送日志
        /// </summary>
        GameEventFourthofjulyPassunlock = 1012,
        /// <summary>
        /// 完成RushPass节点时，发送日志（1.完成节点1，2.完成节点2，3.完成节点3，4.完成节点4，5.完成节点5，6.完成节点6）
        /// </summary>
        GameEventRushpassWin = 1020,
        /// <summary>
        /// RushPass付费成功时，发送日志（1.结算面板付费成功，2.PASS界面付费成功）
        /// </summary>
        GameEventRushpassPaysuccess = 1021,
        /// <summary>
        /// RushPass活动开启，玩家通过点击【LevelRush】的进度条进入RushPass界面是，发送日志
        /// </summary>
        GameEventRushpassEnter = 1022,
      }

      public enum SpinActionType {
        /// <summary>
        /// 占位
        /// </summary>
        None = 0,
        /// <summary>
        /// SPIN；extras记录游戏状态（如BaseGame、Feature）
        /// </summary>
        Spin = 1,
        /// <summary>
        /// 提前停止Spin
        /// </summary>
        Stop = 2,
        /// <summary>
        /// 没有钱了
        /// </summary>
        NoChips = 3,
        /// <summary>
        /// 机器Feature；extras记录feature_type（如FreeGame、Link、Map）、其余信息和前端同学协商
        /// </summary>
        FeatureTrigger = 4,
        /// <summary>
        /// 
        /// </summary>
        FeaturePlay = 5,
        /// <summary>
        /// 机器Feature结束；extras记录的游戏状态和前端同学协商
        /// </summary>
        FeatureEnd = 6,
        /// <summary>
        /// extras中记录：;jackpotId: jackpotId;jackpotLevel: "mini", "minor", "major", "grand";jackpotWin: jackpot对应的赢钱
        /// </summary>
        Jackpot = 7,
        /// <summary>
        /// 切换Bet
        /// </summary>
        ChangeBet = 8,
        /// <summary>
        /// 查看PayTable
        /// </summary>
        OpenPaytable = 9,
      }

      public enum Item {
        /// <summary>
        /// 占位
        /// </summary>
        None = 0,
        /// <summary>
        /// 金币
        /// </summary>
        Coin = 1,
        /// <summary>
        /// 经验
        /// </summary>
        Exp = 2,
        /// <summary>
        /// VIP点数
        /// </summary>
        VipPoints = 3,
        /// <summary>
        /// 绿宝石
        /// </summary>
        Emerald = 4,
        /// <summary>
        /// GiftBox
        /// </summary>
        GiftBox = 5,
        /// <summary>
        /// 升级奖励Boost
        /// </summary>
        LevelUpBurst = 6,
        /// <summary>
        /// 付费转轮奖励Boost
        /// </summary>
        SuperWheel = 7,
        /// <summary>
        /// 双倍经验Boost
        /// </summary>
        DoubleXp = 8,
        /// <summary>
        /// DailyMission点数
        /// </summary>
        MissionPoints = 9,
        /// <summary>
        /// MissionPass点数
        /// </summary>
        MissionStars = 10,
      }

      public enum ItemChangeReason {
        /// <summary>
        /// 占位
        /// </summary>
        None = 0,
        /// <summary>
        /// 获得：创建账号获得发送日志
        /// </summary>
        CreateProfile = 1,
        /// <summary>
        /// 获得：完成新手引导拿到金币、绿宝石；extras记录新手引导任务
        /// </summary>
        Guide = 2,
        /// <summary>
        /// 获得：完成新手Quest拿到金币、绿宝石、Boost；extras记录新手Quest关卡进度
        /// </summary>
        Quest = 3,
        /// <summary>
        /// 获得：绑定Facebook拿到金币
        /// </summary>
        BindFacebook = 4,
        /// <summary>
        /// 获得：like粉丝页奖励拿到金币
        /// </summary>
        LikeUs = 5,
        /// <summary>
        /// 获得：支付获得金币、绿宝石、VIP点数、GiftBox、Boost；extras 记录product_id、玩家余额、机器id、是否使用了Coupon
        /// </summary>
        Iap = 6,
        /// <summary>
        /// 获得：领取商店免费金币拿到金币
        /// </summary>
        StoreBonus = 7,
        /// <summary>
        /// 获得：领取商店GiftBox拿到金币
        /// </summary>
        StoreGiftBox = 8,
        /// <summary>
        /// 获得：Spin拿到金币、经验；extras记录机器id，如果在feature中则记录Freespin、Respin、SmallGame
        /// </summary>
        Spin = 9,
        /// <summary>
        /// 获得：升级拿到金币、VIP点数
        /// </summary>
        LevelUp = 10,
        /// <summary>
        /// 获得：VIP升级拿到金币及消耗经验；extras记录升级后的VIP等级
        /// </summary>
        VipLevelUp = 11,
        /// <summary>
        /// 获得：领取DailyBonus拿到金币、绿宝石、Boost；extras记录第几天奖励、累计签到天数
        /// </summary>
        DailyBonusDaily = 12,
        /// <summary>
        /// 获得：累计签到一定天数领取拿到金币、绿宝石、Boost；extras记录Stage阶段（1、2、3）、累计签到天数
        /// </summary>
        DailyBonusStage = 13,
        /// <summary>
        /// 获得：领取TimerBonus每小时奖励拿到金币
        /// </summary>
        TimerBonusHourly = 14,
        /// <summary>
        /// 获得：领取TimerBonus转盘奖励拿到金币；extras记录拿到的扇叶id、SuperWheelBoost(记0、1)
        /// </summary>
        TimerBonusWheel = 15,
        /// <summary>
        /// 获得：领取TimerBonus3层转盘奖励拿到金币、绿宝石
        /// </summary>
        TimerBonusExtraWheel = 16,
        /// <summary>
        /// 获得：完成每日任务拿到金币、MissionPoints、MissionStars；消耗：花费绿宝石完成每日任务；extras记录完成任务关数1、2、3
        /// </summary>
        DailyMissionNormal = 17,
        /// <summary>
        /// 获得：完成Honor任务拿到金币、MissionPoints、MissionStars；extras记录Honor任务完成轮数与当前轮的次数
        /// </summary>
        DailyMissionHonor = 18,
        /// <summary>
        /// 获得：达到一定MissionPoints拿到金币、绿宝石、Boost；extras记录领取时MissionPoints和Stage阶段1、2
        /// </summary>
        DailyMissionStage = 19,
        /// <summary>
        /// 获得：领取MissionPass免费拿到金币、绿宝石、Boost、Vip点数；extras记录MissionPass奖励等级和当前MissionPass等级
        /// </summary>
        MissionPassFree = 20,
        /// <summary>
        /// 获得：领取MissionPass付费拿到金币、绿宝石、Boost、Vip点数；extras记录MissionPass奖励等级和当前MissionPass等级
        /// </summary>
        MissionPassMission = 21,
        /// <summary>
        /// 获得：领取MissionPass限时拿到金币、绿宝石、Boost、Vip点数；extras记录MissionPass奖励等级、当前MissionPass等级和任务倒计时
        /// </summary>
        MissionPassLimited = 22,
        /// <summary>
        /// 消耗：花费绿宝石购买MissionPass等级；extras记录当前MissionPass等级
        /// </summary>
        MissionPassLevel = 23,
        /// <summary>
        /// 获得：领取Inbox拿到的金币、绿宝石、Boost、Vip点数；extras记录发放原因如MissionPassChest等级赛季结算、CashBack活动
        /// </summary>
        Inbox = 24,
        /// <summary>
        /// 获得：观看广告拿到金币；extras记录广告入口
        /// </summary>
        Ads = 25,
        /// <summary>
        /// 获得：后台权限增加拿到的金币、绿宝石、Boost、Vip点数等；extras记录备注
        /// </summary>
        Admin = 26,
        /// <summary>
        /// 消耗：GiftBox填满或者过期、MissionPoints清零、MissionStar清零；
        /// </summary>
        Expire = 27,
        /// <summary>
        /// 获得：绑定AppleId拿到金币
        /// </summary>
        BindAppleid = 28,
        /// <summary>
        /// 获得：完成免费情人节任务拿到金币、绿宝石、Boost；extras记录领取到哪个阶段
        /// </summary>
        ValentinegiftFree = 29,
        /// <summary>
        /// 获得：完成付费情人节任务拿到金币、绿宝石、Boost；extras记录领取到哪个阶段
        /// </summary>
        ValentinegiftPurchase = 30,
        /// <summary>
        /// 获得：完成卡牌系统Set收集拿到金币；extras记录setId
        /// </summary>
        CompleteSet = 31,
        /// <summary>
        /// 获得：完成卡牌系统所有收集拿到金币；extras记录完成时卡牌剩余数量、星星剩余数量、赛季倒计时（天）
        /// </summary>
        CompleteAlbum = 32,
        /// <summary>
        /// 获得：玩luckyspin小游戏拿金币、绿宝石、卡包
        /// </summary>
        LuckySpin = 33,
        /// <summary>
        /// 获得：玩cardrecover小游戏拿金币；extras记录玩家进行游戏时点亮锯齿的数量、玩家游戏频率
        /// </summary>
        CardRecover = 34,
        /// <summary>
        /// 消耗：使用钻石在4选1游戏中复活
        /// </summary>
        MagicHatRelife = 35,
        /// <summary>
        /// 消耗：消耗运营发放的COUPON链接领取了相应的奖励
        /// </summary>
        OperationCoupon = 36,
        /// <summary>
        /// 获得：4选1获得奖励
        /// </summary>
        MagicHatGetRewards = 37,
        /// <summary>
        /// 获得：大富翁通关奖励
        /// </summary>
        TreasureraidLevelprize = 38,
        /// <summary>
        /// 获得：大富翁SPIN后地图金币奖励
        /// </summary>
        TreasureraidGoldwin = 39,
        /// <summary>
        /// 消耗：大富翁二次开炮消耗宝石
        /// </summary>
        TreasureraidFireagain = 40,
        /// <summary>
        /// 消耗：大富翁开启宝箱消耗宝石
        /// </summary>
        TreasureraidOpennow = 41,
        /// <summary>
        /// 获得：大富翁开启宝箱获得各种奖励
        /// </summary>
        TreasureraidBoxwin = 42,
        /// <summary>
        /// 获得：大富翁获得每日任务奖励
        /// </summary>
        TreasureraidMission = 43,
        /// <summary>
        /// 获得：COINDASH领取免费奖励
        /// </summary>
        CoindashFree = 44,
        /// <summary>
        /// 获得：LevelRush奖励
        /// </summary>
        LevelrushWin = 45,
        /// <summary>
        /// 获得：免费Lotto奖励
        /// </summary>
        LottoWin = 46,
        /// <summary>
        /// 获得：完成免费独立日任务拿到金币、绿宝石、Boost；extras记录领取到哪个阶段
        /// </summary>
        FourthofjulyFreewin = 47,
        /// <summary>
        /// 获得：完成付费独立日任务拿到金币、绿宝石、Boost；extras记录领取到哪个阶段
        /// </summary>
        FourthofjulyPurchase = 48,
        /// <summary>
        /// 获得：完成付费SUPERSPINX获得金币奖励
        /// </summary>
        SuperspinxPurchase = 49,
        /// <summary>
        /// 获得：领取免费RushPass奖励
        /// </summary>
        RushpassFreewin = 50,
        /// <summary>
        /// 获得：领取付费RushPass奖励
        /// </summary>
        RushpassPurchase = 51,
        /// <summary>
        /// 获得：大富翁获得Puzzle奖励
        /// </summary>
        TreasureraidPuzzlerewards = 52,
        /// <summary>
        /// 获得：大富翁获得排行榜奖励
        /// </summary>
        TreasureraidRankrewards = 53,
      }

      public sealed class Common : pb::IMessage {
        private static readonly pb::MessageParser<Common> _parser = new pb::MessageParser<Common>(() => new Common());
        public static pb::MessageParser<Common> Parser { get { return _parser; } }

        private ulong coin_;
        /// <summary>
        /// 当前金币数量
        /// </summary>
        public ulong Coin {
          get { return coin_; }
          set {
            coin_ = value;
          }
        }

        private ulong level_;
        /// <summary>
        /// 当前等级
        /// </summary>
        public ulong Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        private ulong vipLevel_;
        /// <summary>
        /// 当前vip等级
        /// </summary>
        public ulong VipLevel {
          get { return vipLevel_; }
          set {
            vipLevel_ = value;
          }
        }

        private ulong emerald_;
        /// <summary>
        /// 当前绿宝石数量
        /// </summary>
        public ulong Emerald {
          get { return emerald_; }
          set {
            emerald_ = value;
          }
        }

        private ulong vipPoints_;
        /// <summary>
        /// 当前vip点数数量
        /// </summary>
        public ulong VipPoints {
          get { return vipPoints_; }
          set {
            vipPoints_ = value;
          }
        }

        private ulong exp_;
        /// <summary>
        /// 当前经验
        /// </summary>
        public ulong Exp {
          get { return exp_; }
          set {
            exp_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Coin != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Coin);
          }
          if (Level != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(Level);
          }
          if (VipLevel != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(VipLevel);
          }
          if (Emerald != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(Emerald);
          }
          if (VipPoints != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(VipPoints);
          }
          if (Exp != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(Exp);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Coin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Coin);
          }
          if (Level != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Level);
          }
          if (VipLevel != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VipLevel);
          }
          if (Emerald != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Emerald);
          }
          if (VipPoints != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VipPoints);
          }
          if (Exp != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Coin = input.ReadUInt64();
                break;
              }
              case 16: {
                Level = input.ReadUInt64();
                break;
              }
              case 24: {
                VipLevel = input.ReadUInt64();
                break;
              }
              case 32: {
                Emerald = input.ReadUInt64();
                break;
              }
              case 40: {
                VipPoints = input.ReadUInt64();
                break;
              }
              case 48: {
                Exp = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class GameEvent : pb::IMessage {
        private static readonly pb::MessageParser<GameEvent> _parser = new pb::MessageParser<GameEvent>(() => new GameEvent());
        public static pb::MessageParser<GameEvent> Parser { get { return _parser; } }

        private global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.GameEventType gameEventType_ = 0;
        /// <summary>
        /// 
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.GameEventType GameEventType {
          get { return gameEventType_; }
          set {
            gameEventType_ = value;
          }
        }

        private static readonly pbc::MapField<string, string>.Codec _map_extras_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
        private readonly pbc::MapField<string, string> extras_ = new pbc::MapField<string, string>();
        /// <summary>
        /// 
        /// </summary>
        public pbc::MapField<string, string> Extras {
          get { return extras_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (GameEventType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) GameEventType);
          }
          extras_.WriteTo(output, _map_extras_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (GameEventType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameEventType);
          }
          size += extras_.CalculateSize(_map_extras_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                gameEventType_ = (global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.GameEventType) input.ReadEnum();
                break;
              }
              case 18: {
                extras_.AddEntriesFrom(input, _map_extras_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class PanelColumn : pb::IMessage {
        private static readonly pb::MessageParser<PanelColumn> _parser = new pb::MessageParser<PanelColumn>(() => new PanelColumn());
        public static pb::MessageParser<PanelColumn> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<ulong> _repeated_symbols_codec
            = pb::FieldCodec.ForUInt64(10);
        private readonly pbc::RepeatedField<ulong> symbols_ = new pbc::RepeatedField<ulong>();
        /// <summary>
        /// 
        /// </summary>
        public pbc::RepeatedField<ulong> Symbols {
          get { return symbols_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          symbols_.WriteTo(output, _repeated_symbols_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += symbols_.CalculateSize(_repeated_symbols_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 8: {
                symbols_.AddEntriesFrom(input, _repeated_symbols_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class Panel : pb::IMessage {
        private static readonly pb::MessageParser<Panel> _parser = new pb::MessageParser<Panel>(() => new Panel());
        public static pb::MessageParser<Panel> Parser { get { return _parser; } }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.PanelColumn> _repeated_columns_codec
            = pb::FieldCodec.ForMessage(10, global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.PanelColumn.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.PanelColumn> columns_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.PanelColumn>();
        /// <summary>
        /// 
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.PanelColumn> Columns {
          get { return columns_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          columns_.WriteTo(output, _repeated_columns_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += columns_.CalculateSize(_repeated_columns_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                columns_.AddEntriesFrom(input, _repeated_columns_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class SpinAction : pb::IMessage {
        private static readonly pb::MessageParser<SpinAction> _parser = new pb::MessageParser<SpinAction>(() => new SpinAction());
        public static pb::MessageParser<SpinAction> Parser { get { return _parser; } }

        private string gameId_ = "";
        /// <summary>
        /// 
        /// </summary>
        public string GameId {
          get { return gameId_; }
          set {
            gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.SpinActionType spinActionType_ = 0;
        /// <summary>
        /// 
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.SpinActionType SpinActionType {
          get { return spinActionType_; }
          set {
            spinActionType_ = value;
          }
        }

        private bool isAuto_;
        /// <summary>
        /// 
        /// </summary>
        public bool IsAuto {
          get { return isAuto_; }
          set {
            isAuto_ = value;
          }
        }

        private bool isFast_;
        /// <summary>
        /// 
        /// </summary>
        public bool IsFast {
          get { return isFast_; }
          set {
            isFast_ = value;
          }
        }

        private string spinMode_ = "";
        /// <summary>
        /// 
        /// </summary>
        public string SpinMode {
          get { return spinMode_; }
          set {
            spinMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private ulong bet_;
        /// <summary>
        /// 
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private string requestId_ = "";
        /// <summary>
        /// 
        /// </summary>
        public string RequestId {
          get { return requestId_; }
          set {
            requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private static readonly pbc::MapField<string, string>.Codec _map_extras_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 66);
        private readonly pbc::MapField<string, string> extras_ = new pbc::MapField<string, string>();
        /// <summary>
        /// 
        /// </summary>
        public pbc::MapField<string, string> Extras {
          get { return extras_; }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (GameId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(GameId);
          }
          if (SpinActionType != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) SpinActionType);
          }
          if (IsAuto != false) {
            output.WriteRawTag(24);
            output.WriteBool(IsAuto);
          }
          if (IsFast != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsFast);
          }
          if (SpinMode.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(SpinMode);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(Bet);
          }
          if (RequestId.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(RequestId);
          }
          extras_.WriteTo(output, _map_extras_codec);
        }

        public int CalculateSize() {
          int size = 0;
          if (GameId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
          }
          if (SpinActionType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpinActionType);
          }
          if (IsAuto != false) {
            size += 1 + 1;
          }
          if (IsFast != false) {
            size += 1 + 1;
          }
          if (SpinMode.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SpinMode);
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (RequestId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
          }
          size += extras_.CalculateSize(_map_extras_codec);
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                GameId = input.ReadString();
                break;
              }
              case 16: {
                spinActionType_ = (global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.SpinActionType) input.ReadEnum();
                break;
              }
              case 24: {
                IsAuto = input.ReadBool();
                break;
              }
              case 32: {
                IsFast = input.ReadBool();
                break;
              }
              case 42: {
                SpinMode = input.ReadString();
                break;
              }
              case 48: {
                Bet = input.ReadUInt64();
                break;
              }
              case 58: {
                RequestId = input.ReadString();
                break;
              }
              case 66: {
                extras_.AddEntriesFrom(input, _map_extras_codec);
                break;
              }
            }
          }
        }

      }

      public sealed class SpinResult : pb::IMessage {
        private static readonly pb::MessageParser<SpinResult> _parser = new pb::MessageParser<SpinResult>(() => new SpinResult());
        public static pb::MessageParser<SpinResult> Parser { get { return _parser; } }

        private string gameId_ = "";
        /// <summary>
        /// 
        /// </summary>
        public string GameId {
          get { return gameId_; }
          set {
            gameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.SpinActionType spinActionType_ = 0;
        /// <summary>
        /// 
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.SpinActionType SpinActionType {
          get { return spinActionType_; }
          set {
            spinActionType_ = value;
          }
        }

        private string requestId_ = "";
        /// <summary>
        /// 
        /// </summary>
        public string RequestId {
          get { return requestId_; }
          set {
            requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private ulong bet_;
        /// <summary>
        /// 
        /// </summary>
        public ulong Bet {
          get { return bet_; }
          set {
            bet_ = value;
          }
        }

        private ulong win_;
        /// <summary>
        /// 
        /// </summary>
        public ulong Win {
          get { return win_; }
          set {
            win_ = value;
          }
        }

        private static readonly pb::FieldCodec<global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.Panel> _repeated_panels_codec
            = pb::FieldCodec.ForMessage(50, global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.Panel.Parser);
        private readonly pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.Panel> panels_ = new pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.Panel>();
        /// <summary>
        /// 
        /// </summary>
        public pbc::RepeatedField<global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.Panel> Panels {
          get { return panels_; }
        }

        private static readonly pb::FieldCodec<ulong> _repeated_positions_codec
            = pb::FieldCodec.ForUInt64(58);
        private readonly pbc::RepeatedField<ulong> positions_ = new pbc::RepeatedField<ulong>();
        /// <summary>
        /// 
        /// </summary>
        public pbc::RepeatedField<ulong> Positions {
          get { return positions_; }
        }

        private static readonly pbc::MapField<string, string>.Codec _map_extras_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 66);
        private readonly pbc::MapField<string, string> extras_ = new pbc::MapField<string, string>();
        /// <summary>
        /// 
        /// </summary>
        public pbc::MapField<string, string> Extras {
          get { return extras_; }
        }

        private bool isSpinEnd_;
        /// <summary>
        /// 
        /// </summary>
        public bool IsSpinEnd {
          get { return isSpinEnd_; }
          set {
            isSpinEnd_ = value;
          }
        }

        private ulong cost_;
        /// <summary>
        /// 
        /// </summary>
        public ulong Cost {
          get { return cost_; }
          set {
            cost_ = value;
          }
        }

        private ulong displayWin_;
        /// <summary>
        /// 
        /// </summary>
        public ulong DisplayWin {
          get { return displayWin_; }
          set {
            displayWin_ = value;
          }
        }

        private ulong displayTotalWin_;
        /// <summary>
        /// 
        /// </summary>
        public ulong DisplayTotalWin {
          get { return displayTotalWin_; }
          set {
            displayTotalWin_ = value;
          }
        }

        private string controlStragegyId_ = "";
        /// <summary>
        /// 
        /// </summary>
        public string ControlStragegyId {
          get { return controlStragegyId_; }
          set {
            controlStragegyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        private ulong controlStragegyRandom_;
        /// <summary>
        /// 
        /// </summary>
        public ulong ControlStragegyRandom {
          get { return controlStragegyRandom_; }
          set {
            controlStragegyRandom_ = value;
          }
        }

        private ulong coinsPerDollar_;
        /// <summary>
        /// 
        /// </summary>
        public ulong CoinsPerDollar {
          get { return coinsPerDollar_; }
          set {
            coinsPerDollar_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (GameId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(GameId);
          }
          if (SpinActionType != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) SpinActionType);
          }
          if (RequestId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(RequestId);
          }
          if (Bet != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(Bet);
          }
          if (Win != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Win);
          }
          panels_.WriteTo(output, _repeated_panels_codec);
          positions_.WriteTo(output, _repeated_positions_codec);
          extras_.WriteTo(output, _map_extras_codec);
          if (IsSpinEnd != false) {
            output.WriteRawTag(72);
            output.WriteBool(IsSpinEnd);
          }
          if (Cost != 0UL) {
            output.WriteRawTag(80);
            output.WriteUInt64(Cost);
          }
          if (DisplayWin != 0UL) {
            output.WriteRawTag(88);
            output.WriteUInt64(DisplayWin);
          }
          if (DisplayTotalWin != 0UL) {
            output.WriteRawTag(96);
            output.WriteUInt64(DisplayTotalWin);
          }
          if (ControlStragegyId.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(ControlStragegyId);
          }
          if (ControlStragegyRandom != 0UL) {
            output.WriteRawTag(112);
            output.WriteUInt64(ControlStragegyRandom);
          }
          if (CoinsPerDollar != 0UL) {
            output.WriteRawTag(120);
            output.WriteUInt64(CoinsPerDollar);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (GameId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(GameId);
          }
          if (SpinActionType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpinActionType);
          }
          if (RequestId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
          }
          if (Bet != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Bet);
          }
          if (Win != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Win);
          }
          size += panels_.CalculateSize(_repeated_panels_codec);
          size += positions_.CalculateSize(_repeated_positions_codec);
          size += extras_.CalculateSize(_map_extras_codec);
          if (IsSpinEnd != false) {
            size += 1 + 1;
          }
          if (Cost != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Cost);
          }
          if (DisplayWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DisplayWin);
          }
          if (DisplayTotalWin != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DisplayTotalWin);
          }
          if (ControlStragegyId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ControlStragegyId);
          }
          if (ControlStragegyRandom != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ControlStragegyRandom);
          }
          if (CoinsPerDollar != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CoinsPerDollar);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                GameId = input.ReadString();
                break;
              }
              case 16: {
                spinActionType_ = (global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.SpinActionType) input.ReadEnum();
                break;
              }
              case 26: {
                RequestId = input.ReadString();
                break;
              }
              case 32: {
                Bet = input.ReadUInt64();
                break;
              }
              case 40: {
                Win = input.ReadUInt64();
                break;
              }
              case 50: {
                panels_.AddEntriesFrom(input, _repeated_panels_codec);
                break;
              }
              case 58:
              case 56: {
                positions_.AddEntriesFrom(input, _repeated_positions_codec);
                break;
              }
              case 66: {
                extras_.AddEntriesFrom(input, _map_extras_codec);
                break;
              }
              case 72: {
                IsSpinEnd = input.ReadBool();
                break;
              }
              case 80: {
                Cost = input.ReadUInt64();
                break;
              }
              case 88: {
                DisplayWin = input.ReadUInt64();
                break;
              }
              case 96: {
                DisplayTotalWin = input.ReadUInt64();
                break;
              }
              case 106: {
                ControlStragegyId = input.ReadString();
                break;
              }
              case 112: {
                ControlStragegyRandom = input.ReadUInt64();
                break;
              }
              case 120: {
                CoinsPerDollar = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed class ItemChange : pb::IMessage {
        private static readonly pb::MessageParser<ItemChange> _parser = new pb::MessageParser<ItemChange>(() => new ItemChange());
        public static pb::MessageParser<ItemChange> Parser { get { return _parser; } }

        private global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.Item item_ = 0;
        /// <summary>
        /// 
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.Item Item {
          get { return item_; }
          set {
            item_ = value;
          }
        }

        private long amount_;
        /// <summary>
        /// 
        /// </summary>
        public long Amount {
          get { return amount_; }
          set {
            amount_ = value;
          }
        }

        private ulong current_;
        /// <summary>
        /// 
        /// </summary>
        public ulong Current {
          get { return current_; }
          set {
            current_ = value;
          }
        }

        private global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.ItemChangeReason reason_ = 0;
        /// <summary>
        /// 
        /// </summary>
        public global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.ItemChangeReason Reason {
          get { return reason_; }
          set {
            reason_ = value;
          }
        }

        private static readonly pbc::MapField<string, string>.Codec _map_extras_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
        private readonly pbc::MapField<string, string> extras_ = new pbc::MapField<string, string>();
        /// <summary>
        /// 
        /// </summary>
        public pbc::MapField<string, string> Extras {
          get { return extras_; }
        }

        private ulong coinsPerDollar_;
        /// <summary>
        /// 
        /// </summary>
        public ulong CoinsPerDollar {
          get { return coinsPerDollar_; }
          set {
            coinsPerDollar_ = value;
          }
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Item != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Item);
          }
          if (Amount != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Amount);
          }
          if (Current != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Current);
          }
          if (Reason != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Reason);
          }
          extras_.WriteTo(output, _map_extras_codec);
          if (CoinsPerDollar != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(CoinsPerDollar);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Item != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Item);
          }
          if (Amount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
          }
          if (Current != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Current);
          }
          if (Reason != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
          }
          size += extras_.CalculateSize(_map_extras_codec);
          if (CoinsPerDollar != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CoinsPerDollar);
          }
          return size;
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                item_ = (global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.Item) input.ReadEnum();
                break;
              }
              case 16: {
                Amount = input.ReadInt64();
                break;
              }
              case 24: {
                Current = input.ReadUInt64();
                break;
              }
              case 32: {
                reason_ = (global::DragonU3DSDK.Network.API.ILProtocol.BiEventFortuneX.Types.ItemChangeReason) input.ReadEnum();
                break;
              }
              case 42: {
                extras_.AddEntriesFrom(input, _map_extras_codec);
                break;
              }
              case 48: {
                CoinsPerDollar = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code