syntax = "proto3";
package fortune_x_bi;
option java_package = "com.dragonplus.network.api.protocol";
option csharp_namespace="DragonU3DSDK.Network.API.Protocol";
option go_package="protocols";

message BiEventFortuneX {
    enum GameEventType {
        GAME_EVENT_PLACEHOLDER = 0; // 占位，无含义
        GAME_EVENT_LAUNCH_APP = 1; // 漏斗：启动游戏，成功后发送日志
        GAME_EVENT_INIT_ADDRESSABLE_SUCCESS = 2; // 漏斗：初始化资源下载插件成功，发送日志
        GAME_EVENT_DOWNLOAD_CODE = 3; // 漏斗：下载热更代码成功，发送日志
        GAME_EVENT_START_LOAD_LOADING = 4; // 漏斗：下载loading资源成功，发送日志
        GAME_EVENT_ENTER_LOADING_SCENE = 5; // 漏斗：进入loading开始下载核心资源，发送日志
        GAME_EVENT_DOWNLOAD_RESOURCE = 6; // 漏斗：下载资源成功，发送日志
        GAME_EVENT_ENTER_LOGIN_SCREEN = 7; // 漏斗：进入登录页面，发送日志
        GAME_EVENT_USER_LOGIN = 8; // 漏斗：用户登录，发送日志；extras记录login_type（Guest、Facebook、AppleId）
        GAME_EVENT_GUIDE_POP_WELCOME = 9; // 漏斗：弹出新手引导界面-给玩家初始资金,发送日志
        GAME_EVENT_GUIDE_COLLECT_WELCOME = 10; // 漏斗：点击新手引导界面收到初始资金,发送日志
        GAME_EVENT_GUIDE_POP_FIRST_MACHINE = 11; // 漏斗：弹出新手引导界面-点击第一个机器,发送日志
        GAME_EVENT_GUIDE_TAP_FIRST_MACHINE = 12; // 漏斗：点击新手引导界面-第一个机器,发送日志
        GAME_EVENT_GUIDE_POP_SPIN_1 = 13; // 漏斗：弹出新手引导1-点击Spin按钮,发送日志
        GAME_EVENT_GUIDE_TAP_SPIN_1 = 14; // 漏斗：点击新手引导1-第一次点击Spin按钮,发送日志
        GAME_EVENT_GUIDE_COMPLETE_1 = 15; // 漏斗：完成新手引导1-点击3次SPIN ,发送日志; 
        GAME_EVENT_GUIDE_POP_REACH_LEVEL_2 = 16; // 漏斗：弹出新手引导2-到达指定等级3,发送日志
        GAME_EVENT_GUIDE_COMPLETE_REACH_LEVEL_2 = 17; // 漏斗：完成新手引导2-到达指定等级3,发送日志; 
        GAME_EVENT_GUIDE_POP_UNLOCK_QUEST_3 = 18; // 漏斗：弹出新手引导3-解锁新的模块Quest,发送日志
        GAME_EVENT_GUIDE_COMPLETE_UNLOCK_QUEST_3 = 19; // 漏斗：完成新手引导3-解锁新的模块Quest，点击Let's Go,发送日志; 
        GAME_EVENT_GUIDE_TRANSFER_QUEST = 20; // 漏斗：从新手引导界面点击Let's Go跳转到Quest界面成功,发送日志
        GAME_EVENT_QUEST_ENTER = 21; // 漏斗：进入新手Quest，发送日志；extras记录来源source（Guide、Advertisement、Machine、Lobby）
        GAME_EVENT_QUEST_TAP_1 = 22; // 漏斗：点击新手Quest1-第一台机器,发送日志
        GAME_EVENT_QUEST_COMPLETE_1 = 23; // 漏斗：完成新手Quest1-第一台机器,发送日志; extras记录倒计时CountDown
        GAME_EVENT_QUEST_COLLECT_1 = 24; // 漏斗：领取新手Quest1-第一个奖励节点,发送日志
        GAME_EVENT_QUEST_TAP_2 = 25; // 漏斗：点击新手Quest2-第二台机器,发送日志
        GAME_EVENT_QUEST_COMPLETE_2 = 26; // 漏斗：完成新手Quest2-第二台机器,发送日志; extras记录倒计时countDown
        GAME_EVENT_QUEST_COLLECT_2 = 27; // 漏斗：领取新手Quest2-第二个奖励节点,发送日志
        GAME_EVENT_QUEST_TAP_3 = 28; // 漏斗：点击新手Quest3-第三台机器,发送日志
        GAME_EVENT_QUEST_COMPLETE_3 = 29; // 漏斗：完成新手Quest3-第三台机器,发送日志; extras记录倒计时countDown
        GAME_EVENT_QUEST_COLLECT_3 = 30; // 漏斗：领取新手Quest3-第三个奖励节点,发送日志
        GAME_EVENT_QUEST_TAP_4 = 31; // 漏斗：点击新手Quest4-第四台机器,发送日志
        GAME_EVENT_QUEST_COMPLETE_4 = 32; // 漏斗：完成新手Quest4-第四台机器,发送日志; extras记录倒计时countDown
        GAME_EVENT_QUEST_COLLECT_4 = 33; // 漏斗：领取新手Quest4-第四个奖励节点,发送日志
        GAME_EVENT_QUEST_TAP_5 = 34; // 漏斗：点击新手Quest5-第五台机器,发送日志
        GAME_EVENT_QUEST_COMPLETE_5 = 35; // 漏斗：完成新手Quest5-第五台机器,发送日志; extras记录倒计时countDown
        GAME_EVENT_QUEST_COLLECT_5 = 36; // 漏斗：领取新手Quest5-第五个奖励节点,发送日志
        GAME_EVENT_QUEST_TAP_6 = 37; // 漏斗：点击新手Quest6-第六台机器,发送日志
        GAME_EVENT_QUEST_COMPLETE_6 = 38; // 漏斗：完成新手Quest6-第六台机器,发送日志; extras记录倒计时countDown
        GAME_EVENT_QUEST_COLLECT_6 = 39; // 漏斗：领取新手Quest6-第六个奖励节点,发送日志
        GAME_EVENT_MACHINE_CLICK = 40; // 点击机器图标，发送日志；extras记录来源source（Advertisement、Lobby、MachineUnlock）、机器gameId
        GAME_EVENT_MACHINE_DOWNLOAD_START = 41; // 机器开始下载，发送日志（只在下载的时候加，Loading的时候不加）
        GAME_EVENT_MACHINE_DOWNLOAD_SUCCESS = 42; // 机器下载成功，发送日志
        GAME_EVENT_MACHINE_DOWNLOAD_FAIL = 43; // 机器下载失败，发送日志；extras记录机器gameId
        GAME_EVENT_LEVEL_UP = 44; // 升级，发送日志；extras记录升级后Level
        GAME_EVENT_VIP_LEVEL_UP = 45; // VIP升级，发送日志；extras记录升级原因reason（LevelUp、Purchase、MissionPassReward）
        GAME_EVENT_RATE_US_POP = 46; // 弹出Rate Us弹窗时发送日志；extras记录source（Setting）
        GAME_EVENT_RATE_US_5 = 47; // 点击Rate 5星时发送日志
        GAME_EVENT_RATE_US_4 = 48; // 点击Rate 1-4星时发送日志
        GAME_EVENT_RATE_US_CLOSE = 49; // Rate Us 弹窗点击关闭按钮时，发送日志
        GAME_EVENT_BIND_FACEBOOK_BIND = 50; // 点击绑定 FB按钮时，发送日志；extras记录source
        GAME_EVENT_BIND_FACEBOOK_SUCCESS = 51; // 绑定 FB 成功时发送
        GAME_EVENT_BIND_FACEBOOK_FAIL = 52; // 绑定 FB 返回失败时发送；
        GAME_EVENT_LIKE_US_POP = 53; // 弹出Like Us弹窗时发送日志
        GAME_EVENT_LIKE_US_LIKE = 54; // 在Like Us弹窗点击 Like 按钮时发送日志
        GAME_EVENT_LIKE_US_LATER = 55; // 在Like Us弹窗点击 Later 发送日志
        GAME_EVENT_LIKE_US_CLOSE = 56; // 在Like Us弹窗点击 关闭或者No Thanks发送日志
        GAME_EVENT_CONTACT_US = 57; // 打开 Contact Us 页面时发送日志；extras记录来源source（Setting、RateUs（点击评论 1-4 星时打开））
        GAME_EVENT_SETTING_OPEN = 58; // 打开 Setting页面时发送日志
        GAME_EVENT_DAILY_BONUS_POP = 59; // 弹出每日奖励弹窗发送日志
        GAME_EVENT_DAILY_BONUS_DAILY = 60; // 每日奖励弹窗领取每日签到按钮发送日志
        GAME_EVENT_DAILY_BONUS_STAGE = 61; // 每日奖励弹窗领取累计签到按钮发送日志；extras记录stage（1、2、3）、累计签到天数totalLoginDay
        GAME_EVENT_TIMER_BONUS_HOURLY_COLLECT = 62; // 领取TimerBonus里面每小时奖励时发送日志；extras记录领取入口（1.大厅  2.timerbonus主页面  3.机台内），领取时的填充状态（0.不到25%，1.25%--50%，2.50%-75%，3.75%以上，4.100%），领取时的SPIN BUFF等级（1，2，3，4，5）
        GAME_EVENT_TIMER_BONUS_WHEEL_COLLECT = 63; // 领取TimerBonus里面转轮奖励时发送日志；extras记录扇叶wedgeId、superWheelBoost
        GAME_EVENT_TIMER_BONUS_EXTRA_WHEEL_COLLECT = 64; // 领取TimerBonus里面3层转轮奖励时发送日志；extras记录拿到的win、multiple、emerald
        GAME_EVENT_TIMER_BONUS_GOLDEN_WHEEL_POP = 65; // 领取TimerBonus转轮奖励后首次弹出付费转轮时发送日志；extras记录商品paymentId、price
        GAME_EVENT_TIMER_BONUS_GOLDEN_WHEEL_POP_2 = 66; // 领取TimerBonus转轮奖励后玩家点击关闭第二次弹出付费转轮挽留界面时发送日志；extras记录商品paymentId、price
        GAME_EVENT_TIMER_BONUS_GOLDEN_WHEEL_EXIT = 67; // 退出付费转轮界面时发送日志；extras记录商品paymentId、price
        GAME_EVENT_TIMER_BONUS_GOLDEN_WHEEL_PURCHASE = 68; // 点击付费转轮付费按钮时发送日志；extras记录商品paymentId、price
        GAME_EVENT_TIMER_BONUS_GOLDEN_WHEEL_PURCHASE_SUCCESS = 69; // 购买付费转轮成功时发送日志；extras记录商品paymentId、price
        GAME_EVENT_DAILY_MISSION_POP = 70; // 点击并弹出每日任务界面发送日志；extras记录Normal任务完成进度normalSchedule（0、1、2、3）来源source（Lobby、Machine）
        GAME_EVENT_DAILY_MISSION_NORMAL_COLLECT_1 = 71; // 领取每日任务-1时发送日志；
        GAME_EVENT_DAILY_MISSION_NORMAL_COLLECT_2 = 72; // 领取每日任务-2时发送日志；
        GAME_EVENT_DAILY_MISSION_NORMAL_COLLECT_3 = 73; // 领取每日任务-3时发送日志；
        GAME_EVENT_DAILY_MISSION_HONOR_COLLECT = 74; // 领取每日任务-Honor任务时发送日志；
        GAME_EVENT_DAILY_MISSION_STAGE_COLLECT = 75; // 领取每日任务-Stage奖励时发送日志；extras记录领取时stage剩余时间countDown、Stage阶段（1、2）
        GAME_EVENT_MISSION_PASS_POP = 76; // 点击并弹出MissionPass界面发送日志；extras记录来源source（Lobby、Machine、Advertisement）
        GAME_EVENT_MISSION_PASS_COLLECT = 77; // 领取MissionPass奖励发送日志；extras记录领取类型missionType（Free、Mission、FreeLimited、MissionLimited）、MissionPass等级missionPassLevel
        GAME_EVENT_MISSION_PASS_COLLECT_ALL = 78; // 点击MissionPass界面CollectAll按钮发送日志；extras记录领取类型missionType（Free、Mission、Limited）及对应类型数量count、MissionPass等级missionPassLevel
        GAME_EVENT_MISSION_PASS_BUY_LEVEL_POP = 79; // 点击并弹出MissionPass购买等级界面时发送日志；extras记录MissionPass等级missionPassLevel
        GAME_EVENT_MISSION_PASS_BUY_LEVEL_PURCHASE = 80; // 点击MissionPass购买等级界面付费按钮时发送日志；extras记录商品paymentId、price、MissionPass等级missionPassLevel
        GAME_EVENT_MISSION_PASS_BUY_LEVEL_PURCHASE_SUCCESS = 81; // 购买MissionPass等级成功时发送日志；extras记录商品paymentId、price、MissionPass等级missionPassLevel
        GAME_EVENT_MISSION_PASS_UNLOCK_POP = 82; // 点击并弹出MissionPass解锁MissionPass权限界面时发送日志；extras记录MissionPass等级missionPassLevel
        GAME_EVENT_MISSION_PASS_UNLOCK_PURCHASE = 83; // 点击MissionPass解锁界面付费按钮时发送日志；extras记录商品paymentId、price、当前余额、MissionPass等级missionPassLevel
        GAME_EVENT_MISSION_PASS_UNLOCK_PURCHASE_SUCCESS = 84; // 购买MissionPass解锁成功时发送日志；extras记录商品paymentId、price、MissionPass等级missionPassLevel
        GAME_EVENT_STORE_OPEN = 85; // 打开商店界面时发送日志；extras记录来源source（货币栏、Banner、BUY、余额不足）、scene（Lobby、gameId）
        GAME_EVENT_STORE_BONUS_CLICK = 86; // 点击并领取StoreBonus时发送日志
        GAME_EVENT_STORE_GIFT_BOX_CLICK = 87; // 点击GiftBox说明时发送日志
        GAME_EVENT_STORE_GIFT_BOX_COLLECT = 88; // 领取GiftBox奖励时发送日志
        GAME_EVENT_STORE_PURCHASE = 89; // 点击Store付费按钮时发送日志；extras记录商品paymentId、price、productType
        GAME_EVENT_STORE_PURCHASE_SUCCESS = 90; // 购买Store成功时发送日志；extras记录商品paymentId、price、productType
        GAME_EVENT_PURCHASE_FAIL = 91; // 购买失败时发送日志；extras记录失败原因failedReason、product_id
        GAME_EVENT_PIGGY_BANK_OPEN = 92; // 打开PiggyBank界面时发送日志；extras记录来源scene（Lobby、机器gameId、）source(Advertisement, TopPanel)、是否填满Piggy（isFull）
        GAME_EVENT_PIGGY_BANK_PURCHASE = 93; // 点击PiggyBank付费按钮时发送日志；extras记录商品paymentId、price
        GAME_EVENT_PIGGY_BANK_PURCHASE_SUCCESS = 94; // 购买PiggyBank成功时发送日志；extras记录商品paymentId、price、是否首次砸猪isFirst，extra记录当前存储百分比
        GAME_EVENT_SPECIAL_OFFER_POP = 95; // 弹出SpecialOffer界面时发送日志；extras记录来源source（Advertisement、Deal、Lobby）
        GAME_EVENT_SPECIAL_OFFER_PURCHASE = 96; // 点击SpecialOffer付费按钮时发送日志；extras记录商品paymentId、price
        GAME_EVENT_SPECIAL_OFFER_PURCHASE_SUCCESS = 97; // 购买SpecialOffer成功时发送日志；extras记录商品paymentId、price
        GAME_EVENT_INBOX_OPEN = 98; // 点开Inbox时发送日志；extras记录Inbox包含的信息条数messageCount
        GAME_EVENT_INBOX_COLLECT = 99; // 领取Inbox内容时发送日志；extras记录该条内容的信息type
        GAME_EVENT_ADS_POP = 100; // 弹出广告时发送日志；extras记录广告性质adsType（interstitialVideo、rewardVideo）、placeId、userGroup（分层）
        GAME_EVENT_ADS_COLLECT = 101; // 领取广告奖励时发送日志
        GAME_EVENT_TERM_SERVICE_CLICK = 102; // 点击TermofService时发送日志
        GAME_EVENT_PRIVACY_CLICK = 103; // 点击PrivacyPolicy时发送日志
        GAME_EVENT_COUPON_ACTIVITY_COINS_ADENTER = 104; // 点击金币优惠券活动的开屏广告的REDEEM
        GAME_EVENT_COUPON_ACTIVITY_COINS_ADCLOSE = 105; // 点击金币优惠券活动的开屏广告的关闭按钮
        GAME_EVENT_COUPON_ACTIVITY_COINS_REDEEM = 106; // 点击邮箱中的金币优惠券的REDEEM
        GAME_EVENT_COUPON_ACTIVITY_COINS_CAROUSELENTER = 107; // 点击金币优惠券活动的轮播图广告的REDEEM
        GAME_EVENT_QUEST_SEASON_ENTER = 108; // 漏斗：进入赛季Quest，发送日志；extras记录来源source（Guide、Advertisement、Lobby），赛季ID
        GAME_EVENT_QUEST_SEASON_RANKENTER = 109; // 漏斗：点击进入排行榜，发送日志
        GAME_EVENT_QUEST_SEASON_RANKAWARD = 110; // 漏斗：点击查看排行榜奖励页签，发送日志
        GAME_EVENT_QUEST_SEASON_SPEEDUP_CHECK = 111; // 漏斗：点击查看加速齿轮详情，发送日志；extras记录来源（Lobby, Machine ID）
        GAME_EVENT_QUEST_SEASON_SPEEDUP_BUY = 112; // 漏斗：购买加速齿轮时，发送日志；extras记录来源（Lobby, Machine ID），玩家购买时的剩余钻石数
        GAME_EVENT_QUEST_SEASON_QUESTPASS_CHECK = 113; // 漏斗：主动点击查看QUEST PASS详情，发送日志
        GAME_EVENT_QUEST_SEASON_QUESTPASS_BUY = 114; // 漏斗：购买QUEST PASS时，发送日志；extra 记录当前Machine ID
        GAME_EVENT_QUEST_SEASON_TAP = 115; // 漏斗：点击赛季Quest，进入机器，发送日志，extras 记录倒计时CountDown，机台ID，赛季ID
        GAME_EVENT_QUEST_SEASON_COMPLETE = 116; // 漏斗：完成赛季Quest，完成机器，发送日志，extras记录倒计时CountDown，机台ID，赛季ID
        GAME_EVENT_QUEST_SEASON_COLLECT = 117; // 漏斗：领取赛季Quest，领取机器节点，发送日志，extras记录倒计时CountDown，机台ID，赛季ID
        GAME_EVENT_QUEST_SEASON_SELECT = 118; // 漏斗：选择PHASE难度时，发送日志，extras 记录玩家选择的难度以及Phase的编号（PHASE编号按照123456789...顺延）
        GAME_EVENT_PASS_LV5 = 119; // 达到Level5
        GAME_EVENT_PASS_LV9 = 120; // 达到Level9
        GAME_EVENT_PASS_LV10 = 121; // 达到Level10
        GAME_EVENT_PASS_LV15 = 122; // 达到Level15
        GAME_EVENT_PASS_LV20 = 123; // 达到Level20
        GAME_EVENT_PASS_LV25 = 124; // 达到Level25
        GAME_EVENT_PASS_LV30 = 125; // 达到Level30
        GAME_EVENT_PASS_LV40 = 126; // 达到Level40
        GAME_EVENT_PASS_LV50 = 127; // 达到Level50
        GAME_EVENT_PASS_LV60 = 128; // 达到Level60
        GAME_EVENT_PASS_LV70 = 129; // 达到Level70
        GAME_EVENT_BACK_LOBBY = 130; // 返回大厅
        GAME_EVENT_CRAZE_SMASH_POP = 151; // 点击并弹出砸蛋界面发送日志；宣传页1，其他2
        GAME_EVENT_CRAZE_SMASH_COLLECT = 152; // 获得锤子时发送日志；extras记录锤子类型（1.银锤子， 2.金锤子）
        GAME_EVENT_CRAZE_SMASH_WIN = 153; // 使用锤子时发送日志；extras记录时间点，等级，剩余锤子，获得道具（1. 空，2. EXTRA，3.FINAL）
        GAME_EVENT_CRAZE_SMASH_BUY_ENTER = 154; // 点击购买锤子界面时发送日志；extras记录点击入口（1.1个银锤子，2. 多个银锤子，3.1个金锤子，4.多个金锤子）
        GAME_EVENT_CRAZE_SMASH_BUY = 155; // 购买锤子时发送日志；extras记录锤子类型（1.银锤子， 2.金锤子），记录购买数量
        GAME_EVENT_PASS_LV23 = 156; // 达到level23
        GAME_EVENT_PASS_LV65 = 157; // 达到level65
        GAME_EVENT_PASS_LV75 = 158; // 达到level75
        GAME_EVENT_PASS_LV80 = 159; // 达到level80
        GAME_EVENT_PASS_LV90 = 160; // 达到level90
        GAME_EVENT_PASS_LV95 = 161; // 达到level95
        GAME_EVENT_PASS_LV100 = 162; // 达到level100
        GAME_EVENT_PASS_LV105 = 163; // 达到level105
        GAME_EVENT_PASS_LV110 = 164; // 达到level110
        GAME_EVENT_PASS_LV120 = 165; // 达到level120
        GAME_EVENT_PASS_LV130 = 166; // 达到level130
        GAME_EVENT_PASS_LV150 = 167; // 达到level150
        GAME_EVENT_PURCHASE_ONETIME_199 = 168; // 一次性付费1.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        GAME_EVENT_PURCHASE_ONETIME_499 = 169; // 一次性付费4.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        GAME_EVENT_PURCHASE_ONETIME_999 = 170; // 一次性付费9.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        GAME_EVENT_PURCHASE_ONETIME_1999 = 171; // 一次性付费19.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        GAME_EVENT_PURCHASE_ONETIME_4999 = 172; // 一次性付费49.99（只计游戏内一次性付费该金额，不管买了什么，在哪个页面或活动消费，都算完成该事件，累计达到该金额不算）
        GAME_EVENT_COMPLETE_ADRUSH_10ADS = 173; // 看完ad rush的10个广告
        GAME_EVENT_PASS_LV32 = 174; // 达到level32
        GAME_EVENT_PASS_LV35 = 175; // 达到level35
        GAME_EVENT_PASS_LV160 = 176; // 达到level160
        GAME_EVENT_PASS_LV180 = 177; // 达到level180
        GAME_EVENT_PASS_LV200 = 178; // 达到Level 200
        GAME_EVENT_PASS_LV220 = 179; // 达到Level 220
        GAME_EVENT_PASS_LV240 = 180; // 达到Level 240
        GAME_EVENT_PASS_LV260 = 181; // 达到Level 260
        GAME_EVENT_PASS_LV280 = 182; // 达到Level 280
        GAME_EVENT_PASS_LV320 = 183; // 达到Level 320
        GAME_EVENT_PASS_LV350 = 184; // 达到Level 350
        GAME_EVENT_PASS_LV380 = 185; // 达到Level 380
        GAME_EVENT_PASS_LV400 = 186; // 达到Level 400
        GAME_EVENT_PASS_LV430 = 187; // 达到Level 430
        GAME_EVENT_PASS_LV450 = 188; // 达到Level 450
        GAME_EVENT_PASS_LV470 = 189; // 达到Level 470
        GAME_EVENT_PASS_LV500 = 190; // 达到Level 500
        GAME_EVENT_PASS_LV520 = 191; // 达到Level 520
        GAME_EVENT_PASS_LV550 = 192; // 达到Level 550
        GAME_EVENT_PASS_LV570 = 193; // 达到Level 570
        GAME_EVENT_PASS_LV600 = 194; // 达到Level 600
        GAME_EVENT_RV_WATCHED_FINISHED = 195; // RV广告看完了 extra（ duration 观看时长，placeId,广告位）
        GAME_EVENT_COLLECTION_ENTER = 201; // 进入收集卡牌活动主界面时，发送日志，extras记录来源和打开次数（1. 玩家点击全屏广告，2. 点击大厅ICON）
        GAME_EVENT_COLLECTION_ALBUM_ENTER = 202; // 收集卡牌主界面中，点击卡册，发送日志，extras记录点击了哪个卡册（1～12根据ID）
        GAME_EVENT_COLLECTION_ALBUM_CARDCHECK = 203; // 卡册界面中玩家操作，发送日志，extras记录点击次数（1.点击未获得卡片，2.点击以获得卡片，3.点击左右切换）
        GAME_EVENT_COLLECTION_LUCKY_CHALLENGE_ENTER = 204; // 收集卡牌主界面中点击LuckChallenge时，发送日志
        GAME_EVENT_COLLECTION_LUCKY_SPIN_ENTER = 205; // 收集卡牌主界面中点击LuckSpin时，发送日志
        GAME_EVENT_COLLECTION_LUCKY_SPIN_START = 206; // LuckSpin中点击按钮时，发送日志，extras记录点击按钮次数（1.SPIN，2.SPIN ALL ,3.SPIN ALL二级弹窗CONFIRM，4.SPIN ALL二级弹窗"X"，5.CHECK PRIZE,6"X按钮"）
        GAME_EVENT_COLLECTION_LUCKY_SPIN_RESULT = 207; // LuckSpin奖励弹窗出现时，发送日志，extras记录按钮次数（1.LATER，2.COLLECT NOW）
        GAME_EVENT_COLLECTION_FORTUNE_EXCHANGE_ENTER = 208; // 收集卡牌主界面中点击Fortune Exchange时，发送日志
        GAME_EVENT_COLLECTION_FORTUNE_EXCHANGE_START = 209; // Fortune Exchange游戏中，发送日志，extras记录按钮次数（1.SELECT FOR ME, 2.SPIN）
        GAME_EVENT_COLLECTION_FORTUNE_EXCHANGE_RULE = 210; // 点击Fortune Exchange 帮助按钮时发送日志
        GAME_EVENT_COLLECTION_MAGIC_HAT_ENTER = 211; // 进入4选1游戏后发送日志，extras记录来源和打开次数（1.卡册主界面ICON，2.点击老虎机中的ICON)
        GAME_EVENT_COLLECTION_MAGIC_HAT_START = 212; // 进入4选1游戏在主界面点击按钮时，发送日记，extras记录来源和打开次数（1.点击PLAY，2.点击“X”退出）
        GAME_EVENT_COLLECTION_MAGIC_HAT_TAKE = 213; // 4选1游戏过程中点击TAKE & LEAVE按钮时，发送日志
        GAME_EVENT_COLLECTION_MAGIC_HAT_OVER = 214; // 4选1游戏过程死亡弹窗出现点击按钮，发送日志，extras记录来源和打开次数（1.点击广告按钮，2.花宝石复活，3.GIVE UP）
        GAME_EVENT_COLLECTION_MAGIC_HAT_COMPLETE = 215; // 4选1游戏过程中玩到15关出现弹窗，点击COLLECT按钮时发送日志
        GAME_EVENT_PIGGY_BONUS_GIFTBOX_POPUP = 230; // 小猪机台礼包弹出时发送日子，extras记录弹出途径（1.自动弹出，2.玩家点击）
        GAME_EVENT_PIGGY_BONUS_GIFTBOX_BUY = 231; // 小猪机台礼包点击购买时，发送日志
        GAME_EVENT_PIGGY_BONUS_GIFTBOX_BUY_SUCCESSFUL = 232; // 小猪机台礼包购买成功时，发送日志
        GAME_EVENT_NEWBIEQUEST_BOOST_POPUP = 233; // 新手quest加速电池购买页面弹出时，发送日志，extra记录弹出途径（1.自动弹出，2.玩家点击）
        GAME_EVENT_NEWBIEQUEST_BOOST_AD_POPUP = 234; // 新手quest加速电池广告页面弹出时，发送日志
        GAME_EVENT_NEWBIEQUEST_BOOST_BUY = 235; // 新手quest加速电池购买页面弹出，点击购买时，发送日志，extra记录购买哪个档次（1.2.3）
        GAME_EVENT_NEWBIEQUEST_BOOST_BUY_SUCCESSFUL = 236; // 新手quest加速电池购买页面弹出，购买成功时，发送日志，extra记录购买哪个档次（1.2.3）
        GAME_EVENT_NEWBIEQUEST_BOOST_AD_WATCH = 237; // 新手quest加速电池广告页面弹出，点击观看时，发送日志
        GAME_EVENT_AVATAR_OPEN = 238; // 点击打开角色头像时，发送日志
        GAME_EVENT_AVATAR_CHANGE = 239; // 点击更换角色头像时，发送日志，extra 记录头像id
        GAME_EVENT_LAUNCH_METRICS = 240; // 游戏启动性能追踪，extras里记录各个时间点的时间戳，value取毫秒的时间戳整数，key取如下值，包括但不限于：;启动: launch;拉取灰度开始: fetch_version_start;拉取灰度成功: fetch_version_success;拉取灰度失败: fetch_version_failure;下载热更代码开始: fetch_il_code_start;下载热更代码成功: fetch_il_code_success;下载热更代码失败: fetch_il_code_failure;短连接登录开始: login_start;短连接登录成功: login_success;短连接登录失败: login_failure;长链接开始: socket_io_connect_start;长链接成功: socket_io_connect_success;长链接失败: socket_io_connenct_failure;大厅协议开始: lobby_protocol_start;大厅协议成功: lobby_protocol_success;大厅协议失败: lobby_protocol_failure;进入大厅: enter_lobby
        GAEM_EVENT_USER_ACTION = 250; // 玩家行为日志记录
        GAME_EVENT_TREASURERAID_ENTER = 300; // 进入大富翁系统，发送日志，extras记录来源和打开次数（1. 全屏广告，2. 轮播广告，3. 机台左侧icon，4.强制弹窗，5.门票已满强制弹窗，6.门票已满二次确认弹窗，7.大厅ICON进入）
        GAME_EVENT_TREASURERAID_TICKETFULL = 301; // 门票已满，发送日志，extras记录玩家操作（1.门票已满弹窗点击X）
        GAME_EVENT_TREASURERAID_EXPUP = 302; // 机台中点击SPIN获得门票经验时，发送日志
        GAME_EVENT_TREASURERAID_WHIRL = 303; // 大富翁点击SPIN转盘时，发送日志
        GAME_EVENT_TREASURERAID_FIREAGAIN = 304; // 大炮FIRE AGAIN弹窗出现点击按钮时记录（1.点击看广告，2.点击花宝石，3.点击关闭）
        GAME_EVENT_TREASURERAID_CHESTMORE = 305; // 大富翁宝箱栏位已满再次获得宝箱时弹窗操作记录（1.关闭弹窗，2.花费宝石开启）
        GAME_EVENT_TREASURERAID_CHESTOPEN = 306; // 玩家点击花费宝石开启宝箱时弹窗操作记录（1.关闭弹窗，2.花费宝石开启）
        GAME_EVENT_TREASURERAID_COUNTDOWN_OVER = 307; // 宝箱倒计时结束，点击开启宝箱按钮时，发送日志
        GAME_EVENT_TREASURERAID_PURCHASE_WINDOW = 308; // 点击SPIN下面的【+】号弹出购买弹窗时，操作记录（1.关闭弹窗，2，购买门票）
        GAME_EVENT_TREASURERAID_LEVELPRIZE = 309; // 玩家进入新关卡时，进行记录（1.关卡1，2.关卡2，3.关卡3，4.关卡4，5.关卡5，6.关卡6）
        GAME_EVENT_TREASURERAID_ROUNDPRIZE = 310; // 玩家完成轮次时，进行记录（1.完成第1轮，2.完成第2轮，3.完成第3轮，4.完成第4轮，5.完成第5轮，6.完成第6轮，7.完成第7轮，8.完成第8轮，9.完成第9轮）
        GAME_EVENT_TREASURERAID_BOOSTER_BUY1 = 311; // 玩家成功购买Booster电池时，发送日记
        GAME_EVENT_TREASURERAID_BOOSTER_BUY2 = 312; // 玩家成功购买Booster火炮伤害翻倍，发送日记
        GAME_EVENT_TREASURERAID_BOOSTER_BUY3 = 313; // 玩家成功购买Booster传送门，发送日记
        GAME_EVENT_TREASURERAID_MISSION = 314; // 玩家完成每日任务，进行记录（1.完成1，2.完成2，3.完成3，4.完成4，5.完成5，6.完成6，）
        GAME_EVENT_TREASURERAID_GETTICKETS = 315; // 机台中点击SPIN经验增加到100%获得门票时增加打点
        GAME_EVENT_COINDASH_ENTER = 330; // 进入COINDASH系统，发送日志，extras记录来源和打开次数（1.大厅轮播广告进入）
        GAME_EVENT_COINDASH_COLLECT = 331; // COINDASH系统领取奖励时发送日志（1.领取第1个奖励，2.领取第2个奖励，3.领取第3个奖励，4.领取第4个奖励，5.领取第5个奖励）
        GAME_EVENT_SUPERSPINX_PLAY = 332; // 完成金币付费进入SuperSpinX系统时发送日志，extras记录触发时付费金额（1.1.99，2.4.99， 3.9.99，4.19.99，5.49.99，6.99.99）
        GAME_EVENT_SUPERSPINX_WINMULTIPLE = 333; // 记录SpuerSpinX转停，extras记录中奖符号（1.any other ，2.樱桃，3.骰子，4.铃铛，5.宝石，6.七，7.any other 3 ,8.中2个jp， 9.中3个jp）
        GAME_EVENT_LEVELRUSH_COMPLETE = 340; // 完成LevelRush所有节点时，发送日志
        GAME_EVENT_LEVELRUSH_NODECOMPLETE = 341; // 完成LevelRush节点时，发送日志（1.完成节点1，2.完成节点2，3.完成节点3）
        GAME_EVENT_LEVELRUSH_TURNITON = 342; // 通过Rush促销界面，点击【TURN IT ON】跳转【商店】界面时，发送日志
        GAME_EVENT_LEVELRUSH_FAIL = 343; // 触发LevelRush失败弹窗，发送日志
        GAME_EVENT_LEVELRUSH_LOTTOPOP = 344; // 触发Lotto游戏弹窗，发送日志（1.通过弹窗点击Play，2.点击【X】吧Lotto保存在邮箱）
        GAME_EVENT_LEVELRUSH_MAILPLAY = 345; // 在邮箱中触发Lotto游戏时，发送日志
        GAME_EVENT_LEVELRUSH_FREEPLAY = 346; // 免费Lotto点击【Play】按钮时，发送日志
        GAME_EVENT_LEVELRUSH_FREECOLLECT = 347; // 免费Lotto结算界面点击【COLLECT】按钮时，发送日志
        GAME_EVENT_LEVELRUSH_PAYPOP = 348; // 付费Lotto触发点击按钮时，发送日志（1.点击付费并且成功，2.点击关闭按钮）
        GAME_EVENT_LEVELRUSH_PAYCOLLECT = 349; // 付费Lotto结算界面点击【COLLECT】按钮时，发送日志
        GAME_EVENT_VALENTINESDAY_ENTER = 1001; // 进入情人节活动主页时，发送日志，extras记录来源和打开次数（1. 玩家点击全屏广告，2. 玩家点击轮播广告，3. 玩家完成任务主动弹出）
        GAME_EVENT_VALENTINESDAY_PROGRESS = 1002; // 情人节活动点亮新的地图进度时，发送日志，extras 记录前进步数和获取来源（1. daily mission, 2. honor mission)
        GAME_EVENT_VALENTINESDAY_COLLECT = 1003; // 情人节活动，领取奖励时，发送日志，extras记录领取奖励的ID
        GAME_EVENT_VALENTINESDAY_PASSUNLOCK = 1004; // 情人节活动，解锁PASS时，发送日志，extras记录来源（1.情人节大厅界面，2.领奖界面），记录解锁时玩家达到的情人节奖励点的位置
        GAME_EVENT_PURCHASE_SHOP_COIN_199 = 1005; // 购买商城1.99商品
        GAME_EVENT_PURCHASE_SHOP_COIN_499 = 1006; // 购买商城4.99商品
        GAME_EVENT_PURCHASE_SHOP_COIN_999 = 1007; // 购买商城9.99商品
        GAME_EVENT_PURCHASE_SHOP_COIN_1999 = 1008; // 购买商城19.99商品
        GAME_EVENT_FOURTHOFJULY_ENTER = 1009; // 进入独立日活动主页时，发送日志，extras记录来源和打开次数（1. 玩家点击全屏广告，2. 玩家点击轮播广告）
        GAME_EVENT_FOURTHOFJULY_PROGRESS = 1010; // 独立日活动点亮新的地图进度时，发送日志
        GAME_EVENT_FOURTHOFJULY_COLLECT = 1011; // 独立日活动，成功领取奖励时，发送日志
        GAME_EVENT_FOURTHOFJULY_PASSUNLOCK = 1012; // 独立日活动，成功购买付费PASS时，发送日志
        GAME_EVENT_RUSHPASS_WIN = 1020; // 完成RushPass节点时，发送日志（1.完成节点1，2.完成节点2，3.完成节点3，4.完成节点4，5.完成节点5，6.完成节点6）
        GAME_EVENT_RUSHPASS_PYASUCCESS = 1021; // RushPass付费成功时，发送日志（1.结算面板付费成功，2.PASS界面付费成功）
        GAME_EVENT_RUSHPASS_ENTER = 1022; // RushPass活动开启，玩家通过点击【LevelRush】的进度条进入RushPass界面是，发送日志
    }
    enum SpinActionType {
        SPIN_ACTION_TYPE_NONE = 0; // 占位
        SPIN_ACTION_TYPE_SPIN = 1; // SPIN；extras记录游戏状态（如BaseGame、Feature）
        SPIN_ACTION_TYPE_STOP = 2; // 提前停止Spin
        SPIN_ACTION_TYPE_NO_CHIPS = 3; // 没有钱了
        SPIN_ACTION_TYPE_FEATURE_TRIGGER = 4; // 机器Feature；extras记录feature_type（如FreeGame、Link、Map）、其余信息和前端同学协商
        SPIN_ACTION_TYPE_FEATURE_PLAY = 5; // 
        SPIN_ACTION_TYPE_FEATURE_END = 6; // 机器Feature结束；extras记录的游戏状态和前端同学协商
        SPIN_ACTION_TYPE_JACKPOT = 7; // extras中记录：;jackpotId: jackpotId;jackpotLevel: "mini", "minor", "major", "grand";jackpotWin: jackpot对应的赢钱
        SPIN_ACTION_TYPE_CHANGE_BET = 8; // 切换Bet
        SPIN_ACTION_TYPE_OPEN_PAYTABLE = 9; // 查看PayTable
    }
    enum Item {
        ITEM_NONE = 0; // 占位
        ITEM_COIN = 1; // 金币
        ITEM_EXP = 2; // 经验
        ITEM_VIP_POINTS = 3; // VIP点数
        ITEM_EMERALD = 4; // 绿宝石
        ITEM_GIFT_BOX = 5; // GiftBox
        ITEM_LEVEL_UP_BURST = 6; // 升级奖励Boost
        ITEM_SUPER_WHEEL = 7; // 付费转轮奖励Boost
        ITEM_DOUBLE_XP = 8; // 双倍经验Boost
        ITEM_MISSION_POINTS = 9; // DailyMission点数
        ITEM_MISSION_STARS = 10; // MissionPass点数
    }
    enum ItemChangeReason {
        ITEM_CHANGE_REASON_NONE = 0; // 占位
        ITEM_CHANGE_REASON_CREATE_PROFILE = 1; // 获得：创建账号获得发送日志
        ITEM_CHANGE_REASON_GUIDE = 2; // 获得：完成新手引导拿到金币、绿宝石；extras记录新手引导任务
        ITEM_CHANGE_REASON_QUEST = 3; // 获得：完成新手Quest拿到金币、绿宝石、Boost；extras记录新手Quest关卡进度
        ITEM_CHANGE_REASON_BIND_FACEBOOK = 4; // 获得：绑定Facebook拿到金币
        ITEM_CHANGE_REASON_LIKE_US = 5; // 获得：like粉丝页奖励拿到金币
        ITEM_CHANGE_REASON_IAP = 6; // 获得：支付获得金币、绿宝石、VIP点数、GiftBox、Boost；extras 记录product_id、玩家余额、机器id、是否使用了Coupon
        ITEM_CHANGE_REASON_STORE_BONUS = 7; // 获得：领取商店免费金币拿到金币
        ITEM_CHANGE_REASON_STORE_GIFT_BOX = 8; // 获得：领取商店GiftBox拿到金币
        ITEM_CHANGE_REASON_SPIN = 9; // 获得：Spin拿到金币、经验；extras记录机器id，如果在feature中则记录Freespin、Respin、SmallGame
        ITEM_CHANGE_REASON_LEVEL_UP = 10; // 获得：升级拿到金币、VIP点数
        ITEM_CHANGE_REASON_VIP_LEVEL_UP = 11; // 获得：VIP升级拿到金币及消耗经验；extras记录升级后的VIP等级
        ITEM_CHANGE_REASON_DAILY_BONUS_DAILY = 12; // 获得：领取DailyBonus拿到金币、绿宝石、Boost；extras记录第几天奖励、累计签到天数
        ITEM_CHANGE_REASON_DAILY_BONUS_STAGE = 13; // 获得：累计签到一定天数领取拿到金币、绿宝石、Boost；extras记录Stage阶段（1、2、3）、累计签到天数
        ITEM_CHANGE_REASON_TIMER_BONUS_HOURLY = 14; // 获得：领取TimerBonus每小时奖励拿到金币
        ITEM_CHANGE_REASON_TIMER_BONUS_WHEEL = 15; // 获得：领取TimerBonus转盘奖励拿到金币；extras记录拿到的扇叶id、SuperWheelBoost(记0、1)
        ITEM_CHANGE_REASON_TIMER_BONUS_EXTRA_WHEEL = 16; // 获得：领取TimerBonus3层转盘奖励拿到金币、绿宝石
        ITEM_CHANGE_REASON_DAILY_MISSION_NORMAL = 17; // 获得：完成每日任务拿到金币、MissionPoints、MissionStars；消耗：花费绿宝石完成每日任务；extras记录完成任务关数1、2、3
        ITEM_CHANGE_REASON_DAILY_MISSION_HONOR = 18; // 获得：完成Honor任务拿到金币、MissionPoints、MissionStars；extras记录Honor任务完成轮数与当前轮的次数
        ITEM_CHANGE_REASON_DAILY_MISSION_STAGE = 19; // 获得：达到一定MissionPoints拿到金币、绿宝石、Boost；extras记录领取时MissionPoints和Stage阶段1、2
        ITEM_CHANGE_REASON_MISSION_PASS_FREE = 20; // 获得：领取MissionPass免费拿到金币、绿宝石、Boost、Vip点数；extras记录MissionPass奖励等级和当前MissionPass等级
        ITEM_CHANGE_REASON_MISSION_PASS_MISSION = 21; // 获得：领取MissionPass付费拿到金币、绿宝石、Boost、Vip点数；extras记录MissionPass奖励等级和当前MissionPass等级
        ITEM_CHANGE_REASON_MISSION_PASS_LIMITED = 22; // 获得：领取MissionPass限时拿到金币、绿宝石、Boost、Vip点数；extras记录MissionPass奖励等级、当前MissionPass等级和任务倒计时
        ITEM_CHANGE_REASON_MISSION_PASS_LEVEL = 23; // 消耗：花费绿宝石购买MissionPass等级；extras记录当前MissionPass等级
        ITEM_CHANGE_REASON_INBOX = 24; // 获得：领取Inbox拿到的金币、绿宝石、Boost、Vip点数；extras记录发放原因如MissionPassChest等级赛季结算、CashBack活动
        ITEM_CHANGE_REASON_ADS = 25; // 获得：观看广告拿到金币；extras记录广告入口
        ITEM_CHANGE_REASON_ADMIN = 26; // 获得：后台权限增加拿到的金币、绿宝石、Boost、Vip点数等；extras记录备注
        ITEM_CHANGE_REASON_EXPIRE = 27; // 消耗：GiftBox填满或者过期、MissionPoints清零、MissionStar清零；
        ITEM_CHANGE_REASON_BIND_APPLEID = 28; // 获得：绑定AppleId拿到金币
        ITEM_CHANGE_REASON_VALENTINEGIFT_FREE = 29; // 获得：完成免费情人节任务拿到金币、绿宝石、Boost；extras记录领取到哪个阶段
        ITEM_CHANGE_REASON_VALENTINEGIFT_PURCHASE = 30; // 获得：完成付费情人节任务拿到金币、绿宝石、Boost；extras记录领取到哪个阶段
        ITEM_CHANGE_REASON_COMPLETE_SET = 31; // 获得：完成卡牌系统Set收集拿到金币；extras记录setId
        ITEM_CHANGE_REASON_COMPLETE_ALBUM = 32; // 获得：完成卡牌系统所有收集拿到金币；extras记录完成时卡牌剩余数量、星星剩余数量、赛季倒计时（天）
        ITEM_CHANGE_REASON_LUCKY_SPIN = 33; // 获得：玩luckyspin小游戏拿金币、绿宝石、卡包
        ITEM_CHANGE_REASON_CARD_RECOVER = 34; // 获得：玩cardrecover小游戏拿金币；extras记录玩家进行游戏时点亮锯齿的数量、玩家游戏频率
        ITEM_CHANGE_REASON_MAGIC_HAT_RELIFE = 35; // 消耗：使用钻石在4选1游戏中复活
        ITEM_CHANGE_REASON_OPERATION_COUPON = 36; // 消耗：消耗运营发放的COUPON链接领取了相应的奖励
        ITEM_CHANGE_REASON_MAGIC_HAT_GET_REWARDS = 37; // 获得：4选1获得奖励
        ITEM_CHANGE_REASON_TREASURERAID_LEVELPRIZE = 38; // 获得：大富翁通关奖励
        ITEM_CHANGE_REASON_TREASURERAID_GOLDWIN = 39; // 获得：大富翁SPIN后地图金币奖励
        ITEM_CHANGE_REASON_TREASURERAID_FIREAGAIN = 40; // 消耗：大富翁二次开炮消耗宝石
        ITEM_CHANGE_REASON_TREASURERAID_OPENNOW = 41; // 消耗：大富翁开启宝箱消耗宝石
        ITEM_CHANGE_REASON_TREASURERAID_BOXWIN = 42; // 获得：大富翁开启宝箱获得各种奖励
        ITEM_CHANGE_REASON_TREASURERAID_MISSION = 43; // 获得：大富翁获得每日任务奖励
        ITEM_CHANGE_REASON_COINDASH_FREE = 44; // 获得：COINDASH领取免费奖励
        ITEM_CHANGE_REASON_LEVELRUSH_WIN = 45; // 获得：LevelRush奖励
        ITEM_CHANGE_REASON_LOTTO_WIN = 46; // 获得：免费Lotto奖励
        ITEM_CHANGE_REASON_FOURTHOFJULY_FREEWIN = 47; // 获得：完成免费独立日任务拿到金币、绿宝石、Boost；extras记录领取到哪个阶段
        ITEM_CHANGE_REASON_FOURTHOFJULY_PURCHASE = 48; // 获得：完成付费独立日任务拿到金币、绿宝石、Boost；extras记录领取到哪个阶段
        ITEM_CHANGE_REASON_SUPERSPINX_PURCHASE = 49; // 获得：完成付费SUPERSPINX获得金币奖励
        ITEM_CHANGE_REASON_RUSHPASS_FREEWIN = 50; // 获得：领取免费RushPass奖励
        ITEM_CHANGE_REASON_RUSHPASS_PURCHASE = 51; // 获得：领取付费RushPass奖励
    }
    
    message Common {
        uint64 coin = 1; // 当前金币数量
        uint64 level = 2; // 当前等级
        uint64 vip_level = 3; // 当前vip等级
        uint64 emerald = 4; // 当前绿宝石数量
        uint64 vip_points = 5; // 当前vip点数数量
        uint64 exp = 6; // 当前经验
    }
    message GameEvent {
        GameEventType game_event_type = 1; // 
        map<string, string> extras = 2; // 
    }
    message PanelColumn {
        repeated uint64 symbols = 1; // 
    }
    message Panel {
        repeated PanelColumn columns = 1; // 
    }
    message SpinAction {
        string game_id = 1; // 
        SpinActionType spin_action_type = 2; // 
        bool is_auto = 3; // 
        bool is_fast = 4; // 
        string spin_mode = 5; // 
        uint64 bet = 6; // 
        string request_id = 7; // 
        map<string, string> extras = 8; // 
    }
    message SpinResult {
        string game_id = 1; // 
        SpinActionType spin_action_type = 2; // 
        string request_id = 3; // 
        uint64 bet = 4; // 
        uint64 win = 5; // 
        repeated Panel panels = 6; // 
        repeated uint64 positions = 7; // 
        map<string, string> extras = 8; // 
        bool is_spin_end = 9; // 
        uint64 cost = 10; // 
        uint64 display_win = 11; // 
        uint64 display_total_win = 12; // 
        string control_stragegy_id = 13; // 
        uint64 control_stragegy_random = 14; // 
        uint64 coins_per_dollar = 15; // 
    }
    message ItemChange {
        Item item = 1; // 
        int64 amount = 2; // 
        uint64 current = 3; // 
        ItemChangeReason reason = 4; // 
        map<string, string> extras = 5; // 
        uint64 coins_per_dollar = 6; // 
    }
    
    Common common = 1;
    oneof payload {
        GameEvent game_event = 11;
        SpinAction spin_action = 12;
        SpinResult spin_result = 13;
        ItemChange item_change = 14;
        
    }
}